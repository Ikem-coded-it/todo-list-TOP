/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/UI/style.css":
/*!****************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/UI/style.css ***!
  \****************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "* {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n:root {\r\n    --header-color: #f1f5f9;\r\n    --side-bar-color: #0f172a;\r\n    --content-color: #f8fafc;\r\n    --default-font-color: #292524;\r\n    --icon-color: #a3e635;\r\n    --todos-color: #cffafe;\r\n    --text-color: #464545;\r\n}\r\n\r\nbody {\r\n    height: 100vh;\r\n    width: 100vw;\r\n    display: grid;\r\n    grid-template-columns: 80% 20%;\r\n    grid-template-rows: 20% 73% 7%;\r\n    font-family: Arial, sans-serif;\r\n    color: var(--default-font-color);\r\n}\r\n\r\nli {\r\n    list-style: none;\r\n}\r\n\r\ni {\r\n    color: var(--icon-color);\r\n}\r\n \r\n.header {\r\n    grid-column: 1 / 2;\r\n    background-color: var(--header-color);\r\n    padding: 0 30px 0 30px;\r\n    box-shadow: 3px 3px 10px rgb(160, 160, 160);\r\n    color: var(--text-color);\r\n}\r\n\r\n.side-bar {\r\n    grid-column: 2 / 3;\r\n    grid-row: 1 / 4;\r\n    height: 100%;\r\n    background-color: var(--header-color);\r\n    color: #f8fafc;\r\n}\r\n\r\n.content {\r\n    grid-column: 1 / 2;\r\n    background-color: var(--content-color);\r\n}\r\n\r\n.footer {\r\n    grid-column: 1 / 2;\r\n}\r\n\r\n/* HEADER STYLES */\r\n\r\n.header-content {\r\n    height: 100%;\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n}\r\n\r\n.logo-container {\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n\r\n.logo-image {\r\n    margin-left: 30px;\r\n}\r\n\r\n.fa-square-check {\r\n    font-size: 60px;\r\n}\r\n\r\n.logo-text {\r\n    font-size: 50px;\r\n    font-weight: bold;\r\n}\r\n\r\n.greeting-date-container {\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n    justify-content: center;\r\n    flex-shrink: 2;\r\n}\r\n\r\n.greeting-container {\r\n    font-size: 50px;\r\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\r\n}\r\n\r\n.date {\r\n    font-size: 20px;\r\n    font-family: Geneva, Verdana, sans-serif;\r\n    font-weight: bold;\r\n    display: flex;\r\n    justify-content: end;\r\n    width: 100%;\r\n}\r\n\r\n/* SIDE BAR STYLES */\r\n\r\n.side-bar-content {\r\n    height: 100%;\r\n    border-top-left-radius: 30px;\r\n    background-color: var(--side-bar-color);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: relative;\r\n}\r\n\r\n.side-bar-stuff {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    gap: 20px;\r\n    font-size: 15px;\r\n    font-family: Geneva, Verdana, sans-serif;\r\n    font-weight: 100px;\r\n    position: absolute;\r\n    top: 30px;\r\n}\r\n\r\n.side-bar-stuff > div {\r\n    display: flex;\r\n    gap: 15px;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    cursor: pointer;\r\n}\r\n\r\n.side-bar-stuff > div > div {\r\n    transition: all 0.3s;\r\n}\r\n\r\n.side-bar-stuff>div>div:hover {\r\n    color: var(--icon-color);\r\n}\r\n\r\n.fa-list-check {\r\n    color: #fcd34d;\r\n}\r\n\r\n.fa-calendar-week {\r\n    color: #86efac;\r\n}\r\n\r\n.fa-calendar-days {\r\n    color: #3b82f6;\r\n}\r\n\r\n.fa-briefcase {\r\n    color: #a855f7;\r\n}\r\n\r\n.fa-caret-down {\r\n    color: white;\r\n}\r\n\r\n#projects-container {\r\n    flex-direction: column;\r\n    position: relative;\r\n}\r\n\r\n#projects-container > div {\r\n    display: flex;\r\n    gap: 12px;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    width: 100%;\r\n}\r\n\r\n.project-list {\r\n    display: none;\r\n    position: absolute;\r\n    top: 15px;\r\n    padding: 5px;\r\n}\r\n\r\n.project-list li {\r\n    padding: .5px;\r\n    margin-top: 10px;\r\n    font-weight: bold;\r\n}\r\n\r\n.project-list li:hover {\r\n    color: var(--icon-color)\r\n}\r\n\r\n#projects-container:hover .project-list {\r\n    display: block;\r\n}\r\n\r\n.project-list:hover {\r\n    display: block;\r\n}\r\n\r\n\r\n/* CONTENT STYLES */\r\n\r\n.main-content {\r\n    height: 100%;\r\n    width: 98%;\r\n    display: grid;\r\n    grid-template-columns: 40% 60%;\r\n    gap: 10px;\r\n}\r\n\r\n.notes-section {\r\n    border: 2px solid var(--icon-color);\r\n    height: 90%;\r\n    margin-top: 25px;\r\n    background-color: var(--header-color);\r\n    border-top-right-radius: 20px;\r\n    border-bottom-right-radius: 20px;\r\n}\r\n\r\nform {\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n\r\nform div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\nlabel {\r\n    font-weight: bold;\r\n    color: var(--text-color)\r\n}\r\n\r\n.title-input {\r\n    height: 20px;\r\n    width: 80%;\r\n    background-color: var(--todos-color);\r\n    border: none;\r\n    border-radius: 5px;\r\n}\r\n\r\n.description-input {\r\n    min-height: 130px;\r\n    min-width: 95%;\r\n    background-color: var(--todos-color);\r\n    border: none;\r\n    border-radius: 5px;\r\n}\r\n\r\n.date-priority-input-container {\r\n    flex-direction: row;\r\n}\r\n \r\n.date-input {\r\n    border: none;\r\n    background-color: var(--todos-color);\r\n    border-radius: 5px;\r\n}\r\n\r\n.priority-input {\r\n    background-color: var(--todos-color);\r\n    border: none;\r\n}\r\n\r\n.submit-btn {\r\n    width: 70px;\r\n    height: 30px;\r\n    font-weight: bold;\r\n    background-color: var(--icon-color);\r\n    border: none;\r\n    border-radius: 3px;\r\n    color: var(--content-color);\r\n}\r\n\r\n.submit-btn:hover {\r\n    background-color: #8ccc2b;\r\n}\r\n\r\n\r\n.todoContainer {\r\n    /* border: 1px solid black; */\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    position: relative;\r\n    overflow: auto;\r\n    border-top-left-radius: 20px;\r\n    border-bottom-left-radius: 20px;\r\n}\r\n\r\n.todoContainer > h3 {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 10px;\r\n    font-family:Geneva,\r\n        Verdana,\r\n        sans-serif;\r\n    font-size: 30px;\r\n    color: var(--text-color);\r\n}\r\n\r\n.todos-section {\r\n    border: 2px solid var(--icon-color);\r\n    height: 90%;\r\n    margin-top: 25px;\r\n    background-color: var(--header-color);\r\n    border-top-left-radius: 20px;\r\n    border-bottom-left-radius: 20px;\r\n    display: grid;\r\n    grid-template-columns: 45% 55%;\r\n    gap: 5px;\r\n    font-family: Geneva,\r\n        Verdana,\r\n        sans-serif;\r\n    ;\r\n}\r\n\r\n.todoContainer > ul {\r\n    position: absolute;\r\n    top: 50px;\r\n    width: 70%;\r\n}\r\n\r\n.todoContainer ul li {\r\n    padding: 10px;\r\n    margin-left: 10px;\r\n    background-color: var(--todos-color);\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-bottom: 8px;\r\n    font-size: 15px;\r\n    font-weight: bold;\r\n    color: var(--text-color);\r\n    cursor: pointer;\r\n}\r\n\r\n.todoContainer ul li:hover {\r\n    background-color: #b3f8ea;\r\n}\r\n\r\n.low {\r\n    color: #84cc16;\r\n}\r\n\r\n.medium {\r\n    color: #fde047;\r\n}\r\n\r\n.high {\r\n    color: #ef4444;\r\n}", "",{"version":3,"sources":["webpack://./src/UI/style.css"],"names":[],"mappings":"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,uBAAuB;IACvB,yBAAyB;IACzB,wBAAwB;IACxB,6BAA6B;IAC7B,qBAAqB;IACrB,sBAAsB;IACtB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,8BAA8B;IAC9B,8BAA8B;IAC9B,gCAAgC;AACpC;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,kBAAkB;IAClB,qCAAqC;IACrC,sBAAsB;IACtB,2CAA2C;IAC3C,wBAAwB;AAC5B;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,YAAY;IACZ,qCAAqC;IACrC,cAAc;AAClB;;AAEA;IACI,kBAAkB;IAClB,sCAAsC;AAC1C;;AAEA;IACI,kBAAkB;AACtB;;AAEA,kBAAkB;;AAElB;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,2BAA2B;IAC3B,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,qBAAqB;IACrB,uBAAuB;IACvB,cAAc;AAClB;;AAEA;IACI,eAAe;IACf,sEAAsE;AAC1E;;AAEA;IACI,eAAe;IACf,wCAAwC;IACxC,iBAAiB;IACjB,aAAa;IACb,oBAAoB;IACpB,WAAW;AACf;;AAEA,oBAAoB;;AAEpB;IACI,YAAY;IACZ,4BAA4B;IAC5B,uCAAuC;IACvC,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,2BAA2B;IAC3B,SAAS;IACT,eAAe;IACf,wCAAwC;IACxC,kBAAkB;IAClB,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,SAAS;IACT,2BAA2B;IAC3B,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,mBAAmB;IACnB,2BAA2B;IAC3B,WAAW;AACf;;AAEA;IACI,aAAa;IACb,kBAAkB;IAClB,SAAS;IACT,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,iBAAiB;AACrB;;AAEA;IACI;AACJ;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;;AAGA,mBAAmB;;AAEnB;IACI,YAAY;IACZ,UAAU;IACV,aAAa;IACb,8BAA8B;IAC9B,SAAS;AACb;;AAEA;IACI,mCAAmC;IACnC,WAAW;IACX,gBAAgB;IAChB,qCAAqC;IACrC,6BAA6B;IAC7B,gCAAgC;AACpC;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,WAAW;IACX,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB;AACJ;;AAEA;IACI,YAAY;IACZ,UAAU;IACV,oCAAoC;IACpC,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,cAAc;IACd,oCAAoC;IACpC,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,oCAAoC;IACpC,kBAAkB;AACtB;;AAEA;IACI,oCAAoC;IACpC,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,mCAAmC;IACnC,YAAY;IACZ,kBAAkB;IAClB,2BAA2B;AAC/B;;AAEA;IACI,yBAAyB;AAC7B;;;AAGA;IACI,6BAA6B;IAC7B,YAAY;IACZ,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;IAClB,cAAc;IACd,4BAA4B;IAC5B,+BAA+B;AACnC;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,UAAU;IACV;;kBAEc;IACd,eAAe;IACf,wBAAwB;AAC5B;;AAEA;IACI,mCAAmC;IACnC,WAAW;IACX,gBAAgB;IAChB,qCAAqC;IACrC,4BAA4B;IAC5B,+BAA+B;IAC/B,aAAa;IACb,8BAA8B;IAC9B,QAAQ;IACR;;kBAEc;;AAElB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;AACd;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,oCAAoC;IACpC,aAAa;IACb,8BAA8B;IAC9B,kBAAkB;IAClB,eAAe;IACf,iBAAiB;IACjB,wBAAwB;IACxB,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB","sourcesContent":["* {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n:root {\r\n    --header-color: #f1f5f9;\r\n    --side-bar-color: #0f172a;\r\n    --content-color: #f8fafc;\r\n    --default-font-color: #292524;\r\n    --icon-color: #a3e635;\r\n    --todos-color: #cffafe;\r\n    --text-color: #464545;\r\n}\r\n\r\nbody {\r\n    height: 100vh;\r\n    width: 100vw;\r\n    display: grid;\r\n    grid-template-columns: 80% 20%;\r\n    grid-template-rows: 20% 73% 7%;\r\n    font-family: Arial, sans-serif;\r\n    color: var(--default-font-color);\r\n}\r\n\r\nli {\r\n    list-style: none;\r\n}\r\n\r\ni {\r\n    color: var(--icon-color);\r\n}\r\n \r\n.header {\r\n    grid-column: 1 / 2;\r\n    background-color: var(--header-color);\r\n    padding: 0 30px 0 30px;\r\n    box-shadow: 3px 3px 10px rgb(160, 160, 160);\r\n    color: var(--text-color);\r\n}\r\n\r\n.side-bar {\r\n    grid-column: 2 / 3;\r\n    grid-row: 1 / 4;\r\n    height: 100%;\r\n    background-color: var(--header-color);\r\n    color: #f8fafc;\r\n}\r\n\r\n.content {\r\n    grid-column: 1 / 2;\r\n    background-color: var(--content-color);\r\n}\r\n\r\n.footer {\r\n    grid-column: 1 / 2;\r\n}\r\n\r\n/* HEADER STYLES */\r\n\r\n.header-content {\r\n    height: 100%;\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n}\r\n\r\n.logo-container {\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n\r\n.logo-image {\r\n    margin-left: 30px;\r\n}\r\n\r\n.fa-square-check {\r\n    font-size: 60px;\r\n}\r\n\r\n.logo-text {\r\n    font-size: 50px;\r\n    font-weight: bold;\r\n}\r\n\r\n.greeting-date-container {\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n    justify-content: center;\r\n    flex-shrink: 2;\r\n}\r\n\r\n.greeting-container {\r\n    font-size: 50px;\r\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\r\n}\r\n\r\n.date {\r\n    font-size: 20px;\r\n    font-family: Geneva, Verdana, sans-serif;\r\n    font-weight: bold;\r\n    display: flex;\r\n    justify-content: end;\r\n    width: 100%;\r\n}\r\n\r\n/* SIDE BAR STYLES */\r\n\r\n.side-bar-content {\r\n    height: 100%;\r\n    border-top-left-radius: 30px;\r\n    background-color: var(--side-bar-color);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: relative;\r\n}\r\n\r\n.side-bar-stuff {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    gap: 20px;\r\n    font-size: 15px;\r\n    font-family: Geneva, Verdana, sans-serif;\r\n    font-weight: 100px;\r\n    position: absolute;\r\n    top: 30px;\r\n}\r\n\r\n.side-bar-stuff > div {\r\n    display: flex;\r\n    gap: 15px;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    cursor: pointer;\r\n}\r\n\r\n.side-bar-stuff > div > div {\r\n    transition: all 0.3s;\r\n}\r\n\r\n.side-bar-stuff>div>div:hover {\r\n    color: var(--icon-color);\r\n}\r\n\r\n.fa-list-check {\r\n    color: #fcd34d;\r\n}\r\n\r\n.fa-calendar-week {\r\n    color: #86efac;\r\n}\r\n\r\n.fa-calendar-days {\r\n    color: #3b82f6;\r\n}\r\n\r\n.fa-briefcase {\r\n    color: #a855f7;\r\n}\r\n\r\n.fa-caret-down {\r\n    color: white;\r\n}\r\n\r\n#projects-container {\r\n    flex-direction: column;\r\n    position: relative;\r\n}\r\n\r\n#projects-container > div {\r\n    display: flex;\r\n    gap: 12px;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    width: 100%;\r\n}\r\n\r\n.project-list {\r\n    display: none;\r\n    position: absolute;\r\n    top: 15px;\r\n    padding: 5px;\r\n}\r\n\r\n.project-list li {\r\n    padding: .5px;\r\n    margin-top: 10px;\r\n    font-weight: bold;\r\n}\r\n\r\n.project-list li:hover {\r\n    color: var(--icon-color)\r\n}\r\n\r\n#projects-container:hover .project-list {\r\n    display: block;\r\n}\r\n\r\n.project-list:hover {\r\n    display: block;\r\n}\r\n\r\n\r\n/* CONTENT STYLES */\r\n\r\n.main-content {\r\n    height: 100%;\r\n    width: 98%;\r\n    display: grid;\r\n    grid-template-columns: 40% 60%;\r\n    gap: 10px;\r\n}\r\n\r\n.notes-section {\r\n    border: 2px solid var(--icon-color);\r\n    height: 90%;\r\n    margin-top: 25px;\r\n    background-color: var(--header-color);\r\n    border-top-right-radius: 20px;\r\n    border-bottom-right-radius: 20px;\r\n}\r\n\r\nform {\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n\r\nform div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\nlabel {\r\n    font-weight: bold;\r\n    color: var(--text-color)\r\n}\r\n\r\n.title-input {\r\n    height: 20px;\r\n    width: 80%;\r\n    background-color: var(--todos-color);\r\n    border: none;\r\n    border-radius: 5px;\r\n}\r\n\r\n.description-input {\r\n    min-height: 130px;\r\n    min-width: 95%;\r\n    background-color: var(--todos-color);\r\n    border: none;\r\n    border-radius: 5px;\r\n}\r\n\r\n.date-priority-input-container {\r\n    flex-direction: row;\r\n}\r\n \r\n.date-input {\r\n    border: none;\r\n    background-color: var(--todos-color);\r\n    border-radius: 5px;\r\n}\r\n\r\n.priority-input {\r\n    background-color: var(--todos-color);\r\n    border: none;\r\n}\r\n\r\n.submit-btn {\r\n    width: 70px;\r\n    height: 30px;\r\n    font-weight: bold;\r\n    background-color: var(--icon-color);\r\n    border: none;\r\n    border-radius: 3px;\r\n    color: var(--content-color);\r\n}\r\n\r\n.submit-btn:hover {\r\n    background-color: #8ccc2b;\r\n}\r\n\r\n\r\n.todoContainer {\r\n    /* border: 1px solid black; */\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    position: relative;\r\n    overflow: auto;\r\n    border-top-left-radius: 20px;\r\n    border-bottom-left-radius: 20px;\r\n}\r\n\r\n.todoContainer > h3 {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 10px;\r\n    font-family:Geneva,\r\n        Verdana,\r\n        sans-serif;\r\n    font-size: 30px;\r\n    color: var(--text-color);\r\n}\r\n\r\n.todos-section {\r\n    border: 2px solid var(--icon-color);\r\n    height: 90%;\r\n    margin-top: 25px;\r\n    background-color: var(--header-color);\r\n    border-top-left-radius: 20px;\r\n    border-bottom-left-radius: 20px;\r\n    display: grid;\r\n    grid-template-columns: 45% 55%;\r\n    gap: 5px;\r\n    font-family: Geneva,\r\n        Verdana,\r\n        sans-serif;\r\n    ;\r\n}\r\n\r\n.todoContainer > ul {\r\n    position: absolute;\r\n    top: 50px;\r\n    width: 70%;\r\n}\r\n\r\n.todoContainer ul li {\r\n    padding: 10px;\r\n    margin-left: 10px;\r\n    background-color: var(--todos-color);\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-bottom: 8px;\r\n    font-size: 15px;\r\n    font-weight: bold;\r\n    color: var(--text-color);\r\n    cursor: pointer;\r\n}\r\n\r\n.todoContainer ul li:hover {\r\n    background-color: #b3f8ea;\r\n}\r\n\r\n.low {\r\n    color: #84cc16;\r\n}\r\n\r\n.medium {\r\n    color: #fde047;\r\n}\r\n\r\n.high {\r\n    color: #ef4444;\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/jsbi/dist/jsbi-umd.js":
/*!********************************************!*\
  !*** ./node_modules/jsbi/dist/jsbi-umd.js ***!
  \********************************************/
/***/ (function(module) {

(function(e,t){ true?module.exports=t():0})(this,function(){"use strict";var e=Math.imul,t=Math.clz32;function i(e){"@babel/helpers - typeof";return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function _(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var _,n=0;n<t.length;n++)_=t[n],_.enumerable=_.enumerable||!1,_.configurable=!0,"value"in _&&(_.writable=!0),Object.defineProperty(e,_.key,_)}function l(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),Object.defineProperty(e,"prototype",{writable:!1}),e}function g(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&u(e,t)}function a(e){return a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},a(e)}function u(e,t){return u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},u(e,t)}function s(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}function r(){return r=s()?Reflect.construct:function(e,t,i){var _=[null];_.push.apply(_,t);var n=Function.bind.apply(e,_),l=new n;return i&&u(l,i.prototype),l},r.apply(null,arguments)}function d(e){return-1!==Function.toString.call(e).indexOf("[native code]")}function h(e){var t="function"==typeof Map?new Map:void 0;return h=function(e){function i(){return r(e,arguments,a(this).constructor)}if(null===e||!d(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if("undefined"!=typeof t){if(t.has(e))return t.get(e);t.set(e,i)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),u(i,e)},h(e)}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e,t){if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return b(e)}function c(e){var t=s();return function(){var i,_=a(e);if(t){var n=a(this).constructor;i=Reflect.construct(_,arguments,n)}else i=_.apply(this,arguments);return m(this,i)}}function v(e,t){return y(e)||f(e,t)||D(e,t)||k()}function y(e){if(Array.isArray(e))return e}function f(e,t){var i=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=i){var _,n,l=[],g=!0,o=!1;try{for(i=i.call(e);!(g=(_=i.next()).done)&&(l.push(_.value),!(t&&l.length===t));g=!0);}catch(e){o=!0,n=e}finally{try{g||null==i["return"]||i["return"]()}finally{if(o)throw n}}return l}}function D(e,t){if(e){if("string"==typeof e)return p(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?p(e,t):void 0}}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var _=0,n=Array(t);_<t;_++)n[_]=e[_];return n}function k(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function B(e,t){var _="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!_){if(Array.isArray(e)||(_=D(e))||t&&e&&"number"==typeof e.length){_&&(e=_);var n=0,l=function(){};return{s:l,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(t){throw t},f:l}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var g,a=!0,u=!1;return{s:function(){_=_.call(e)},n:function(){var e=_.next();return a=e.done,e},e:function(t){u=!0,g=t},f:function(){try{a||null==_.return||_.return()}finally{if(u)throw g}}}}var S=function(e){var t=Math.abs,n=Math.max,o=Math.floor;function a(e,t){var i;if(_(this,a),i=u.call(this,e),i.sign=t,Object.setPrototypeOf(b(i),a.prototype),e>a.__kMaxLength)throw new RangeError("Maximum BigInt size exceeded");return i}g(a,e);var u=c(a);return l(a,[{key:"toDebugString",value:function(){var e,t=["BigInt["],i=B(this);try{for(i.s();!(e=i.n()).done;){var _=e.value;t.push((_?(_>>>0).toString(16):_)+", ")}}catch(e){i.e(e)}finally{i.f()}return t.push("]"),t.join("")}},{key:"toString",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:10;if(2>e||36<e)throw new RangeError("toString() radix argument must be between 2 and 36");return 0===this.length?"0":0==(e&e-1)?a.__toStringBasePowerOfTwo(this,e):a.__toStringGeneric(this,e,!1)}},{key:"valueOf",value:function(){throw new Error("Convert JSBI instances to native numbers using `toNumber`.")}},{key:"__copy",value:function(){for(var e=new a(this.length,this.sign),t=0;t<this.length;t++)e[t]=this[t];return e}},{key:"__trim",value:function(){for(var e=this.length,t=this[e-1];0===t;)e--,t=this[e-1],this.pop();return 0===e&&(this.sign=!1),this}},{key:"__initializeDigits",value:function(){for(var e=0;e<this.length;e++)this[e]=0}},{key:"__clzmsd",value:function(){return a.__clz30(this.__digit(this.length-1))}},{key:"__inplaceMultiplyAdd",value:function(e,t,_){_>this.length&&(_=this.length);for(var n=32767&e,l=e>>>15,g=0,o=t,u=0;u<_;u++){var s=this.__digit(u),r=32767&s,d=s>>>15,h=a.__imul(r,n),b=a.__imul(r,l),m=a.__imul(d,n),c=a.__imul(d,l),v=o+h+g;g=v>>>30,v&=1073741823,v+=((32767&b)<<15)+((32767&m)<<15),g+=v>>>30,o=c+(b>>>15)+(m>>>15),this.__setDigit(u,1073741823&v)}if(0!==g||0!==o)throw new Error("implementation bug")}},{key:"__inplaceAdd",value:function(e,t,_){for(var n,l=0,g=0;g<_;g++)n=this.__halfDigit(t+g)+e.__halfDigit(g)+l,l=n>>>15,this.__setHalfDigit(t+g,32767&n);return l}},{key:"__inplaceSub",value:function(e,t,_){var n=0;if(1&t){t>>=1;for(var l=this.__digit(t),g=32767&l,o=0;o<_-1>>>1;o++){var a=e.__digit(o),u=(l>>>15)-(32767&a)-n;n=1&u>>>15,this.__setDigit(t+o,(32767&u)<<15|32767&g),l=this.__digit(t+o+1),g=(32767&l)-(a>>>15)-n,n=1&g>>>15}var s=e.__digit(o),r=(l>>>15)-(32767&s)-n;n=1&r>>>15,this.__setDigit(t+o,(32767&r)<<15|32767&g);if(t+o+1>=this.length)throw new RangeError("out of bounds");0==(1&_)&&(l=this.__digit(t+o+1),g=(32767&l)-(s>>>15)-n,n=1&g>>>15,this.__setDigit(t+e.length,1073709056&l|32767&g))}else{t>>=1;for(var d=0;d<e.length-1;d++){var h=this.__digit(t+d),b=e.__digit(d),m=(32767&h)-(32767&b)-n;n=1&m>>>15;var c=(h>>>15)-(b>>>15)-n;n=1&c>>>15,this.__setDigit(t+d,(32767&c)<<15|32767&m)}var v=this.__digit(t+d),y=e.__digit(d),f=(32767&v)-(32767&y)-n;n=1&f>>>15;var D=0;0==(1&_)&&(D=(v>>>15)-(y>>>15)-n,n=1&D>>>15),this.__setDigit(t+d,(32767&D)<<15|32767&f)}return n}},{key:"__inplaceRightShift",value:function(e){if(0!==e){for(var t,_=this.__digit(0)>>>e,n=this.length-1,l=0;l<n;l++)t=this.__digit(l+1),this.__setDigit(l,1073741823&t<<30-e|_),_=t>>>e;this.__setDigit(n,_)}}},{key:"__digit",value:function(e){return this[e]}},{key:"__unsignedDigit",value:function(e){return this[e]>>>0}},{key:"__setDigit",value:function(e,t){this[e]=0|t}},{key:"__setDigitGrow",value:function(e,t){this[e]=0|t}},{key:"__halfDigitLength",value:function(){var e=this.length;return 32767>=this.__unsignedDigit(e-1)?2*e-1:2*e}},{key:"__halfDigit",value:function(e){return 32767&this[e>>>1]>>>15*(1&e)}},{key:"__setHalfDigit",value:function(e,t){var i=e>>>1,_=this.__digit(i),n=1&e?32767&_|t<<15:1073709056&_|32767&t;this.__setDigit(i,n)}}],[{key:"BigInt",value:function(e){var t=Number.isFinite;if("number"==typeof e){if(0===e)return a.__zero();if(a.__isOneDigitInt(e))return 0>e?a.__oneDigit(-e,!0):a.__oneDigit(e,!1);if(!t(e)||o(e)!==e)throw new RangeError("The number "+e+" cannot be converted to BigInt because it is not an integer");return a.__fromDouble(e)}if("string"==typeof e){var _=a.__fromString(e);if(null===_)throw new SyntaxError("Cannot convert "+e+" to a BigInt");return _}if("boolean"==typeof e)return!0===e?a.__oneDigit(1,!1):a.__zero();if("object"===i(e)){if(e.constructor===a)return e;var n=a.__toPrimitive(e);return a.BigInt(n)}throw new TypeError("Cannot convert "+e+" to a BigInt")}},{key:"toNumber",value:function(e){var t=e.length;if(0===t)return 0;if(1===t){var i=e.__unsignedDigit(0);return e.sign?-i:i}var _=e.__digit(t-1),n=a.__clz30(_),l=30*t-n;if(1024<l)return e.sign?-Infinity:1/0;var g=l-1,o=_,u=t-1,s=n+3,r=32===s?0:o<<s;r>>>=12;var d=s-12,h=12<=s?0:o<<20+s,b=20+s;for(0<d&&0<u&&(u--,o=e.__digit(u),r|=o>>>30-d,h=o<<d+2,b=d+2);0<b&&0<u;)u--,o=e.__digit(u),h|=30<=b?o<<b-30:o>>>30-b,b-=30;var m=a.__decideRounding(e,b,u,o);if((1===m||0===m&&1==(1&h))&&(h=h+1>>>0,0===h&&(r++,0!=r>>>20&&(r=0,g++,1023<g))))return e.sign?-Infinity:1/0;var c=e.sign?-2147483648:0;return g=g+1023<<20,a.__kBitConversionInts[1]=c|g|r,a.__kBitConversionInts[0]=h,a.__kBitConversionDouble[0]}},{key:"unaryMinus",value:function(e){if(0===e.length)return e;var t=e.__copy();return t.sign=!e.sign,t}},{key:"bitwiseNot",value:function(e){return e.sign?a.__absoluteSubOne(e).__trim():a.__absoluteAddOne(e,!0)}},{key:"exponentiate",value:function(e,t){if(t.sign)throw new RangeError("Exponent must be positive");if(0===t.length)return a.__oneDigit(1,!1);if(0===e.length)return e;if(1===e.length&&1===e.__digit(0))return e.sign&&0==(1&t.__digit(0))?a.unaryMinus(e):e;if(1<t.length)throw new RangeError("BigInt too big");var i=t.__unsignedDigit(0);if(1===i)return e;if(i>=a.__kMaxLengthBits)throw new RangeError("BigInt too big");if(1===e.length&&2===e.__digit(0)){var _=1+(0|i/30),n=e.sign&&0!=(1&i),l=new a(_,n);l.__initializeDigits();var g=1<<i%30;return l.__setDigit(_-1,g),l}var o=null,u=e;for(0!=(1&i)&&(o=e),i>>=1;0!==i;i>>=1)u=a.multiply(u,u),0!=(1&i)&&(null===o?o=u:o=a.multiply(o,u));return o}},{key:"multiply",value:function(e,t){if(0===e.length)return e;if(0===t.length)return t;var _=e.length+t.length;30<=e.__clzmsd()+t.__clzmsd()&&_--;var n=new a(_,e.sign!==t.sign);n.__initializeDigits();for(var l=0;l<e.length;l++)a.__multiplyAccumulate(t,e.__digit(l),n,l);return n.__trim()}},{key:"divide",value:function(e,t){if(0===t.length)throw new RangeError("Division by zero");if(0>a.__absoluteCompare(e,t))return a.__zero();var i,_=e.sign!==t.sign,n=t.__unsignedDigit(0);if(1===t.length&&32767>=n){if(1===n)return _===e.sign?e:a.unaryMinus(e);i=a.__absoluteDivSmall(e,n,null)}else i=a.__absoluteDivLarge(e,t,!0,!1);return i.sign=_,i.__trim()}},{key:"remainder",value:function i(e,t){if(0===t.length)throw new RangeError("Division by zero");if(0>a.__absoluteCompare(e,t))return e;var _=t.__unsignedDigit(0);if(1===t.length&&32767>=_){if(1===_)return a.__zero();var n=a.__absoluteModSmall(e,_);return 0===n?a.__zero():a.__oneDigit(n,e.sign)}var i=a.__absoluteDivLarge(e,t,!1,!0);return i.sign=e.sign,i.__trim()}},{key:"add",value:function(e,t){var i=e.sign;return i===t.sign?a.__absoluteAdd(e,t,i):0<=a.__absoluteCompare(e,t)?a.__absoluteSub(e,t,i):a.__absoluteSub(t,e,!i)}},{key:"subtract",value:function(e,t){var i=e.sign;return i===t.sign?0<=a.__absoluteCompare(e,t)?a.__absoluteSub(e,t,i):a.__absoluteSub(t,e,!i):a.__absoluteAdd(e,t,i)}},{key:"leftShift",value:function(e,t){return 0===t.length||0===e.length?e:t.sign?a.__rightShiftByAbsolute(e,t):a.__leftShiftByAbsolute(e,t)}},{key:"signedRightShift",value:function(e,t){return 0===t.length||0===e.length?e:t.sign?a.__leftShiftByAbsolute(e,t):a.__rightShiftByAbsolute(e,t)}},{key:"unsignedRightShift",value:function(){throw new TypeError("BigInts have no unsigned right shift; use >> instead")}},{key:"lessThan",value:function(e,t){return 0>a.__compareToBigInt(e,t)}},{key:"lessThanOrEqual",value:function(e,t){return 0>=a.__compareToBigInt(e,t)}},{key:"greaterThan",value:function(e,t){return 0<a.__compareToBigInt(e,t)}},{key:"greaterThanOrEqual",value:function(e,t){return 0<=a.__compareToBigInt(e,t)}},{key:"equal",value:function(e,t){if(e.sign!==t.sign)return!1;if(e.length!==t.length)return!1;for(var _=0;_<e.length;_++)if(e.__digit(_)!==t.__digit(_))return!1;return!0}},{key:"notEqual",value:function(e,t){return!a.equal(e,t)}},{key:"bitwiseAnd",value:function(e,t){if(!e.sign&&!t.sign)return a.__absoluteAnd(e,t).__trim();if(e.sign&&t.sign){var i=n(e.length,t.length)+1,_=a.__absoluteSubOne(e,i),l=a.__absoluteSubOne(t);return _=a.__absoluteOr(_,l,_),a.__absoluteAddOne(_,!0,_).__trim()}if(e.sign){var g=[t,e];e=g[0],t=g[1]}return a.__absoluteAndNot(e,a.__absoluteSubOne(t)).__trim()}},{key:"bitwiseXor",value:function(e,t){if(!e.sign&&!t.sign)return a.__absoluteXor(e,t).__trim();if(e.sign&&t.sign){var i=n(e.length,t.length),_=a.__absoluteSubOne(e,i),l=a.__absoluteSubOne(t);return a.__absoluteXor(_,l,_).__trim()}var g=n(e.length,t.length)+1;if(e.sign){var o=[t,e];e=o[0],t=o[1]}var u=a.__absoluteSubOne(t,g);return u=a.__absoluteXor(u,e,u),a.__absoluteAddOne(u,!0,u).__trim()}},{key:"bitwiseOr",value:function(e,t){var i=n(e.length,t.length);if(!e.sign&&!t.sign)return a.__absoluteOr(e,t).__trim();if(e.sign&&t.sign){var _=a.__absoluteSubOne(e,i),l=a.__absoluteSubOne(t);return _=a.__absoluteAnd(_,l,_),a.__absoluteAddOne(_,!0,_).__trim()}if(e.sign){var g=[t,e];e=g[0],t=g[1]}var o=a.__absoluteSubOne(t,i);return o=a.__absoluteAndNot(o,e,o),a.__absoluteAddOne(o,!0,o).__trim()}},{key:"asIntN",value:function(e,t){if(0===t.length)return t;if(e=o(e),0>e)throw new RangeError("Invalid value: not (convertible to) a safe integer");if(0===e)return a.__zero();if(e>=a.__kMaxLengthBits)return t;var _=0|(e+29)/30;if(t.length<_)return t;var l=t.__unsignedDigit(_-1),g=1<<(e-1)%30;if(t.length===_&&l<g)return t;if(!((l&g)===g))return a.__truncateToNBits(e,t);if(!t.sign)return a.__truncateAndSubFromPowerOfTwo(e,t,!0);if(0==(l&g-1)){for(var u=_-2;0<=u;u--)if(0!==t.__digit(u))return a.__truncateAndSubFromPowerOfTwo(e,t,!1);return t.length===_&&l===g?t:a.__truncateToNBits(e,t)}return a.__truncateAndSubFromPowerOfTwo(e,t,!1)}},{key:"asUintN",value:function(e,t){if(0===t.length)return t;if(e=o(e),0>e)throw new RangeError("Invalid value: not (convertible to) a safe integer");if(0===e)return a.__zero();if(t.sign){if(e>a.__kMaxLengthBits)throw new RangeError("BigInt too big");return a.__truncateAndSubFromPowerOfTwo(e,t,!1)}if(e>=a.__kMaxLengthBits)return t;var i=0|(e+29)/30;if(t.length<i)return t;var _=e%30;if(t.length==i){if(0===_)return t;var l=t.__digit(i-1);if(0==l>>>_)return t}return a.__truncateToNBits(e,t)}},{key:"ADD",value:function(e,t){if(e=a.__toPrimitive(e),t=a.__toPrimitive(t),"string"==typeof e)return"string"!=typeof t&&(t=t.toString()),e+t;if("string"==typeof t)return e.toString()+t;if(e=a.__toNumeric(e),t=a.__toNumeric(t),a.__isBigInt(e)&&a.__isBigInt(t))return a.add(e,t);if("number"==typeof e&&"number"==typeof t)return e+t;throw new TypeError("Cannot mix BigInt and other types, use explicit conversions")}},{key:"LT",value:function(e,t){return a.__compare(e,t,0)}},{key:"LE",value:function(e,t){return a.__compare(e,t,1)}},{key:"GT",value:function(e,t){return a.__compare(e,t,2)}},{key:"GE",value:function(e,t){return a.__compare(e,t,3)}},{key:"EQ",value:function(e,t){for(;;){if(a.__isBigInt(e))return a.__isBigInt(t)?a.equal(e,t):a.EQ(t,e);if("number"==typeof e){if(a.__isBigInt(t))return a.__equalToNumber(t,e);if("object"!==i(t))return e==t;t=a.__toPrimitive(t)}else if("string"==typeof e){if(a.__isBigInt(t))return e=a.__fromString(e),null!==e&&a.equal(e,t);if("object"!==i(t))return e==t;t=a.__toPrimitive(t)}else if("boolean"==typeof e){if(a.__isBigInt(t))return a.__equalToNumber(t,+e);if("object"!==i(t))return e==t;t=a.__toPrimitive(t)}else if("symbol"===i(e)){if(a.__isBigInt(t))return!1;if("object"!==i(t))return e==t;t=a.__toPrimitive(t)}else if("object"===i(e)){if("object"===i(t)&&t.constructor!==a)return e==t;e=a.__toPrimitive(e)}else return e==t}}},{key:"NE",value:function(e,t){return!a.EQ(e,t)}},{key:"DataViewGetBigInt64",value:function(e,t){var i=!!(2<arguments.length&&void 0!==arguments[2])&&arguments[2];return a.asIntN(64,a.DataViewGetBigUint64(e,t,i))}},{key:"DataViewGetBigUint64",value:function(e,t){var i=!!(2<arguments.length&&void 0!==arguments[2])&&arguments[2],_=i?[4,0]:[0,4],n=v(_,2),g=n[0],o=n[1],l=e.getUint32(t+g,i),u=e.getUint32(t+o,i),s=new a(3,!1);return s.__setDigit(0,1073741823&u),s.__setDigit(1,(268435455&l)<<2|u>>>30),s.__setDigit(2,l>>>28),s.__trim()}},{key:"DataViewSetBigInt64",value:function(e,t,i){var _=!!(3<arguments.length&&void 0!==arguments[3])&&arguments[3];a.DataViewSetBigUint64(e,t,i,_)}},{key:"DataViewSetBigUint64",value:function(e,t,i){var _=!!(3<arguments.length&&void 0!==arguments[3])&&arguments[3];i=a.asUintN(64,i);var n=0,g=0;if(0<i.length&&(g=i.__digit(0),1<i.length)){var o=i.__digit(1);g|=o<<30,n=o>>>2,2<i.length&&(n|=i.__digit(2)<<28)}var u=_?[4,0]:[0,4],s=v(u,2),r=s[0],d=s[1];e.setUint32(t+r,n,_),e.setUint32(t+d,g,_)}},{key:"__zero",value:function(){return new a(0,!1)}},{key:"__oneDigit",value:function(e,t){var i=new a(1,t);return i.__setDigit(0,e),i}},{key:"__decideRounding",value:function(e,t,i,_){if(0<t)return-1;var n;if(0>t)n=-t-1;else{if(0===i)return-1;i--,_=e.__digit(i),n=29}var l=1<<n;if(0==(_&l))return-1;if(l-=1,0!=(_&l))return 1;for(;0<i;)if(i--,0!==e.__digit(i))return 1;return 0}},{key:"__fromDouble",value:function(e){a.__kBitConversionDouble[0]=e;var t,i=2047&a.__kBitConversionInts[1]>>>20,_=i-1023,n=(0|_/30)+1,l=new a(n,0>e),g=1048575&a.__kBitConversionInts[1]|1048576,o=a.__kBitConversionInts[0],u=20,s=_%30,r=0;if(s<u){var d=u-s;r=d+32,t=g>>>d,g=g<<32-d|o>>>d,o<<=32-d}else if(s===u)r=32,t=g,g=o,o=0;else{var h=s-u;r=32-h,t=g<<h|o>>>32-h,g=o<<h,o=0}l.__setDigit(n-1,t);for(var b=n-2;0<=b;b--)0<r?(r-=30,t=g>>>2,g=g<<30|o>>>2,o<<=30):t=0,l.__setDigit(b,t);return l.__trim()}},{key:"__isWhitespace",value:function(e){return!!(13>=e&&9<=e)||(159>=e?32==e:131071>=e?160==e||5760==e:196607>=e?(e&=131071,10>=e||40==e||41==e||47==e||95==e||4096==e):65279==e)}},{key:"__fromString",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,i=0,_=e.length,n=0;if(n===_)return a.__zero();for(var l=e.charCodeAt(n);a.__isWhitespace(l);){if(++n===_)return a.__zero();l=e.charCodeAt(n)}if(43===l){if(++n===_)return null;l=e.charCodeAt(n),i=1}else if(45===l){if(++n===_)return null;l=e.charCodeAt(n),i=-1}if(0===t){if(t=10,48===l){if(++n===_)return a.__zero();if(l=e.charCodeAt(n),88===l||120===l){if(t=16,++n===_)return null;l=e.charCodeAt(n)}else if(79===l||111===l){if(t=8,++n===_)return null;l=e.charCodeAt(n)}else if(66===l||98===l){if(t=2,++n===_)return null;l=e.charCodeAt(n)}}}else if(16===t&&48===l){if(++n===_)return a.__zero();if(l=e.charCodeAt(n),88===l||120===l){if(++n===_)return null;l=e.charCodeAt(n)}}if(0!==i&&10!==t)return null;for(;48===l;){if(++n===_)return a.__zero();l=e.charCodeAt(n)}var g=_-n,o=a.__kMaxBitsPerChar[t],u=a.__kBitsPerCharTableMultiplier-1;if(g>1073741824/o)return null;var s=o*g+u>>>a.__kBitsPerCharTableShift,r=new a(0|(s+29)/30,!1),h=10>t?t:10,b=10<t?t-10:0;if(0==(t&t-1)){o>>=a.__kBitsPerCharTableShift;var c=[],v=[],y=!1;do{for(var f,D=0,p=0;;){if(f=void 0,l-48>>>0<h)f=l-48;else if((32|l)-97>>>0<b)f=(32|l)-87;else{y=!0;break}if(p+=o,D=D<<o|f,++n===_){y=!0;break}if(l=e.charCodeAt(n),30<p+o)break}c.push(D),v.push(p)}while(!y);a.__fillFromParts(r,c,v)}else{r.__initializeDigits();var k=!1,B=0;do{for(var S,C=0,I=1;;){if(S=void 0,l-48>>>0<h)S=l-48;else if((32|l)-97>>>0<b)S=(32|l)-87;else{k=!0;break}var A=I*t;if(1073741823<A)break;if(I=A,C=C*t+S,B++,++n===_){k=!0;break}l=e.charCodeAt(n)}u=30*a.__kBitsPerCharTableMultiplier-1;var m=0|(o*B+u>>>a.__kBitsPerCharTableShift)/30;r.__inplaceMultiplyAdd(I,C,m)}while(!k)}if(n!==_){if(!a.__isWhitespace(l))return null;for(n++;n<_;n++)if(l=e.charCodeAt(n),!a.__isWhitespace(l))return null}return r.sign=-1===i,r.__trim()}},{key:"__fillFromParts",value:function(e,t,_){for(var n=0,l=0,g=0,o=t.length-1;0<=o;o--){var a=t[o],u=_[o];l|=a<<g,g+=u,30===g?(e.__setDigit(n++,l),g=0,l=0):30<g&&(e.__setDigit(n++,1073741823&l),g-=30,l=a>>>u-g)}if(0!==l){if(n>=e.length)throw new Error("implementation bug");e.__setDigit(n++,l)}for(;n<e.length;n++)e.__setDigit(n,0)}},{key:"__toStringBasePowerOfTwo",value:function(e,t){var _=e.length,n=t-1;n=(85&n>>>1)+(85&n),n=(51&n>>>2)+(51&n),n=(15&n>>>4)+(15&n);var l=n,g=t-1,o=e.__digit(_-1),u=a.__clz30(o),s=0|(30*_-u+l-1)/l;if(e.sign&&s++,268435456<s)throw new Error("string too long");for(var r=Array(s),d=s-1,h=0,b=0,m=0;m<_-1;m++){var c=e.__digit(m),v=(h|c<<b)&g;r[d--]=a.__kConversionChars[v];var y=l-b;for(h=c>>>y,b=30-y;b>=l;)r[d--]=a.__kConversionChars[h&g],h>>>=l,b-=l}var f=(h|o<<b)&g;for(r[d--]=a.__kConversionChars[f],h=o>>>l-b;0!==h;)r[d--]=a.__kConversionChars[h&g],h>>>=l;if(e.sign&&(r[d--]="-"),-1!==d)throw new Error("implementation bug");return r.join("")}},{key:"__toStringGeneric",value:function(e,t,_){var n=e.length;if(0===n)return"";if(1===n){var l=e.__unsignedDigit(0).toString(t);return!1===_&&e.sign&&(l="-"+l),l}var g=30*n-a.__clz30(e.__digit(n-1)),o=a.__kMaxBitsPerChar[t],u=o-1,s=g*a.__kBitsPerCharTableMultiplier;s+=u-1,s=0|s/u;var r,d,h=s+1>>1,b=a.exponentiate(a.__oneDigit(t,!1),a.__oneDigit(h,!1)),m=b.__unsignedDigit(0);if(1===b.length&&32767>=m){r=new a(e.length,!1),r.__initializeDigits();for(var c,v=0,y=2*e.length-1;0<=y;y--)c=v<<15|e.__halfDigit(y),r.__setHalfDigit(y,0|c/m),v=0|c%m;d=v.toString(t)}else{var f=a.__absoluteDivLarge(e,b,!0,!0);r=f.quotient;var D=f.remainder.__trim();d=a.__toStringGeneric(D,t,!0)}r.__trim();for(var p=a.__toStringGeneric(r,t,!0);d.length<h;)d="0"+d;return!1===_&&e.sign&&(p="-"+p),p+d}},{key:"__unequalSign",value:function(e){return e?-1:1}},{key:"__absoluteGreater",value:function(e){return e?-1:1}},{key:"__absoluteLess",value:function(e){return e?1:-1}},{key:"__compareToBigInt",value:function(e,t){var i=e.sign;if(i!==t.sign)return a.__unequalSign(i);var _=a.__absoluteCompare(e,t);return 0<_?a.__absoluteGreater(i):0>_?a.__absoluteLess(i):0}},{key:"__compareToNumber",value:function(e,i){if(a.__isOneDigitInt(i)){var _=e.sign,n=0>i;if(_!==n)return a.__unequalSign(_);if(0===e.length){if(n)throw new Error("implementation bug");return 0===i?0:-1}if(1<e.length)return a.__absoluteGreater(_);var l=t(i),g=e.__unsignedDigit(0);return g>l?a.__absoluteGreater(_):g<l?a.__absoluteLess(_):0}return a.__compareToDouble(e,i)}},{key:"__compareToDouble",value:function(e,t){if(t!==t)return t;if(t===1/0)return-1;if(t===-Infinity)return 1;var i=e.sign;if(i!==0>t)return a.__unequalSign(i);if(0===t)throw new Error("implementation bug: should be handled elsewhere");if(0===e.length)return-1;a.__kBitConversionDouble[0]=t;var _=2047&a.__kBitConversionInts[1]>>>20;if(2047==_)throw new Error("implementation bug: handled elsewhere");var n=_-1023;if(0>n)return a.__absoluteGreater(i);var l=e.length,g=e.__digit(l-1),o=a.__clz30(g),u=30*l-o,s=n+1;if(u<s)return a.__absoluteLess(i);if(u>s)return a.__absoluteGreater(i);var r=1048576|1048575&a.__kBitConversionInts[1],d=a.__kBitConversionInts[0],h=20,b=29-o;if(b!==(0|(u-1)%30))throw new Error("implementation bug");var m,c=0;if(b<h){var v=h-b;c=v+32,m=r>>>v,r=r<<32-v|d>>>v,d<<=32-v}else if(b===h)c=32,m=r,r=d,d=0;else{var y=b-h;c=32-y,m=r<<y|d>>>32-y,r=d<<y,d=0}if(g>>>=0,m>>>=0,g>m)return a.__absoluteGreater(i);if(g<m)return a.__absoluteLess(i);for(var f=l-2;0<=f;f--){0<c?(c-=30,m=r>>>2,r=r<<30|d>>>2,d<<=30):m=0;var D=e.__unsignedDigit(f);if(D>m)return a.__absoluteGreater(i);if(D<m)return a.__absoluteLess(i)}if(0!==r||0!==d){if(0===c)throw new Error("implementation bug");return a.__absoluteLess(i)}return 0}},{key:"__equalToNumber",value:function(e,i){return a.__isOneDigitInt(i)?0===i?0===e.length:1===e.length&&e.sign===0>i&&e.__unsignedDigit(0)===t(i):0===a.__compareToDouble(e,i)}},{key:"__comparisonResultToBool",value:function(e,t){return 0===t?0>e:1===t?0>=e:2===t?0<e:3===t?0<=e:void 0}},{key:"__compare",value:function(e,t,i){if(e=a.__toPrimitive(e),t=a.__toPrimitive(t),"string"==typeof e&&"string"==typeof t)switch(i){case 0:return e<t;case 1:return e<=t;case 2:return e>t;case 3:return e>=t;}if(a.__isBigInt(e)&&"string"==typeof t)return t=a.__fromString(t),null!==t&&a.__comparisonResultToBool(a.__compareToBigInt(e,t),i);if("string"==typeof e&&a.__isBigInt(t))return e=a.__fromString(e),null!==e&&a.__comparisonResultToBool(a.__compareToBigInt(e,t),i);if(e=a.__toNumeric(e),t=a.__toNumeric(t),a.__isBigInt(e)){if(a.__isBigInt(t))return a.__comparisonResultToBool(a.__compareToBigInt(e,t),i);if("number"!=typeof t)throw new Error("implementation bug");return a.__comparisonResultToBool(a.__compareToNumber(e,t),i)}if("number"!=typeof e)throw new Error("implementation bug");if(a.__isBigInt(t))return a.__comparisonResultToBool(a.__compareToNumber(t,e),2^i);if("number"!=typeof t)throw new Error("implementation bug");return 0===i?e<t:1===i?e<=t:2===i?e>t:3===i?e>=t:void 0}},{key:"__absoluteAdd",value:function(e,t,_){if(e.length<t.length)return a.__absoluteAdd(t,e,_);if(0===e.length)return e;if(0===t.length)return e.sign===_?e:a.unaryMinus(e);var n=e.length;(0===e.__clzmsd()||t.length===e.length&&0===t.__clzmsd())&&n++;for(var l,g=new a(n,_),o=0,u=0;u<t.length;u++)l=e.__digit(u)+t.__digit(u)+o,o=l>>>30,g.__setDigit(u,1073741823&l);for(;u<e.length;u++){var s=e.__digit(u)+o;o=s>>>30,g.__setDigit(u,1073741823&s)}return u<g.length&&g.__setDigit(u,o),g.__trim()}},{key:"__absoluteSub",value:function(e,t,_){if(0===e.length)return e;if(0===t.length)return e.sign===_?e:a.unaryMinus(e);for(var n,l=new a(e.length,_),g=0,o=0;o<t.length;o++)n=e.__digit(o)-t.__digit(o)-g,g=1&n>>>30,l.__setDigit(o,1073741823&n);for(;o<e.length;o++){var u=e.__digit(o)-g;g=1&u>>>30,l.__setDigit(o,1073741823&u)}return l.__trim()}},{key:"__absoluteAddOne",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length;null===_?_=new a(n,t):_.sign=t;for(var l,g=1,o=0;o<n;o++)l=e.__digit(o)+g,g=l>>>30,_.__setDigit(o,1073741823&l);return 0!==g&&_.__setDigitGrow(n,1),_}},{key:"__absoluteSubOne",value:function(e,t){var _=e.length;t=t||_;for(var n,l=new a(t,!1),g=1,o=0;o<_;o++)n=e.__digit(o)-g,g=1&n>>>30,l.__setDigit(o,1073741823&n);if(0!==g)throw new Error("implementation bug");for(var u=_;u<t;u++)l.__setDigit(u,0);return l}},{key:"__absoluteAnd",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,l=t.length,g=l;if(n<l){g=n;var o=e,u=n;e=t,n=l,t=o,l=u}var s=g;null===_?_=new a(s,!1):s=_.length;for(var r=0;r<g;r++)_.__setDigit(r,e.__digit(r)&t.__digit(r));for(;r<s;r++)_.__setDigit(r,0);return _}},{key:"__absoluteAndNot",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,l=t.length,g=l;n<l&&(g=n);var o=n;null===_?_=new a(o,!1):o=_.length;for(var u=0;u<g;u++)_.__setDigit(u,e.__digit(u)&~t.__digit(u));for(;u<n;u++)_.__setDigit(u,e.__digit(u));for(;u<o;u++)_.__setDigit(u,0);return _}},{key:"__absoluteOr",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,l=t.length,g=l;if(n<l){g=n;var o=e,u=n;e=t,n=l,t=o,l=u}var s=n;null===_?_=new a(s,!1):s=_.length;for(var r=0;r<g;r++)_.__setDigit(r,e.__digit(r)|t.__digit(r));for(;r<n;r++)_.__setDigit(r,e.__digit(r));for(;r<s;r++)_.__setDigit(r,0);return _}},{key:"__absoluteXor",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,l=t.length,g=l;if(n<l){g=n;var o=e,u=n;e=t,n=l,t=o,l=u}var s=n;null===_?_=new a(s,!1):s=_.length;for(var r=0;r<g;r++)_.__setDigit(r,e.__digit(r)^t.__digit(r));for(;r<n;r++)_.__setDigit(r,e.__digit(r));for(;r<s;r++)_.__setDigit(r,0);return _}},{key:"__absoluteCompare",value:function(e,t){var _=e.length-t.length;if(0!=_)return _;for(var n=e.length-1;0<=n&&e.__digit(n)===t.__digit(n);)n--;return 0>n?0:e.__unsignedDigit(n)>t.__unsignedDigit(n)?1:-1}},{key:"__multiplyAccumulate",value:function(e,t,_,n){if(0!==t){for(var l=32767&t,g=t>>>15,o=0,u=0,s=0;s<e.length;s++,n++){var r=_.__digit(n),d=e.__digit(s),h=32767&d,b=d>>>15,m=a.__imul(h,l),c=a.__imul(h,g),v=a.__imul(b,l),y=a.__imul(b,g);r+=u+m+o,o=r>>>30,r&=1073741823,r+=((32767&c)<<15)+((32767&v)<<15),o+=r>>>30,u=y+(c>>>15)+(v>>>15),_.__setDigit(n,1073741823&r)}for(;0!==o||0!==u;n++){var f=_.__digit(n);f+=o+u,u=0,o=f>>>30,_.__setDigit(n,1073741823&f)}}}},{key:"__internalMultiplyAdd",value:function(e,t,_,l,g){for(var o=_,u=0,s=0;s<l;s++){var d=e.__digit(s),h=a.__imul(32767&d,t),b=a.__imul(d>>>15,t),m=h+((32767&b)<<15)+u+o;o=m>>>30,u=b>>>15,g.__setDigit(s,1073741823&m)}if(g.length>l)for(g.__setDigit(l++,o+u);l<g.length;)g.__setDigit(l++,0);else if(0!==o+u)throw new Error("implementation bug")}},{key:"__absoluteDivSmall",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;null===_&&(_=new a(e.length,!1));for(var n=0,l=2*e.length-1;0<=l;l-=2){var g=(n<<15|e.__halfDigit(l))>>>0,o=0|g/t;n=0|g%t,g=(n<<15|e.__halfDigit(l-1))>>>0;var u=0|g/t;n=0|g%t,_.__setDigit(l>>>1,o<<15|u)}return _}},{key:"__absoluteModSmall",value:function(e,t){for(var _,n=0,l=2*e.length-1;0<=l;l--)_=(n<<15|e.__halfDigit(l))>>>0,n=0|_%t;return n}},{key:"__absoluteDivLarge",value:function(e,t,i,_){var l=t.__halfDigitLength(),n=t.length,g=e.__halfDigitLength()-l,o=null;i&&(o=new a(g+2>>>1,!1),o.__initializeDigits());var s=new a(l+2>>>1,!1);s.__initializeDigits();var r=a.__clz15(t.__halfDigit(l-1));0<r&&(t=a.__specialLeftShift(t,r,0));for(var d=a.__specialLeftShift(e,r,1),u=t.__halfDigit(l-1),h=0,b=g;0<=b;b--){var m=32767,v=d.__halfDigit(b+l);if(v!==u){var y=(v<<15|d.__halfDigit(b+l-1))>>>0;m=0|y/u;for(var f=0|y%u,D=t.__halfDigit(l-2),p=d.__halfDigit(b+l-2);a.__imul(m,D)>>>0>(f<<16|p)>>>0&&(m--,f+=u,!(32767<f)););}a.__internalMultiplyAdd(t,m,0,n,s);var k=d.__inplaceSub(s,b,l+1);0!==k&&(k=d.__inplaceAdd(t,b,l),d.__setHalfDigit(b+l,32767&d.__halfDigit(b+l)+k),m--),i&&(1&b?h=m<<15:o.__setDigit(b>>>1,h|m))}if(_)return d.__inplaceRightShift(r),i?{quotient:o,remainder:d}:d;if(i)return o;throw new Error("unreachable")}},{key:"__clz15",value:function(e){return a.__clz30(e)-15}},{key:"__specialLeftShift",value:function(e,t,_){var l=e.length,n=new a(l+_,!1);if(0===t){for(var g=0;g<l;g++)n.__setDigit(g,e.__digit(g));return 0<_&&n.__setDigit(l,0),n}for(var o,u=0,s=0;s<l;s++)o=e.__digit(s),n.__setDigit(s,1073741823&o<<t|u),u=o>>>30-t;return 0<_&&n.__setDigit(l,u),n}},{key:"__leftShiftByAbsolute",value:function(e,t){var _=a.__toShiftAmount(t);if(0>_)throw new RangeError("BigInt too big");var n=0|_/30,l=_%30,g=e.length,o=0!==l&&0!=e.__digit(g-1)>>>30-l,u=g+n+(o?1:0),s=new a(u,e.sign);if(0===l){for(var r=0;r<n;r++)s.__setDigit(r,0);for(;r<u;r++)s.__setDigit(r,e.__digit(r-n))}else{for(var h=0,b=0;b<n;b++)s.__setDigit(b,0);for(var m,c=0;c<g;c++)m=e.__digit(c),s.__setDigit(c+n,1073741823&m<<l|h),h=m>>>30-l;if(o)s.__setDigit(g+n,h);else if(0!==h)throw new Error("implementation bug")}return s.__trim()}},{key:"__rightShiftByAbsolute",value:function(e,t){var _=e.length,n=e.sign,l=a.__toShiftAmount(t);if(0>l)return a.__rightShiftByMaximum(n);var g=0|l/30,o=l%30,u=_-g;if(0>=u)return a.__rightShiftByMaximum(n);var s=!1;if(n){if(0!=(e.__digit(g)&(1<<o)-1))s=!0;else for(var r=0;r<g;r++)if(0!==e.__digit(r)){s=!0;break}}if(s&&0===o){var h=e.__digit(_-1);0==~h&&u++}var b=new a(u,n);if(0===o){b.__setDigit(u-1,0);for(var m=g;m<_;m++)b.__setDigit(m-g,e.__digit(m))}else{for(var c,v=e.__digit(g)>>>o,y=_-g-1,f=0;f<y;f++)c=e.__digit(f+g+1),b.__setDigit(f,1073741823&c<<30-o|v),v=c>>>o;b.__setDigit(y,v)}return s&&(b=a.__absoluteAddOne(b,!0,b)),b.__trim()}},{key:"__rightShiftByMaximum",value:function(e){return e?a.__oneDigit(1,!0):a.__zero()}},{key:"__toShiftAmount",value:function(e){if(1<e.length)return-1;var t=e.__unsignedDigit(0);return t>a.__kMaxLengthBits?-1:t}},{key:"__toPrimitive",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"default";if("object"!==i(e))return e;if(e.constructor===a)return e;if("undefined"!=typeof Symbol&&"symbol"===i(Symbol.toPrimitive)){var _=e[Symbol.toPrimitive];if(_){var n=_(t);if("object"!==i(n))return n;throw new TypeError("Cannot convert object to primitive value")}}var l=e.valueOf;if(l){var g=l.call(e);if("object"!==i(g))return g}var o=e.toString;if(o){var u=o.call(e);if("object"!==i(u))return u}throw new TypeError("Cannot convert object to primitive value")}},{key:"__toNumeric",value:function(e){return a.__isBigInt(e)?e:+e}},{key:"__isBigInt",value:function(e){return"object"===i(e)&&null!==e&&e.constructor===a}},{key:"__truncateToNBits",value:function(e,t){for(var _=0|(e+29)/30,n=new a(_,t.sign),l=_-1,g=0;g<l;g++)n.__setDigit(g,t.__digit(g));var o=t.__digit(l);if(0!=e%30){var u=32-e%30;o=o<<u>>>u}return n.__setDigit(l,o),n.__trim()}},{key:"__truncateAndSubFromPowerOfTwo",value:function(e,t,_){for(var n=Math.min,l,g=0|(e+29)/30,o=new a(g,_),u=0,s=g-1,d=0,h=n(s,t.length);u<h;u++)l=0-t.__digit(u)-d,d=1&l>>>30,o.__setDigit(u,1073741823&l);for(;u<s;u++)o.__setDigit(u,0|1073741823&-d);var b,m=s<t.length?t.__digit(s):0,c=e%30;if(0===c)b=0-m-d,b&=1073741823;else{var v=32-c;m=m<<v>>>v;var y=1<<32-v;b=y-m-d,b&=y-1}return o.__setDigit(s,b),o.__trim()}},{key:"__digitPow",value:function(e,t){for(var i=1;0<t;)1&t&&(i*=e),t>>>=1,e*=e;return i}},{key:"__isOneDigitInt",value:function(e){return(1073741823&e)===e}}]),a}(h(Array));return S.__kMaxLength=33554432,S.__kMaxLengthBits=S.__kMaxLength<<5,S.__kMaxBitsPerChar=[0,0,32,51,64,75,83,90,96,102,107,111,115,119,122,126,128,131,134,136,139,141,143,145,147,149,151,153,154,156,158,159,160,162,163,165,166],S.__kBitsPerCharTableShift=5,S.__kBitsPerCharTableMultiplier=1<<S.__kBitsPerCharTableShift,S.__kConversionChars=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"],S.__kBitConversionBuffer=new ArrayBuffer(8),S.__kBitConversionDouble=new Float64Array(S.__kBitConversionBuffer),S.__kBitConversionInts=new Int32Array(S.__kBitConversionBuffer),S.__clz30=t?function(e){return t(e)-2}:function(e){var t=Math.LN2,i=Math.log;return 0===e?30:0|29-(0|i(e>>>0)/t)},S.__imul=e||function(e,t){return 0|e*t},S});
//# sourceMappingURL=jsbi-umd.js.map


/***/ }),

/***/ "./src/UI/style.css":
/*!**************************!*\
  !*** ./src/UI/style.css ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./style.css */ "./node_modules/css-loader/dist/cjs.js!./src/UI/style.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./src/UI/content.js":
/*!***************************!*\
  !*** ./src/UI/content.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Content)
/* harmony export */ });
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../storage */ "./src/storage.js");
/* harmony import */ var _form_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./form.js */ "./src/UI/form.js");


const storage = new _storage__WEBPACK_IMPORTED_MODULE_0__["default"]();

class Content {
    noteSection = document.createElement('div');
    todoSection = document.createElement('div');

    createSections() {
        const content = document.createElement('div')
        content.classList.add('main-content')

        this.noteSection.textContent = 'Notes'
        this.noteSection.classList.add('notes-section');

        this.todoSection = document.createElement('div');
        this.todoSection.classList.add('todos-section');
        this.todoSection.appendChild((0,_form_js__WEBPACK_IMPORTED_MODULE_1__["default"])())
        this.todoSection.appendChild(this.createAllTasksContent())

        content.appendChild(this.noteSection)
        content.appendChild(this.todoSection)

        return content;
    }

    changeTodoContent(newContent) {
        this.todoSection.removeChild(this.todoSection.firstChild)
        this.todoSection.appendChild(newContent)
    }

    changeNoteContent(newContent) {
        this.noteSection.removeChild(this.noteSection.firstChild)
        this.noteSection.appendChild(newContent)
    }

    createAllTasksContent() {
        const { todos } = storage.getAll();
        const todoContainer = document.createElement('div')
        const todoHeading = document.createElement('h3')
        const todoList = document.createElement('ul')

        todoContainer.classList.add('todoContainer');

        todoHeading.textContent = 'Get Busy';

        todos.forEach(todo => {
            const todoItem = document.createElement('li')
            todoItem.innerHTML = ` \
            <input type="checkbox" >\
            ${todo.title}
            <i class="fa-solid fa-star ${todo.priority}" ></i>`;

            todoList.appendChild(todoItem);
        })

        todoContainer.appendChild(todoHeading);
        todoContainer.appendChild(todoList);

        return todoContainer
    }

}

/***/ }),

/***/ "./src/UI/form.js":
/*!************************!*\
  !*** ./src/UI/form.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createForm)
/* harmony export */ });
/* harmony import */ var _todo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../todo.js */ "./src/todo.js");
/* harmony import */ var _content_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./content.js */ "./src/UI/content.js");


let contentCreator = new _content_js__WEBPACK_IMPORTED_MODULE_1__["default"]();

function createForm () {
    const form = document.createElement('form');

    const titleInput = document.createElement('div')
    const descriptionInput = document.createElement('div')
    const datePriorityInput = document.createElement('div')
    const dateInput = document.createElement('div')
    const priorityInput = document.createElement('div')
    const submitButton = document.createElement('button')

    titleInput.innerHTML = ' \
    <label for="title" >Title \
    </label> \
    <input  type="text" name="title" class="title-input" >';

    descriptionInput.innerHTML = ' \
    <label for="description">Details \
    </label> \
    <textarea name="description" class="description-input"> \
    </textarea>';

    datePriorityInput.classList.add('date-priority-input-container')
    dateInput.innerHTML = ' \
    <label for="date" >Due date \
    </label> \
    <input type="date" name="date" class="date-input" >';

    priorityInput.innerHTML = ' \
    <label for="priority" >Priority</label> \
    <select name="priority" > \
        <option value="low" >Low</option> \
        <option value="medium" >Medium</option> \
        <option value="high" >High</option> \
    </select>';

    submitButton.setAttribute('type', 'submit')
    submitButton.classList.add('submit-btn')
    submitButton.textContent = 'Add';

    datePriorityInput.appendChild(dateInput)
    datePriorityInput.appendChild(priorityInput)

    // append inputs and labels to form
    form.appendChild(titleInput)
    form.appendChild(descriptionInput)
    form.appendChild(datePriorityInput)
    form.appendChild(submitButton)

    listen(form)

    return form;
}

function listen(form) {
    form.addEventListener('submit', (e) => {
        e.preventDefault()
        let values = []
        let elements = form.elements;
        [...elements].forEach(element => {
            values.push(element.value)
        })

        let todo = new _todo_js__WEBPACK_IMPORTED_MODULE_0__["default"](
            values[0],
            values[1],
            values[2],
            values[3]
        )

        todo.saveTodo()
    })
    contentCreator.changeTodoContent()

    return
}

/***/ }),

/***/ "./src/UI/header.js":
/*!**************************!*\
  !*** ./src/UI/header.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { Temporal } = __webpack_require__(/*! @js-temporal/polyfill */ "./node_modules/@js-temporal/polyfill/dist/index.cjs");

function createHeader() {
    const content = document.createElement('div');

    const logoContainer = document.createElement('div');
    const logoImage = document.createElement('div');
    const logoText = document.createElement('div');
    const greetingDateContainer = document.createElement('div');
    const greeting = document.createElement('div');
    const date = document.createElement('div');

    content.classList.add('header-content')

    logoContainer.classList.add('logo-container');

    logoImage.classList.add('logo-image')
    logoImage.innerHTML = '<i class="fa-regular fa-square-check" ></i>'

    logoText.classList.add('logo-text');
    logoText.textContent = 'Willdo';

    greetingDateContainer.classList.add('greeting-date-container')

    greeting.classList.add('greeting-container');
    greeting.textContent = determineGreeting();

    date.classList.add('date');
    date.textContent = determineDate();

    logoContainer.appendChild(logoImage)
    logoContainer.appendChild(logoText)
    greetingDateContainer.appendChild(greeting)
    greetingDateContainer.appendChild(date)
    content.appendChild(logoContainer)
    content.appendChild(greetingDateContainer)

    return content;
}

function determineGreeting() {
    const time = Temporal.Now.plainTimeISO().toString()
    let hour = parseInt(time.split(':')[0])

    let morningHours = [0,1,2,3,4,5,6,7,8,9,10,11];
    let afterNoonHours = [12,13,14,15,16,17];
    let eveningHours = [18,19,20,21,22,23];

    if (morningHours.includes(hour)) return 'Good morning';
    if (afterNoonHours.includes(hour)) return 'Good afternoon';
    if (eveningHours.includes(hour)) return 'Good evening';
}

function determineDate () {
    const date = Temporal.Now.plainDateISO().toString();
    return date;
}

module.exports = { createHeader }

/***/ }),

/***/ "./src/UI/page.js":
/*!************************!*\
  !*** ./src/UI/page.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createWebsiteFrame)
/* harmony export */ });
/* harmony import */ var _style_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.css */ "./src/UI/style.css");
/* harmony import */ var _header_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./header.js */ "./src/UI/header.js");
/* harmony import */ var _header_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_header_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _sidebar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sidebar.js */ "./src/UI/sidebar.js");
/* harmony import */ var _content_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./content.js */ "./src/UI/content.js");




const contentCreator = new _content_js__WEBPACK_IMPORTED_MODULE_3__["default"]();

function createWebsiteFrame() {
    const body = document.body;
    const header = document.createElement('div')
    const sideBar = document.createElement('div')
    const content = document.createElement('div')
    const footer = document.createElement('div')

    header.classList.add('header')
    header.appendChild((0,_header_js__WEBPACK_IMPORTED_MODULE_1__.createHeader)())

    sideBar.classList.add('side-bar')
    sideBar.appendChild((0,_sidebar_js__WEBPACK_IMPORTED_MODULE_2__["default"])())

    content.classList.add('content')
    content.appendChild(contentCreator.createSections());

    footer.classList.add('footer')
    footer.textContent = 'footer'

    body.appendChild(header)
    body.appendChild(sideBar)
    body.appendChild(content)
    body.appendChild(footer)
}

/***/ }),

/***/ "./src/UI/sidebar.js":
/*!***************************!*\
  !*** ./src/UI/sidebar.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createSideBar)
/* harmony export */ });
/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../storage.js */ "./src/storage.js");
 
const storage = new _storage_js__WEBPACK_IMPORTED_MODULE_0__["default"]();

function createSideBar () {
    const content = document.createElement('div');
    const sideBarStuff = document.createElement('div')

    const allTasksContainer = document.createElement('div')
    const todayContainer = document.createElement('div')
    const next7DaysContainer = document.createElement('div')
    const projectsContainer = document.createElement('div')

    content.classList.add('side-bar-content')

    sideBarStuff.classList.add('side-bar-stuff')

    allTasksContainer.innerHTML = 
    '<i class="fa-solid fa-list-check" ></i> \
    <div class"all-tasks" >All tasks</div>';

    todayContainer.innerHTML = 
    '<i class="fa-solid fa-calendar-week" ></i> \
    <div class"today-tasks-btn" >Today</div>';

    next7DaysContainer.innerHTML =
    '<i class="fa-regular fa-calendar-days"></i> \
    <div class"nsd-tasks-btn" >Next 7 days</div>';

    projectsContainer.innerHTML =
    `<div> \
        <i class="fa-solid fa-briefcase" ></i> \
        <div class="projects">Projects</div> \
        <i class="fas fa-caret-down" ></i> \
    </div>`;
    projectsContainer.appendChild(makeProjects())
    projectsContainer.setAttribute('id', 'projects-container')
    projectsContainer.addEventListener('click', () => {
        const projectList = document.getElementsByClassName('project-list')[0]
        console.log(projectList)
        projectList.classList.toggle('display');
    })

    sideBarStuff.appendChild(allTasksContainer)
    sideBarStuff.appendChild(todayContainer)
    sideBarStuff.appendChild(next7DaysContainer)
    sideBarStuff.appendChild(projectsContainer)

    content.appendChild(sideBarStuff)
    return content;
}

function makeProjects() {
    const projectList = document.createElement('ul');
    projectList.classList.add('project-list')
    projectList.classList.add('hide-projects')

    const { projects } = storage.getAll();
    projects.forEach(project => {
        const projectItem = document.createElement('li');
        projectItem.textContent = `${project.name}`;
        projectList.appendChild(projectItem);
    })

    return projectList;
}

/***/ }),

/***/ "./src/project.js":
/*!************************!*\
  !*** ./src/project.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Project)
/* harmony export */ });
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./storage */ "./src/storage.js");

const storage = new _storage__WEBPACK_IMPORTED_MODULE_0__["default"]();

class Project {
    constructor(name) {
        this.name = name;
        this.todos = [];
    }

    saveProject() {
        storage.saveProject(this)
        console.log('project saved to local storage');
    }

    deleteProject() {
        storage.deleteProject(this)
        console.log('project deleted')
    }

    addTodo(newTodo) {
        this.todos.push(newTodo)
        storage.addProjectTodo(this)
        console.log(`Todo added to ${this.name} project`)
    }

    removeTodo(todo) {
        storage.removeProjectTodo(todo, this)
        console.log(`Todo removed from ${this.name} project`)
    }
}

/***/ }),

/***/ "./src/storage.js":
/*!************************!*\
  !*** ./src/storage.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LocalStorageOperations)
/* harmony export */ });
class LocalStorageOperations{

    storage = localStorage;

    initializeStorage() {
        // initialize todo and project arrays in local storage
        const todos = []
        const projects = []

        this.storage.setItem('todos', JSON.stringify(todos))
        this.storage.setItem('projects', JSON.stringify(projects))
        console.log('storage loaded')
        return
    }

    getAll() {
        const todos = JSON.parse(this.storage.getItem('todos'));
        const projects = JSON.parse(this.storage.getItem('projects'));
        return {todos, projects};
    }

    saveTodo(todo) {
        const todoDatabase = JSON.parse(this.storage.getItem('todos'));
        todoDatabase.push(todo)
        this.storage.setItem('todos', JSON.stringify(todoDatabase))
         
        return
    }

    deleteTodo(todoToDelete) {
        const todoDatabase = JSON.parse(this.storage.getItem('todos'));
        let todoIndex;
        todoDatabase.forEach(todo => {
            if (todo.title == todoToDelete.title &&
                todo.description == todoToDelete.description) {
                todoIndex = todoDatabase.indexOf(todo)
            }
        })
        todoDatabase.splice(todoIndex, 1);
        this.storage.setItem('todos', JSON.stringify(todoDatabase));
         
        return
    }

    updateTodo(oldTodo, newTodo) {
        const todoDatabase = JSON.parse(this.storage.getItem('todos'));

        // find todo in todo array
        const todo = todoDatabase.find(todo => todo.title === oldTodo.title && todo.description === oldTodo.description)

        if (!todo) {
            console,log('Todo does not exist');
            return
        };

        // update todo properties
        todo.title = newTodo.title
        todo.description = newTodo.description;
        todo.dueDate = newTodo.dueDate;
        todo.priority = newTodo.priority;

        this.storage.setItem('todos', JSON.stringify(todoDatabase));
        
        return
    }


    saveProject(project) {
        const projectDatabase = JSON.parse(this.storage.getItem('projects'));
        projectDatabase.push(project);
        this.storage.setItem('projects', JSON.stringify(projectDatabase));

        return
    }

    addProjectTodo(projectToUpdate) {
        const projectDatabase = JSON.parse(this.storage.getItem('projects'));
        const project = projectDatabase.find(project => project.name == projectToUpdate.name)

        if (!project) {
            console,log('Project does not exist');
            return
        };

        project.todos = projectToUpdate.todos

        this.storage.setItem('projects', JSON.stringify(projectDatabase));

        return
    }

    removeProjectTodo(todoToRemove, projectToRemoveFrom) {
        const projectDatabase = JSON.parse(this.storage.getItem('projects'));
        const project = projectDatabase.find(project => project.name == projectToRemoveFrom.name)

        if (!project) {
            console,log('Project does not exist');
            return
        };

        let todoIndex;
        project.todos.forEach(todo => {
            if (todo.title == todoToRemove.title &&
                todo.description == todoToRemove.decription) {
                    todoIndex = project.todos.indexOf(todo)
            }
        })

        project.todos.splice(todoIndex, 1)

        this.storage.setItem('projects', JSON.stringify(projectDatabase))

        return
    }

    deleteProject(projectToDelete) {
        const projectDatabase = JSON.parse(this.storage.getItem('projects'));
        let projectIndex;
        projectDatabase.forEach(project => {
            if (project.name == projectToDelete.name) {
                projectIndex = projectDatabase.indexOf(project)
            }
        })
        projectDatabase.splice(projectIndex, 1);
        this.storage.setItem('projects', JSON.stringify(projectDatabase));
         
        return
    }
}

/***/ }),

/***/ "./src/todo.js":
/*!*********************!*\
  !*** ./src/todo.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Todo)
/* harmony export */ });
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./storage */ "./src/storage.js");

const storage = new _storage__WEBPACK_IMPORTED_MODULE_0__["default"]();

class Todo {
    constructor(title, description, dueDate, priority) {
        this.title = title
        this.description = description
        this.dueDate = dueDate
        this.priority = priority
    } 

    saveTodo() {
        storage.saveTodo(this)
        console.log('Todo saved to local storage')
    }

    deleteTodo() {
        storage.deleteTodo(this)
        console.log('Todo deleted')
    }

    updateTodo(todo) {
        storage.updateTodo(this, todo)
        console.log('Todo updated')
    }
}

/***/ }),

/***/ "./node_modules/@js-temporal/polyfill/dist/index.cjs":
/*!***********************************************************!*\
  !*** ./node_modules/@js-temporal/polyfill/dist/index.cjs ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
function _interopDefaultLegacy(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}Object.defineProperty(exports, "__esModule", ({value:!0}));var e=_interopDefaultLegacy(__webpack_require__(/*! jsbi */ "./node_modules/jsbi/dist/jsbi-umd.js"));const t={};function MakeIntrinsicClass(e,t){Object.defineProperty(e.prototype,Symbol.toStringTag,{value:t,writable:!1,enumerable:!1,configurable:!0});for(const t of Object.getOwnPropertyNames(e)){const r=Object.getOwnPropertyDescriptor(e,t);r.configurable&&r.enumerable&&(r.enumerable=!1,Object.defineProperty(e,t,r))}for(const t of Object.getOwnPropertyNames(e.prototype)){const r=Object.getOwnPropertyDescriptor(e.prototype,t);r.configurable&&r.enumerable&&(r.enumerable=!1,Object.defineProperty(e.prototype,t,r))}DefineIntrinsic(t,e),DefineIntrinsic(`${t}.prototype`,e.prototype)}function DefineIntrinsic(e,r){const o=`%${e}%`;if(void 0!==t[o])throw new Error(`intrinsic ${e} already exists`);t[o]=r}function GetIntrinsic(e){return t[e]}const r="slot-epochNanoSeconds",o="slot-timezone-identifier",n="slot-year",a="slot-month",i="slot-day",s="slot-hour",l="slot-minute",d="slot-second",m="slot-millisecond",c="slot-microsecond",u="slot-nanosecond",h="slot-calendar",T="slot-cached-instant",p="slot-time-zone",f="slot-years",y="slot-months",S="slot-weeks",w="slot-days",g="slot-hours",I="slot-minutes",D="slot-seconds",G="slot-milliseconds",v="slot-microseconds",O="slot-nanoseconds",C="slot-calendar-identifier",E=new WeakMap;function CreateSlots(e){E.set(e,Object.create(null))}function GetSlots(e){return E.get(e)}function HasSlot(e,...t){if(!e||"object"!=typeof e)return!1;const r=GetSlots(e);return!!r&&t.reduce(((e,t)=>e&&t in r),!0)}function GetSlot(e,t){const r=GetSlots(e)[t];if(void 0===r)throw new TypeError(`Missing internal slot ${t}`);return r}function SetSlot(e,t,r){GetSlots(e)[t]=r}const b=/\.[-A-Za-z_]|\.\.[-A-Za-z._]{1,12}|\.[-A-Za-z_][-A-Za-z._]{0,12}|[A-Za-z_][-A-Za-z._]{0,13}/,M=new RegExp(`(?:(?:${b.source})(?:\\/(?:${b.source}))*|Etc/GMT[-+]\\d{1,2}|${/(?:[+\u2212-][0-2][0-9](?::?[0-5][0-9](?::?[0-5][0-9](?:[.,]\d{1,9})?)?)?)/.source})`),R=/[A-Za-z0-9]{3,8}/,Z=new RegExp(`(?:${R.source}(?:-${R.source})*)`),P=/(?:[+\u2212-]\d{6}|\d{4})/,F=/(?:0[1-9]|1[0-2])/,Y=/(?:0[1-9]|[12]\d|3[01])/,j=new RegExp(`(${P.source})(?:-(${F.source})-(${Y.source})|(${F.source})(${Y.source}))`),$=/(\d{2})(?::(\d{2})(?::(\d{2})(?:[.,](\d{1,9}))?)?|(\d{2})(?:(\d{2})(?:[.,](\d{1,9}))?)?)?/,B=/([+\u2212-])([01][0-9]|2[0-3])(?::?([0-5][0-9])(?::?([0-5][0-9])(?:[.,](\d{1,9}))?)?)?/,N=new RegExp(`(?:([zZ])|(?:${B.source})?)(?:\\[(${M.source})\\])?`),k=new RegExp(`\\[u-ca=(${Z.source})\\]`),A=new RegExp(`^${j.source}(?:(?:T|\\s+)${$.source})?${N.source}(?:${k.source})?$`,"i"),U=new RegExp(`^T?${$.source}(?:${N.source})?(?:${k.source})?$`,"i"),L=new RegExp(`^(${P.source})-?(${F.source})$`),x=new RegExp(`^(?:--)?(${F.source})-?(${Y.source})$`),H=/(\d+)(?:[.,](\d{1,9}))?/,q=new RegExp(`(?:${H.source}H)?(?:${H.source}M)?(?:${H.source}S)?`),W=new RegExp(`^([+−-])?P${/(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)W)?(?:(\d+)D)?/.source}(?:T(?!$)${q.source})?$`,"i"),z=Array.prototype.includes,_=Array.prototype.push,J=globalThis.Intl.DateTimeFormat,V=Math.min,X=Math.max,K=Math.abs,Q=Math.floor,ee=Math.sign,te=Math.trunc,re=Number.isNaN,oe=Number.isFinite,ne=Number,ae=String,ie=Number.MAX_SAFE_INTEGER,se=Object.assign,le=Object.create,de=Object.getOwnPropertyDescriptor,me=Object.is,ce=Reflect.apply,ue=e.default.BigInt(0),he=e.default.BigInt(1),Te=e.default.BigInt(60),pe=e.default.BigInt(1e3),fe=e.default.BigInt(1e6),ye=e.default.BigInt(1e9),Se=e.default.BigInt(-1),we=e.default.multiply(e.default.BigInt(86400),ye),ge=e.default.multiply(e.default.BigInt(-86400),e.default.BigInt(1e17)),Ie=e.default.multiply(e.default.BigInt(86400),e.default.BigInt(1e17)),De=e.default.multiply(e.default.BigInt(-388152),e.default.BigInt(1e13)),Ge=e.default.multiply(we,e.default.BigInt(3660)),ve=e.default.multiply(we,e.default.BigInt(366)),Oe=e.default.multiply(we,e.default.BigInt(14)),Ce=["iso8601","hebrew","islamic","islamic-umalqura","islamic-tbla","islamic-civil","islamic-rgsa","islamicc","persian","ethiopic","ethioaa","coptic","chinese","dangi","roc","indian","buddhist","japanese","gregory"];function IsInteger(e){if("number"!=typeof e||!oe(e))return!1;const t=K(e);return Q(t)===t}function IsObject(e){return"object"==typeof e&&null!==e||"function"==typeof e}function ToNumber(e){if("bigint"==typeof e)throw new TypeError("Cannot convert BigInt to number");return ne(e)}function ToInteger(e){const t=ToNumber(e);if(re(t))return 0;const r=te(t);return 0===t?0:r}function ToString(e){if("symbol"==typeof e)throw new TypeError("Cannot convert a Symbol value to a String");return ae(e)}function ToIntegerThrowOnInfinity(e){const t=ToInteger(e);if(!oe(t))throw new RangeError("infinity is out of range");return t}function ToPositiveInteger(e,t){const r=ToInteger(e);if(!oe(r))throw new RangeError("infinity is out of range");if(r<1){if(void 0!==t)throw new RangeError(`property '${t}' cannot be a a number less than one`);throw new RangeError("Cannot convert a number less than one to a positive integer")}return r}function ToIntegerWithoutRounding(e){const t=ToNumber(e);if(re(t))return 0;if(!oe(t))throw new RangeError("infinity is out of range");if(!IsInteger(t))throw new RangeError(`unsupported fractional value ${t}`);return ToInteger(t)}function divmod(t,r){return{quotient:e.default.divide(t,r),remainder:e.default.remainder(t,r)}}function abs(t){return e.default.lessThan(t,ue)?e.default.multiply(t,Se):t}function ArrayPush(e,...t){return _.apply(e,t),e}const Ee=new Map([["year",ToIntegerThrowOnInfinity],["month",ToPositiveInteger],["monthCode",ToString],["day",ToPositiveInteger],["hour",ToIntegerThrowOnInfinity],["minute",ToIntegerThrowOnInfinity],["second",ToIntegerThrowOnInfinity],["millisecond",ToIntegerThrowOnInfinity],["microsecond",ToIntegerThrowOnInfinity],["nanosecond",ToIntegerThrowOnInfinity],["years",ToIntegerWithoutRounding],["months",ToIntegerWithoutRounding],["weeks",ToIntegerWithoutRounding],["days",ToIntegerWithoutRounding],["hours",ToIntegerWithoutRounding],["minutes",ToIntegerWithoutRounding],["seconds",ToIntegerWithoutRounding],["milliseconds",ToIntegerWithoutRounding],["microseconds",ToIntegerWithoutRounding],["nanoseconds",ToIntegerWithoutRounding],["era",ToString],["eraYear",ToInteger],["offset",ToString]]),be=new Map([["hour",0],["minute",0],["second",0],["millisecond",0],["microsecond",0],["nanosecond",0]]),Me=[["years","year","date"],["months","month","date"],["weeks","week","date"],["days","day","date"],["hours","hour","time"],["minutes","minute","time"],["seconds","second","time"],["milliseconds","millisecond","time"],["microseconds","microsecond","time"],["nanoseconds","nanosecond","time"]],Re=new Map(Me.map((e=>[e[0],e[1]]))),Ze=new Map(Me.map((([e,t])=>[t,e]))),Pe=Me.map((([,e])=>e)),Fe=Array.from(Re.keys()).sort(),Ye=new Map;function getIntlDateTimeFormatEnUsForTimeZone(e){let t=Ye.get(e);return void 0===t&&(t=new J("en-us",{timeZone:ae(e),hour12:!1,era:"short",year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric"}),Ye.set(e,t)),t}function IsTemporalInstant(e){return HasSlot(e,r)&&!HasSlot(e,p,h)}function IsTemporalTimeZone(e){return HasSlot(e,o)}function IsTemporalCalendar(e){return HasSlot(e,C)}function IsTemporalDuration(e){return HasSlot(e,f,y,w,g,I,D,G,v,O)}function IsTemporalDate(e){return HasSlot(e,"slot-date-brand")}function IsTemporalTime(e){return HasSlot(e,s,l,d,m,c,u)&&!HasSlot(e,n,a,i)}function IsTemporalDateTime(e){return HasSlot(e,n,a,i,s,l,d,m,c,u)}function IsTemporalYearMonth(e){return HasSlot(e,"slot-year-month-brand")}function IsTemporalMonthDay(e){return HasSlot(e,"slot-month-day-brand")}function IsTemporalZonedDateTime(e){return HasSlot(e,r,p,h)}function RejectObjectWithCalendarOrTimeZone(e){if(HasSlot(e,h)||HasSlot(e,p))throw new TypeError("with() does not support a calendar or timeZone property");if(void 0!==e.calendar)throw new TypeError("with() does not support a calendar property");if(void 0!==e.timeZone)throw new TypeError("with() does not support a timeZone property")}function ParseTemporalTimeZone(e){let{ianaName:t,offset:r,z:o}=function ParseTemporalTimeZoneString(e){try{let t=GetCanonicalTimeZoneIdentifier(e);if(t)return{ianaName:t.toString()}}catch{}try{const t=ParseISODateTime(e);if(t.z||t.offset||t.ianaName)return t}catch{}throw new RangeError(`Invalid time zone: ${e}`)}(e);return t||(o?"UTC":r)}function FormatCalendarAnnotation(e,t){return"never"===t||"auto"===t&&"iso8601"===e?"":`[u-ca=${e}]`}function ParseISODateTime(e){const t=A.exec(e);if(!t)throw new RangeError(`invalid ISO 8601 string: ${e}`);let r=t[1];if("−"===r[0]&&(r=`-${r.slice(1)}`),"-000000"===r)throw new RangeError(`invalid ISO 8601 string: ${e}`);const o=ToInteger(r),n=ToInteger(t[2]||t[4]),a=ToInteger(t[3]||t[5]),i=ToInteger(t[6]),s=void 0!==t[6],l=ToInteger(t[7]||t[10]);let d=ToInteger(t[8]||t[11]);60===d&&(d=59);const m=(t[9]||t[12])+"000000000",c=ToInteger(m.slice(0,3)),u=ToInteger(m.slice(3,6)),h=ToInteger(m.slice(6,9));let T,p=!1;if(t[13])T=void 0,p=!0;else if(t[14]&&t[15]){const e="-"===t[14]||"−"===t[14]?"-":"+",r=t[15]||"00",o=t[16]||"00",n=t[17]||"00";let a=t[18]||"0";if(T=`${e}${r}:${o}`,+a){for(;a.endsWith("0");)a=a.slice(0,-1);T+=`:${n}.${a}`}else+n&&(T+=`:${n}`);"-00:00"===T&&(T="+00:00")}let f=t[19];if(f)try{f=GetCanonicalTimeZoneIdentifier(f).toString()}catch{}const y=t[20];return RejectDateTime(o,n,a,i,l,d,c,u,h),{year:o,month:n,day:a,hasTime:s,hour:i,minute:l,second:d,millisecond:c,microsecond:u,nanosecond:h,ianaName:f,offset:T,z:p,calendar:y}}function ParseTemporalYearMonthString(e){const t=L.exec(e);let r,o,n,a;if(t){let a=t[1];if("−"===a[0]&&(a=`-${a.slice(1)}`),"-000000"===a)throw new RangeError(`invalid ISO 8601 string: ${e}`);r=ToInteger(a),o=ToInteger(t[2]),n=t[3]}else{let t;if(({year:r,month:o,calendar:n,day:a,z:t}=ParseISODateTime(e)),t)throw new RangeError("Z designator not supported for PlainYearMonth")}return{year:r,month:o,calendar:n,referenceISODay:a}}function ParseTemporalMonthDayString(e){const t=x.exec(e);let r,o,n,a;if(t)r=ToInteger(t[1]),o=ToInteger(t[2]);else{let t;if(({month:r,day:o,calendar:n,year:a,z:t}=ParseISODateTime(e)),t)throw new RangeError("Z designator not supported for PlainMonthDay")}return{month:r,day:o,calendar:n,referenceISOYear:a}}function ParseTemporalDurationString(e){const t=W.exec(e);if(!t)throw new RangeError(`invalid duration: ${e}`);if(t.slice(2).every((e=>void 0===e)))throw new RangeError(`invalid duration: ${e}`);const r="-"===t[1]||"−"===t[1]?-1:1,o=ToInteger(t[2])*r,n=ToInteger(t[3])*r,a=ToInteger(t[4])*r,i=ToInteger(t[5])*r,s=ToInteger(t[6])*r;let l=t[7],d=ToInteger(t[8])*r,m=t[9],c=ToInteger(t[10])*r;const u=t[11]+"000000000";let h=ToInteger(u.slice(0,3))*r,T=ToInteger(u.slice(3,6))*r,p=ToInteger(u.slice(6,9))*r;return l=l?r*ToInteger(l)/10**l.length:0,m=m?r*ToInteger(m)/10**m.length:0,({minutes:d,seconds:c,milliseconds:h,microseconds:T,nanoseconds:p}=function DurationHandleFractions(e,t,r,o,n,a,i){let s=e,l=t,d=r,m=o,c=n,u=a,h=i;if(0!==s){[l,d,m,c,u,h].forEach((e=>{if(0!==e)throw new RangeError("only the smallest unit can be fractional")}));const e=60*s;l=te(e),d=e%1}if(0!==d){[m,c,u,h].forEach((e=>{if(0!==e)throw new RangeError("only the smallest unit can be fractional")}));const e=60*d;m=te(e);const t=e%1;if(0!==t){const e=1e3*t;c=te(e);const r=e%1;if(0!==r){const e=1e3*r;u=te(e);const t=e%1;if(0!==t){h=te(1e3*t)}}}}return{minutes:l,seconds:m,milliseconds:c,microseconds:u,nanoseconds:h}}(l,d,m,c,h,T,p)),RejectDuration(o,n,a,i,s,d,c,h,T,p),{years:o,months:n,weeks:a,days:i,hours:s,minutes:d,seconds:c,milliseconds:h,microseconds:T,nanoseconds:p}}function ParseTemporalInstant(e){let{year:t,month:r,day:o,hour:n,minute:a,second:i,millisecond:s,microsecond:l,nanosecond:d,offset:m,z:c}=function ParseTemporalInstantString(e){const t=ParseISODateTime(e);if(!t.z&&!t.offset)throw new RangeError("Temporal.Instant requires a time zone offset");return t}(e);if(!c&&!m)throw new RangeError("Temporal.Instant requires a time zone offset");const u=c?0:ParseTimeZoneOffsetString(m);({year:t,month:r,day:o,hour:n,minute:a,second:i,millisecond:s,microsecond:l,nanosecond:d}=BalanceISODateTime(t,r,o,n,a,i,s,l,d-u));const h=GetEpochFromISOParts(t,r,o,n,a,i,s,l,d);if(null===h)throw new RangeError("DateTime outside of supported range");return h}function RegulateISODate(e,t,r,o){let n=e,a=t,i=r;switch(o){case"reject":RejectISODate(n,a,i);break;case"constrain":({year:n,month:a,day:i}=ConstrainISODate(n,a,i))}return{year:n,month:a,day:i}}function RegulateTime(e,t,r,o,n,a,i){let s=e,l=t,d=r,m=o,c=n,u=a;switch(i){case"reject":RejectTime(s,l,d,m,c,u);break;case"constrain":({hour:s,minute:l,second:d,millisecond:m,microsecond:c,nanosecond:u}=function ConstrainTime(e,t,r,o,n,a){const i=ConstrainToRange(e,0,23),s=ConstrainToRange(t,0,59),l=ConstrainToRange(r,0,59),d=ConstrainToRange(o,0,999),m=ConstrainToRange(n,0,999),c=ConstrainToRange(a,0,999);return{hour:i,minute:s,second:l,millisecond:d,microsecond:m,nanosecond:c}}(s,l,d,m,c,u))}return{hour:s,minute:l,second:d,millisecond:m,microsecond:c,nanosecond:u}}function ToTemporalDurationRecord(e){if(!IsObject(e))return ParseTemporalDurationString(ToString(e));if(IsTemporalDuration(e))return{years:GetSlot(e,f),months:GetSlot(e,y),weeks:GetSlot(e,S),days:GetSlot(e,w),hours:GetSlot(e,g),minutes:GetSlot(e,I),seconds:GetSlot(e,D),milliseconds:GetSlot(e,G),microseconds:GetSlot(e,v),nanoseconds:GetSlot(e,O)};const t={years:0,months:0,weeks:0,days:0,hours:0,minutes:0,seconds:0,milliseconds:0,microseconds:0,nanoseconds:0};let r=function ToTemporalPartialDurationRecord(e){if(!IsObject(e))throw new TypeError("invalid duration-like");const t={years:void 0,months:void 0,weeks:void 0,days:void 0,hours:void 0,minutes:void 0,seconds:void 0,milliseconds:void 0,microseconds:void 0,nanoseconds:void 0};let r=!1;for(const o of Fe){const n=e[o];void 0!==n&&(r=!0,t[o]=ToIntegerWithoutRounding(n))}if(!r)throw new TypeError("invalid duration-like");return t}(e);for(const e of Fe){const o=r[e];void 0!==o&&(t[e]=o)}let{years:o,months:n,weeks:a,days:i,hours:s,minutes:l,seconds:d,milliseconds:m,microseconds:c,nanoseconds:u}=t;return RejectDuration(o,n,a,i,s,l,d,m,c,u),{years:o,months:n,weeks:a,days:i,hours:s,minutes:l,seconds:d,milliseconds:m,microseconds:c,nanoseconds:u}}function ToTemporalOverflow(e){return void 0===e?"constrain":GetOption(e,"overflow",["constrain","reject"],"constrain")}function ToTemporalDisambiguation(e){return void 0===e?"compatible":GetOption(e,"disambiguation",["compatible","earlier","later","reject"],"compatible")}function ToTemporalRoundingMode(e,t){return GetOption(e,"roundingMode",["ceil","floor","trunc","halfExpand"],t)}function NegateTemporalRoundingMode(e){switch(e){case"ceil":return"floor";case"floor":return"ceil";default:return e}}function ToTemporalOffset(e,t){return void 0===e?t:GetOption(e,"offset",["prefer","use","ignore","reject"],t)}function ToShowCalendarOption(e){return GetOption(e,"calendarName",["auto","always","never"],"auto")}function ToTemporalRoundingIncrement(e,t,r){let o=1/0;void 0!==t&&(o=t),r||void 0===t||(o=t>1?t-1:1);const n=function GetNumberOption(e,t,r,o,n){let a=e[t];if(void 0===a)return n;const i=ToNumber(a);if(re(i)||i<r||i>o)throw new RangeError(`${String(t)} must be between ${r} and ${o}, not ${i}`);return Q(i)}(e,"roundingIncrement",1,o,1);if(void 0!==t&&t%n!=0)throw new RangeError(`Rounding increment must divide evenly into ${t}`);return n}function ToTemporalDateTimeRoundingIncrement(e,t){return ToTemporalRoundingIncrement(e,{year:void 0,month:void 0,week:void 0,day:void 0,hour:24,minute:60,second:60,millisecond:1e3,microsecond:1e3,nanosecond:1e3}[t],!1)}function ToSecondsStringPrecision(e){const t=GetTemporalUnit(e,"smallestUnit","time",void 0);if("hour"===t){const e=Me.reduce(((e,[t,r,o])=>("time"===o&&"hour"!==r&&e.push(r,t),e)),[]);throw new RangeError(`smallestUnit must be one of ${e.join(", ")}, not ${t}`)}switch(t){case"minute":return{precision:"minute",unit:"minute",increment:1};case"second":return{precision:0,unit:"second",increment:1};case"millisecond":return{precision:3,unit:"millisecond",increment:1};case"microsecond":return{precision:6,unit:"microsecond",increment:1};case"nanosecond":return{precision:9,unit:"nanosecond",increment:1}}let r=e.fractionalSecondDigits;if(void 0===r&&(r="auto"),"number"!=typeof r){const e=ToString(r);if("auto"===e)return{precision:"auto",unit:"nanosecond",increment:1};throw new RangeError(`fractionalSecondDigits must be 'auto' or 0 through 9, not ${e}`)}if(re(r)||r<0||r>9)throw new RangeError(`fractionalSecondDigits must be 'auto' or 0 through 9, not ${r}`);const o=Q(r);switch(o){case 0:return{precision:o,unit:"second",increment:1};case 1:case 2:case 3:return{precision:o,unit:"millisecond",increment:10**(3-o)};case 4:case 5:case 6:return{precision:o,unit:"microsecond",increment:10**(6-o)};case 7:case 8:case 9:return{precision:o,unit:"nanosecond",increment:10**(9-o)};default:throw new RangeError(`fractionalSecondDigits must be 'auto' or 0 through 9, not ${r}`)}}const je=Symbol("~required~");function GetTemporalUnit(e,t,r,o,n=[]){const a=[];for(const[,e,t]of Me)"datetime"!==r&&r!==t||a.push(e);a.push(...n);let i=o;i===je?i=void 0:void 0!==i&&a.push(i);const s=[...a];for(const e of a){const t=Ze.get(e);void 0!==t&&s.push(t)}let l=GetOption(e,t,s,i);if(void 0===l&&o===je)throw new RangeError(`${t} is required`);return Re.has(l)?Re.get(l):l}function ToRelativeTemporalObject(e){const t=e.relativeTo;if(void 0===t)return t;let r,o,n,a,i,s,l,d,m,c,u,h,T="option",p=!1;if(IsObject(t)){if(IsTemporalZonedDateTime(t)||IsTemporalDate(t))return t;if(IsTemporalDateTime(t))return TemporalDateTimeToDate(t);c=GetTemporalCalendarWithISODefault(t);const e=PrepareTemporalFields(t,CalendarFields(c,["day","hour","microsecond","millisecond","minute","month","monthCode","nanosecond","second","year"]),[]),p=le(null);p.overflow="constrain",({year:r,month:o,day:n,hour:a,minute:i,second:s,millisecond:l,microsecond:d,nanosecond:m}=InterpretTemporalDateTimeFields(c,e,p)),h=t.offset,void 0===h&&(T="wall"),u=t.timeZone}else{let e,f;({year:r,month:o,day:n,hour:a,minute:i,second:s,millisecond:l,microsecond:d,nanosecond:m,calendar:c,ianaName:e,offset:h,z:f}=ParseISODateTime(ToString(t))),e&&(u=e),f?T="exact":h||(T="wall"),c||(c=GetISO8601Calendar()),c=ToTemporalCalendar(c),p=!0}if(void 0!==u){u=ToTemporalTimeZone(u);let e=0;"option"===T&&(e=ParseTimeZoneOffsetString(ToString(h)));return CreateTemporalZonedDateTime(InterpretISODateTimeOffset(r,o,n,a,i,s,l,d,m,T,e,u,"compatible","reject",p),u,c)}return CreateTemporalDate(r,o,n,c)}function DefaultTemporalLargestUnit(e,t,r,o,n,a,i,s,l,d){for(const[m,c]of[["years",e],["months",t],["weeks",r],["days",o],["hours",n],["minutes",a],["seconds",i],["milliseconds",s],["microseconds",l],["nanoseconds",d]])if(0!==c)return Re.get(m);return"nanosecond"}function LargerOfTwoTemporalUnits(e,t){return Pe.indexOf(e)>Pe.indexOf(t)?t:e}function MergeLargestUnitOption(e,t){let r=e;return void 0===r&&(r=le(null)),se(le(null),r,{largestUnit:t})}function PrepareTemporalFields(e,t,r,{emptySourceErrorMessage:o}={emptySourceErrorMessage:"no supported properties found"}){const n=le(null);let a=!1;for(const o of t){let t=e[o];if(void 0!==t)a=!0,Ee.has(o)&&(t=Ee.get(o)(t)),n[o]=t;else if("partial"!==r){if(z.call(r,o))throw new TypeError(`required property '${o}' missing or undefined`);t=be.get(o),n[o]=t}}if("partial"===r&&!a)throw new TypeError(o);if(void 0===n.era!=(void 0===n.eraYear))throw new RangeError("properties 'era' and 'eraYear' must be provided together");return n}function ToTemporalTimeRecord(e,t="complete"){const r=["hour","microsecond","millisecond","minute","nanosecond","second"],o=PrepareTemporalFields(e,r,"partial",{emptySourceErrorMessage:"invalid time-like"}),n={};for(const e of r){const r=de(o,e);void 0!==r?n[e]=r.value:"complete"===t&&(n[e]=0)}return n}function ToTemporalDate(e,t){let r=e;if(IsObject(r)){if(IsTemporalDate(r))return r;if(IsTemporalZonedDateTime(r)&&(ToTemporalOverflow(t),r=BuiltinTimeZoneGetPlainDateTimeFor(GetSlot(r,p),GetSlot(r,T),GetSlot(r,h))),IsTemporalDateTime(r))return ToTemporalOverflow(t),CreateTemporalDate(GetSlot(r,n),GetSlot(r,a),GetSlot(r,i),GetSlot(r,h));const e=GetTemporalCalendarWithISODefault(r);return CalendarDateFromFields(e,PrepareTemporalFields(r,CalendarFields(e,["day","month","monthCode","year"]),[]),t)}ToTemporalOverflow(t);const{year:o,month:s,day:l,calendar:d,z:m}=function ParseTemporalDateString(e){return ParseISODateTime(e)}(ToString(r));if(m)throw new RangeError("Z designator not supported for PlainDate");return new(GetIntrinsic("%Temporal.PlainDate%"))(o,s,l,d)}function InterpretTemporalDateTimeFields(e,t,r){let{hour:o,minute:s,second:l,millisecond:d,microsecond:m,nanosecond:c}=ToTemporalTimeRecord(t);const u=ToTemporalOverflow(r),h=CalendarDateFromFields(e,t,r),T=GetSlot(h,n),p=GetSlot(h,a),f=GetSlot(h,i);return({hour:o,minute:s,second:l,millisecond:d,microsecond:m,nanosecond:c}=RegulateTime(o,s,l,d,m,c,u)),{year:T,month:p,day:f,hour:o,minute:s,second:l,millisecond:d,microsecond:m,nanosecond:c}}function ToTemporalDateTime(e,t){let r,o,s,l,d,m,c,u,f,y;if(IsObject(e)){if(IsTemporalDateTime(e))return e;if(IsTemporalZonedDateTime(e))return ToTemporalOverflow(t),BuiltinTimeZoneGetPlainDateTimeFor(GetSlot(e,p),GetSlot(e,T),GetSlot(e,h));if(IsTemporalDate(e))return ToTemporalOverflow(t),CreateTemporalDateTime(GetSlot(e,n),GetSlot(e,a),GetSlot(e,i),0,0,0,0,0,0,GetSlot(e,h));y=GetTemporalCalendarWithISODefault(e);const S=PrepareTemporalFields(e,CalendarFields(y,["day","hour","microsecond","millisecond","minute","month","monthCode","nanosecond","second","year"]),[]);({year:r,month:o,day:s,hour:l,minute:d,second:m,millisecond:c,microsecond:u,nanosecond:f}=InterpretTemporalDateTimeFields(y,S,t))}else{let n;if(ToTemporalOverflow(t),({year:r,month:o,day:s,hour:l,minute:d,second:m,millisecond:c,microsecond:u,nanosecond:f,calendar:y,z:n}=function ParseTemporalDateTimeString(e){return ParseISODateTime(e)}(ToString(e))),n)throw new RangeError("Z designator not supported for PlainDateTime");RejectDateTime(r,o,s,l,d,m,c,u,f),void 0===y&&(y=GetISO8601Calendar()),y=ToTemporalCalendar(y)}return CreateTemporalDateTime(r,o,s,l,d,m,c,u,f,y)}function ToTemporalDuration(e){if(IsTemporalDuration(e))return e;let{years:t,months:r,weeks:o,days:n,hours:a,minutes:i,seconds:s,milliseconds:l,microseconds:d,nanoseconds:m}=ToTemporalDurationRecord(e);return new(GetIntrinsic("%Temporal.Duration%"))(t,r,o,n,a,i,s,l,d,m)}function ToTemporalInstant(e){if(IsTemporalInstant(e))return e;if(IsTemporalZonedDateTime(e)){return new(GetIntrinsic("%Temporal.Instant%"))(GetSlot(e,r))}const t=ParseTemporalInstant(ToString(e));return new(GetIntrinsic("%Temporal.Instant%"))(t)}function ToTemporalMonthDay(e,t){let r=e;if(IsObject(r)){if(IsTemporalMonthDay(r))return r;let e,o;if(HasSlot(r,h))e=GetSlot(r,h),o=!1;else{let t=r.calendar;o=void 0===t,void 0===t&&(t=GetISO8601Calendar()),e=ToTemporalCalendar(t)}r=r;const n=PrepareTemporalFields(r,CalendarFields(e,["day","month","monthCode","year"]),[]);return o&&void 0!==n.month&&void 0===n.monthCode&&void 0===n.year&&(n.year=1972),CalendarMonthDayFromFields(e,n,t)}ToTemporalOverflow(t);let{month:o,day:n,referenceISOYear:a,calendar:i}=ParseTemporalMonthDayString(ToString(r)),s=i;if(void 0===s&&(s=GetISO8601Calendar()),s=ToTemporalCalendar(s),void 0===a)return RejectISODate(1972,o,n),CreateTemporalMonthDay(o,n,s);return CalendarMonthDayFromFields(s,CreateTemporalMonthDay(o,n,s,a))}function ToTemporalTime(e,t="constrain"){let r,o,n,a,i,f,y,S=e;if(IsObject(S)){if(IsTemporalTime(S))return S;if(IsTemporalZonedDateTime(S)&&(S=BuiltinTimeZoneGetPlainDateTimeFor(GetSlot(S,p),GetSlot(S,T),GetSlot(S,h))),IsTemporalDateTime(S)){return new(GetIntrinsic("%Temporal.PlainTime%"))(GetSlot(S,s),GetSlot(S,l),GetSlot(S,d),GetSlot(S,m),GetSlot(S,c),GetSlot(S,u))}if(y=GetTemporalCalendarWithISODefault(S),"iso8601"!==ToString(y))throw new RangeError("PlainTime can only have iso8601 calendar");({hour:r,minute:o,second:n,millisecond:a,microsecond:i,nanosecond:f}=ToTemporalTimeRecord(S)),({hour:r,minute:o,second:n,millisecond:a,microsecond:i,nanosecond:f}=RegulateTime(r,o,n,a,i,f,t))}else if(({hour:r,minute:o,second:n,millisecond:a,microsecond:i,nanosecond:f,calendar:y}=function ParseTemporalTimeString(e){const t=U.exec(e);let r,o,n,a,i,s,l;if(t){r=ToInteger(t[1]),o=ToInteger(t[2]||t[5]),n=ToInteger(t[3]||t[6]),60===n&&(n=59);const e=(t[4]||t[7])+"000000000";a=ToInteger(e.slice(0,3)),i=ToInteger(e.slice(3,6)),s=ToInteger(e.slice(6,9)),l=t[15]}else{let t,d;if(({hasTime:d,hour:r,minute:o,second:n,millisecond:a,microsecond:i,nanosecond:s,calendar:l,z:t}=ParseISODateTime(e)),!d)throw new RangeError(`time is missing in string: ${e}`);if(t)throw new RangeError("Z designator not supported for PlainTime")}if(/[tT ][0-9][0-9]/.test(e))return{hour:r,minute:o,second:n,millisecond:a,microsecond:i,nanosecond:s,calendar:l};try{const{month:t,day:r}=ParseTemporalMonthDayString(e);RejectISODate(1972,t,r)}catch{try{const{year:t,month:r}=ParseTemporalYearMonthString(e);RejectISODate(t,r,1)}catch{return{hour:r,minute:o,second:n,millisecond:a,microsecond:i,nanosecond:s,calendar:l}}}throw new RangeError(`invalid ISO 8601 time-only string ${e}; may need a T prefix`)}(ToString(S))),RejectTime(r,o,n,a,i,f),void 0!==y&&"iso8601"!==y)throw new RangeError("PlainTime can only have iso8601 calendar");return new(GetIntrinsic("%Temporal.PlainTime%"))(r,o,n,a,i,f)}function ToTemporalYearMonth(e,t){if(IsObject(e)){if(IsTemporalYearMonth(e))return e;const r=GetTemporalCalendarWithISODefault(e);return CalendarYearMonthFromFields(r,PrepareTemporalFields(e,CalendarFields(r,["month","monthCode","year"]),[]),t)}ToTemporalOverflow(t);let{year:r,month:o,referenceISODay:n,calendar:a}=ParseTemporalYearMonthString(ToString(e)),i=a;if(void 0===i&&(i=GetISO8601Calendar()),i=ToTemporalCalendar(i),void 0===n)return RejectISODate(r,o,1),CreateTemporalYearMonth(r,o,i);return CalendarYearMonthFromFields(i,CreateTemporalYearMonth(r,o,i,n))}function InterpretISODateTimeOffset(t,n,a,i,s,l,d,m,c,u,h,T,p,f,y){const S=new(GetIntrinsic("%Temporal.PlainDateTime%"))(t,n,a,i,s,l,d,m,c);if("wall"===u||"ignore"===f){return GetSlot(BuiltinTimeZoneGetInstantFor(T,S,p),r)}if("exact"===u||"use"===f){const r=GetEpochFromISOParts(t,n,a,i,s,l,d,m,c);if(null===r)throw new RangeError("ZonedDateTime outside of supported range");return e.default.subtract(r,e.default.BigInt(h))}const w=GetPossibleInstantsFor(T,S);for(const t of w){const o=GetOffsetNanosecondsFor(T,t),n=e.default.toNumber(RoundNumberToIncrement(e.default.BigInt(o),6e10,"halfExpand"));if(o===h||y&&n===h)return GetSlot(t,r)}if("reject"===f){const e=FormatTimeZoneOffsetString(h),t=IsTemporalTimeZone(T)?GetSlot(T,o):"time zone";throw new RangeError(`Offset ${e} is invalid for ${S.toString()} in ${t}`)}return GetSlot(DisambiguatePossibleInstants(w,T,S,p),r)}function ToTemporalZonedDateTime(e,t){let r,o,n,a,i,s,l,d,m,c,u,h,T=!1,p="option";if(IsObject(e)){if(IsTemporalZonedDateTime(e))return e;h=GetTemporalCalendarWithISODefault(e);const T=PrepareTemporalFields(e,ArrayPush(CalendarFields(h,["day","hour","microsecond","millisecond","minute","month","monthCode","nanosecond","second","year"]),"timeZone","offset"),["timeZone"]);({year:r,month:o,day:n,hour:a,minute:i,second:s,millisecond:l,microsecond:d,nanosecond:m}=InterpretTemporalDateTimeFields(h,T,t)),c=ToTemporalTimeZone(T.timeZone),u=T.offset,void 0===u?p="wall":u=ToString(u)}else{let f,y;if(ToTemporalOverflow(t),({year:r,month:o,day:n,hour:a,minute:i,second:s,millisecond:l,microsecond:d,nanosecond:m,ianaName:f,offset:u,z:y,calendar:h}=function ParseTemporalZonedDateTimeString(e){const t=ParseISODateTime(e);if(!t.ianaName)throw new RangeError("Temporal.ZonedDateTime requires a time zone ID in brackets");return t}(ToString(e))),!f)throw new RangeError("time zone ID required in brackets");y?p="exact":u||(p="wall");c=new(GetIntrinsic("%Temporal.TimeZone%"))(f),h||(h=GetISO8601Calendar()),h=ToTemporalCalendar(h),T=!0}let f=0;"option"===p&&(f=ParseTimeZoneOffsetString(u));return CreateTemporalZonedDateTime(InterpretISODateTimeOffset(r,o,n,a,i,s,l,d,m,p,f,c,ToTemporalDisambiguation(t),ToTemporalOffset(t,"reject"),T),c,h)}function CreateTemporalDateSlots(e,t,r,o,s){RejectISODate(t,r,o),RejectDateRange(t,r,o),CreateSlots(e),SetSlot(e,n,t),SetSlot(e,a,r),SetSlot(e,i,o),SetSlot(e,h,s),SetSlot(e,"slot-date-brand",!0)}function CreateTemporalDate(e,t,r,o=GetISO8601Calendar()){const n=GetIntrinsic("%Temporal.PlainDate%"),a=le(n.prototype);return CreateTemporalDateSlots(a,e,t,r,o),a}function CreateTemporalDateTimeSlots(e,t,r,o,T,p,f,y,S,w,g){RejectDateTime(t,r,o,T,p,f,y,S,w),RejectDateTimeRange(t,r,o,T,p,f,y,S,w),CreateSlots(e),SetSlot(e,n,t),SetSlot(e,a,r),SetSlot(e,i,o),SetSlot(e,s,T),SetSlot(e,l,p),SetSlot(e,d,f),SetSlot(e,m,y),SetSlot(e,c,S),SetSlot(e,u,w),SetSlot(e,h,g)}function CreateTemporalDateTime(e,t,r,o,n,a,i,s,l,d=GetISO8601Calendar()){const m=GetIntrinsic("%Temporal.PlainDateTime%"),c=le(m.prototype);return CreateTemporalDateTimeSlots(c,e,t,r,o,n,a,i,s,l,d),c}function CreateTemporalMonthDaySlots(e,t,r,o,s){RejectISODate(s,t,r),RejectDateRange(s,t,r),CreateSlots(e),SetSlot(e,a,t),SetSlot(e,i,r),SetSlot(e,n,s),SetSlot(e,h,o),SetSlot(e,"slot-month-day-brand",!0)}function CreateTemporalMonthDay(e,t,r=GetISO8601Calendar(),o=1972){const n=GetIntrinsic("%Temporal.PlainMonthDay%"),a=le(n.prototype);return CreateTemporalMonthDaySlots(a,e,t,r,o),a}function CreateTemporalYearMonthSlots(e,t,r,o,s){RejectISODate(t,r,s),function RejectYearMonthRange(e,t){RejectToRange(e,-271821,275760),-271821===e?RejectToRange(t,4,12):275760===e&&RejectToRange(t,1,9)}(t,r),CreateSlots(e),SetSlot(e,n,t),SetSlot(e,a,r),SetSlot(e,i,s),SetSlot(e,h,o),SetSlot(e,"slot-year-month-brand",!0)}function CreateTemporalYearMonth(e,t,r=GetISO8601Calendar(),o=1){const n=GetIntrinsic("%Temporal.PlainYearMonth%"),a=le(n.prototype);return CreateTemporalYearMonthSlots(a,e,t,r,o),a}function CreateTemporalZonedDateTimeSlots(e,t,o,n){ValidateEpochNanoseconds(t),CreateSlots(e),SetSlot(e,r,t),SetSlot(e,p,o),SetSlot(e,h,n);const a=new(GetIntrinsic("%Temporal.Instant%"))(GetSlot(e,r));SetSlot(e,T,a)}function CreateTemporalZonedDateTime(e,t,r=GetISO8601Calendar()){const o=GetIntrinsic("%Temporal.ZonedDateTime%"),n=le(o.prototype);return CreateTemporalZonedDateTimeSlots(n,e,t,r),n}function GetISO8601Calendar(){return new(GetIntrinsic("%Temporal.Calendar%"))("iso8601")}function CalendarFields(e,t){let r=t;e.fields&&(r=e.fields(r));const o=[];for(const e of r){if("string"!=typeof e)throw new TypeError("bad return from calendar.fields()");_.call(o,e)}return o}function CalendarMergeFields(e,t,r){const o=e.mergeFields;if(!o)return{...t,...r};const n=Reflect.apply(o,e,[t,r]);if(!IsObject(n))throw new TypeError("bad return from calendar.mergeFields()");return n}function CalendarDateAdd(e,t,r,o,n){let a=n;void 0===a&&(a=e.dateAdd);const i=ce(a,e,[t,r,o]);if(!IsTemporalDate(i))throw new TypeError("invalid result");return i}function CalendarDateUntil(e,t,r,o,n){let a=n;void 0===a&&(a=e.dateUntil);const i=ce(a,e,[t,r,o]);if(!IsTemporalDuration(i))throw new TypeError("invalid result");return i}function CalendarYear(e,t){const r=e.year(t);if(void 0===r)throw new RangeError("calendar year result must be an integer");return ToIntegerThrowOnInfinity(r)}function CalendarMonth(e,t){const r=e.month(t);if(void 0===r)throw new RangeError("calendar month result must be a positive integer");return ToPositiveInteger(r)}function CalendarMonthCode(e,t){const r=e.monthCode(t);if(void 0===r)throw new RangeError("calendar monthCode result must be a string");return ToString(r)}function CalendarDay(e,t){const r=e.day(t);if(void 0===r)throw new RangeError("calendar day result must be a positive integer");return ToPositiveInteger(r)}function CalendarEra(e,t){let r=e.era(t);return void 0!==r&&(r=ToString(r)),r}function CalendarEraYear(e,t){let r=e.eraYear(t);return void 0!==r&&(r=ToIntegerThrowOnInfinity(r)),r}function CalendarDayOfWeek(e,t){return e.dayOfWeek(t)}function CalendarDayOfYear(e,t){return e.dayOfYear(t)}function CalendarWeekOfYear(e,t){return e.weekOfYear(t)}function CalendarDaysInWeek(e,t){return e.daysInWeek(t)}function CalendarDaysInMonth(e,t){return e.daysInMonth(t)}function CalendarDaysInYear(e,t){return e.daysInYear(t)}function CalendarMonthsInYear(e,t){return e.monthsInYear(t)}function CalendarInLeapYear(e,t){return e.inLeapYear(t)}function ToTemporalCalendar(e){let t=e;if(IsObject(t)){if(HasSlot(t,h))return GetSlot(t,h);if(!("calendar"in t))return t;if(t=t.calendar,IsObject(t)&&!("calendar"in t))return t}const r=ToString(t),o=GetIntrinsic("%Temporal.Calendar%");if(IsBuiltinCalendar(r))return new o(r);let n;try{({calendar:n}=ParseISODateTime(r))}catch{throw new RangeError(`Invalid calendar: ${r}`)}return n||(n="iso8601"),new o(n)}function GetTemporalCalendarWithISODefault(e){if(HasSlot(e,h))return GetSlot(e,h);const{calendar:t}=e;return void 0===t?GetISO8601Calendar():ToTemporalCalendar(t)}function CalendarEquals(e,t){if(e===t)return!0;return ToString(e)===ToString(t)}function ConsolidateCalendars(e,t){if(e===t)return t;const r=ToString(e),o=ToString(t);if(r===o||"iso8601"===r)return t;if("iso8601"===o)return e;throw new RangeError("irreconcilable calendars")}function CalendarDateFromFields(e,t,r){const o=e.dateFromFields(t,r);if(!IsTemporalDate(o))throw new TypeError("invalid result");return o}function CalendarYearMonthFromFields(e,t,r){const o=e.yearMonthFromFields(t,r);if(!IsTemporalYearMonth(o))throw new TypeError("invalid result");return o}function CalendarMonthDayFromFields(e,t,r){const o=e.monthDayFromFields(t,r);if(!IsTemporalMonthDay(o))throw new TypeError("invalid result");return o}function ToTemporalTimeZone(e){let t=e;if(IsObject(t)){if(IsTemporalZonedDateTime(t))return GetSlot(t,p);if(!("timeZone"in t))return t;if(t=t.timeZone,IsObject(t)&&!("timeZone"in t))return t}const r=ParseTemporalTimeZone(ToString(t));return new(GetIntrinsic("%Temporal.TimeZone%"))(r)}function TimeZoneEquals(e,t){if(e===t)return!0;return ToString(e)===ToString(t)}function TemporalDateTimeToDate(e){return CreateTemporalDate(GetSlot(e,n),GetSlot(e,a),GetSlot(e,i),GetSlot(e,h))}function TemporalDateTimeToTime(e){return new(GetIntrinsic("%Temporal.PlainTime%"))(GetSlot(e,s),GetSlot(e,l),GetSlot(e,d),GetSlot(e,m),GetSlot(e,c),GetSlot(e,u))}function GetOffsetNanosecondsFor(e,t){let r=e.getOffsetNanosecondsFor;if("function"!=typeof r)throw new TypeError("getOffsetNanosecondsFor not callable");const o=Reflect.apply(r,e,[t]);if("number"!=typeof o)throw new TypeError("bad return from getOffsetNanosecondsFor");if(!IsInteger(o)||K(o)>864e11)throw new RangeError("out-of-range return from getOffsetNanosecondsFor");return o}function BuiltinTimeZoneGetOffsetStringFor(e,t){return FormatTimeZoneOffsetString(GetOffsetNanosecondsFor(e,t))}function BuiltinTimeZoneGetPlainDateTimeFor(e,t,o){const n=GetSlot(t,r),a=GetOffsetNanosecondsFor(e,t);let{year:i,month:s,day:l,hour:d,minute:m,second:c,millisecond:u,microsecond:h,nanosecond:T}=GetISOPartsFromEpoch(n);return({year:i,month:s,day:l,hour:d,minute:m,second:c,millisecond:u,microsecond:h,nanosecond:T}=BalanceISODateTime(i,s,l,d,m,c,u,h,T+a)),CreateTemporalDateTime(i,s,l,d,m,c,u,h,T,o)}function BuiltinTimeZoneGetInstantFor(e,t,r){return DisambiguatePossibleInstants(GetPossibleInstantsFor(e,t),e,t,r)}function DisambiguatePossibleInstants(t,r,o,T){const p=GetIntrinsic("%Temporal.Instant%"),f=t.length;if(1===f)return t[0];if(f)switch(T){case"compatible":case"earlier":return t[0];case"later":return t[f-1];case"reject":throw new RangeError("multiple instants found")}const y=GetSlot(o,n),S=GetSlot(o,a),w=GetSlot(o,i),g=GetSlot(o,s),I=GetSlot(o,l),D=GetSlot(o,d),G=GetSlot(o,m),v=GetSlot(o,c),O=GetSlot(o,u),C=GetEpochFromISOParts(y,S,w,g,I,D,G,v,O);if(null===C)throw new RangeError("DateTime outside of supported range");const E=new p(e.default.subtract(C,we)),b=new p(e.default.add(C,we)),M=GetOffsetNanosecondsFor(r,E),R=GetOffsetNanosecondsFor(r,b)-M;switch(T){case"earlier":{const e=GetSlot(o,h),t=GetIntrinsic("%Temporal.PlainDateTime%"),n=AddDateTime(y,S,w,g,I,D,G,v,O,e,0,0,0,0,0,0,0,0,0,-R,void 0);return GetPossibleInstantsFor(r,new t(n.year,n.month,n.day,n.hour,n.minute,n.second,n.millisecond,n.microsecond,n.nanosecond,e))[0]}case"compatible":case"later":{const e=GetSlot(o,h),t=GetIntrinsic("%Temporal.PlainDateTime%"),n=AddDateTime(y,S,w,g,I,D,G,v,O,e,0,0,0,0,0,0,0,0,0,R,void 0),a=GetPossibleInstantsFor(r,new t(n.year,n.month,n.day,n.hour,n.minute,n.second,n.millisecond,n.microsecond,n.nanosecond,e));return a[a.length-1]}case"reject":throw new RangeError("no such instant found")}}function GetPossibleInstantsFor(e,t){const r=e.getPossibleInstantsFor(t),o=[];for(const e of r){if(!IsTemporalInstant(e))throw new TypeError("bad return from getPossibleInstantsFor");_.call(o,e)}return o}function ISOYearString(e){let t;if(e<0||e>9999){t=(e<0?"-":"+")+`000000${K(e)}`.slice(-6)}else t=`0000${e}`.slice(-4);return t}function ISODateTimePartString(e){return`00${e}`.slice(-2)}function FormatSecondsStringPart(e,t,r,o,n){if("minute"===n)return"";const a=`:${ISODateTimePartString(e)}`;let i,s=1e6*t+1e3*r+o;if("auto"===n){if(0===s)return a;for(i=`${s}`.padStart(9,"0");"0"===i[i.length-1];)i=i.slice(0,-1)}else{if(0===n)return a;i=`${s}`.padStart(9,"0").slice(0,n)}return`${a}.${i}`}function TemporalInstantToString(e,t,r){let o=t;if(void 0===o){o=new(GetIntrinsic("%Temporal.TimeZone%"))("UTC")}const h=BuiltinTimeZoneGetPlainDateTimeFor(o,e,GetISO8601Calendar()),T=ISOYearString(GetSlot(h,n)),p=ISODateTimePartString(GetSlot(h,a)),f=ISODateTimePartString(GetSlot(h,i)),y=ISODateTimePartString(GetSlot(h,s)),S=ISODateTimePartString(GetSlot(h,l)),w=FormatSecondsStringPart(GetSlot(h,d),GetSlot(h,m),GetSlot(h,c),GetSlot(h,u),r);let g="Z";if(void 0!==t){g=FormatISOTimeZoneOffsetString(GetOffsetNanosecondsFor(o,e))}return`${T}-${p}-${f}T${y}:${S}${w}${g}`}function TemporalDurationToString(t,r="auto",o){function formatNumber(t){return t<=ie?t.toString(10):e.default.BigInt(t).toString(10)}const n=GetSlot(t,f),a=GetSlot(t,y),i=GetSlot(t,S),s=GetSlot(t,w),l=GetSlot(t,g),d=GetSlot(t,I);let m=GetSlot(t,D),c=GetSlot(t,G),u=GetSlot(t,v),h=GetSlot(t,O);const T=DurationSign(n,a,i,s,l,d,m,c,u,h);if(o){const{unit:e,increment:t,roundingMode:r}=o;({seconds:m,milliseconds:c,microseconds:u,nanoseconds:h}=RoundDuration(0,0,0,0,0,0,m,c,u,h,t,e,r))}const p=[];n&&p.push(`${formatNumber(K(n))}Y`),a&&p.push(`${formatNumber(K(a))}M`),i&&p.push(`${formatNumber(K(i))}W`),s&&p.push(`${formatNumber(K(s))}D`);const C=[];l&&C.push(`${formatNumber(K(l))}H`),d&&C.push(`${formatNumber(K(d))}M`);const E=[];let b,M,R,Z,P=TotalDurationNanoseconds(0,0,0,m,c,u,h,0);({quotient:P,remainder:b}=divmod(P,pe)),({quotient:P,remainder:M}=divmod(P,pe)),({quotient:Z,remainder:R}=divmod(P,pe));const F=1e6*K(e.default.toNumber(R))+1e3*K(e.default.toNumber(M))+K(e.default.toNumber(b));let Y;if("auto"===r){if(0!==F)for(Y=`${F}`.padStart(9,"0");"0"===Y[Y.length-1];)Y=Y.slice(0,-1)}else 0!==r&&(Y=`${F}`.padStart(9,"0").slice(0,r));return Y&&E.unshift(".",Y),e.default.equal(Z,ue)&&!E.length&&"auto"===r||E.unshift(abs(Z).toString()),E.length&&C.push(`${E.join("")}S`),C.length&&C.unshift("T"),p.length||C.length?`${T<0?"-":""}P${p.join("")}${C.join("")}`:"PT0S"}function TemporalDateToString(e,t="auto"){return`${ISOYearString(GetSlot(e,n))}-${ISODateTimePartString(GetSlot(e,a))}-${ISODateTimePartString(GetSlot(e,i))}${FormatCalendarAnnotation(ToString(GetSlot(e,h)),t)}`}function TemporalDateTimeToString(e,t,r="auto",o){let T=GetSlot(e,n),p=GetSlot(e,a),f=GetSlot(e,i),y=GetSlot(e,s),S=GetSlot(e,l),w=GetSlot(e,d),g=GetSlot(e,m),I=GetSlot(e,c),D=GetSlot(e,u);if(o){const{unit:e,increment:t,roundingMode:r}=o;({year:T,month:p,day:f,hour:y,minute:S,second:w,millisecond:g,microsecond:I,nanosecond:D}=RoundISODateTime(T,p,f,y,S,w,g,I,D,t,e,r))}return`${ISOYearString(T)}-${ISODateTimePartString(p)}-${ISODateTimePartString(f)}T${ISODateTimePartString(y)}:${ISODateTimePartString(S)}${FormatSecondsStringPart(w,g,I,D,t)}${FormatCalendarAnnotation(ToString(GetSlot(e,h)),r)}`}function TemporalMonthDayToString(e,t="auto"){let r=`${ISODateTimePartString(GetSlot(e,a))}-${ISODateTimePartString(GetSlot(e,i))}`;const o=ToString(GetSlot(e,h));if("always"===t||"iso8601"!==o){r=`${ISOYearString(GetSlot(e,n))}-${r}`}const s=FormatCalendarAnnotation(o,t);return s&&(r+=s),r}function TemporalYearMonthToString(e,t="auto"){let r=`${ISOYearString(GetSlot(e,n))}-${ISODateTimePartString(GetSlot(e,a))}`;const o=ToString(GetSlot(e,h));if("always"===t||"iso8601"!==o){r+=`-${ISODateTimePartString(GetSlot(e,i))}`}const s=FormatCalendarAnnotation(o,t);return s&&(r+=s),r}function TemporalZonedDateTimeToString(e,t,o="auto",f="auto",y="auto",S){let w=GetSlot(e,T);if(S){const{unit:t,increment:o,roundingMode:n}=S,a=RoundInstant(GetSlot(e,r),o,t,n);w=new(GetIntrinsic("%Temporal.Instant%"))(a)}const g=GetSlot(e,p),I=BuiltinTimeZoneGetPlainDateTimeFor(g,w,GetISO8601Calendar());let D=`${ISOYearString(GetSlot(I,n))}-${ISODateTimePartString(GetSlot(I,a))}-${ISODateTimePartString(GetSlot(I,i))}T${ISODateTimePartString(GetSlot(I,s))}:${ISODateTimePartString(GetSlot(I,l))}${FormatSecondsStringPart(GetSlot(I,d),GetSlot(I,m),GetSlot(I,c),GetSlot(I,u),t)}`;if("never"!==y){D+=FormatISOTimeZoneOffsetString(GetOffsetNanosecondsFor(g,w))}"never"!==f&&(D+=`[${g}]`);return D+=FormatCalendarAnnotation(ToString(GetSlot(e,h)),o),D}function TestTimeZoneOffsetString(e){return Be.test(ae(e))}function ParseTimeZoneOffsetString(e){const t=Be.exec(ae(e));if(!t)throw new RangeError(`invalid time zone offset: ${e}`);return("-"===t[1]||"−"===t[1]?-1:1)*(1e9*(60*(60*+t[2]+ +(t[3]||0))+ +(t[4]||0))+ +((t[5]||0)+"000000000").slice(0,9))}function GetCanonicalTimeZoneIdentifier(e){if(TestTimeZoneOffsetString(e)){return FormatTimeZoneOffsetString(ParseTimeZoneOffsetString(e))}return getIntlDateTimeFormatEnUsForTimeZone(ae(e)).resolvedOptions().timeZone}function GetIANATimeZoneOffsetNanoseconds(t,r){const{year:o,month:n,day:a,hour:i,minute:s,second:l,millisecond:d,microsecond:m,nanosecond:c}=GetIANATimeZoneDateTimeParts(t,r),u=GetEpochFromISOParts(o,n,a,i,s,l,d,m,c);if(null===u)throw new RangeError("Date outside of supported range");return e.default.toNumber(e.default.subtract(u,t))}function FormatTimeZoneOffsetString(e){const t=e<0?"-":"+",r=K(e),o=r%1e9,n=Q(r/1e9)%60,a=Q(r/6e10)%60,i=ISODateTimePartString(Q(r/36e11)),s=ISODateTimePartString(a),l=ISODateTimePartString(n);let d="";if(o){let e=`${o}`.padStart(9,"0");for(;"0"===e[e.length-1];)e=e.slice(0,-1);d=`:${l}.${e}`}else n&&(d=`:${l}`);return`${t}${i}:${s}${d}`}function FormatISOTimeZoneOffsetString(t){let r=e.default.toNumber(RoundNumberToIncrement(e.default.BigInt(t),6e10,"halfExpand"));const o=r<0?"-":"+";r=K(r);const n=r/6e10%60;return`${o}${ISODateTimePartString(Q(r/36e11))}:${ISODateTimePartString(n)}`}function GetEpochFromISOParts(t,r,o,n,a,i,s,l,d){const m=new Date;m.setUTCHours(n,a,i,s),m.setUTCFullYear(t,r-1,o);const c=m.getTime();if(re(c))return null;let u=e.default.multiply(e.default.BigInt(c),fe);return u=e.default.add(u,e.default.multiply(e.default.BigInt(l),pe)),u=e.default.add(u,e.default.BigInt(d)),e.default.lessThan(u,ge)||e.default.greaterThan(u,Ie)?null:u}function GetISOPartsFromEpoch(t){const{quotient:r,remainder:o}=divmod(t,fe);let n=e.default.toNumber(r),a=e.default.toNumber(o);a<0&&(a+=1e6,n-=1);const i=Q(a/1e3)%1e3,s=a%1e3,l=new Date(n);return{epochMilliseconds:n,year:l.getUTCFullYear(),month:l.getUTCMonth()+1,day:l.getUTCDate(),hour:l.getUTCHours(),minute:l.getUTCMinutes(),second:l.getUTCSeconds(),millisecond:l.getUTCMilliseconds(),microsecond:i,nanosecond:s}}function GetIANATimeZoneDateTimeParts(e,t){const{epochMilliseconds:r,millisecond:o,microsecond:n,nanosecond:a}=GetISOPartsFromEpoch(e),{year:i,month:s,day:l,hour:d,minute:m,second:c}=function GetFormatterParts(e,t){const r=getIntlDateTimeFormatEnUsForTimeZone(e);return function parseFromEnUsFormat(e){const t=e.split(/[^\w]+/);if(7!==t.length)throw new RangeError(`expected 7 parts in "${e}`);const r=+t[0],o=+t[1];let n=+t[2];const a=t[3].toUpperCase();if("B"===a||"BC"===a)n=1-n;else if("A"!==a&&"AD"!==a)throw new RangeError(`Unknown era ${a} in "${e}`);let i=+t[4];24===i&&(i=0);const s=+t[5],l=+t[6];if(!(oe(n)&&oe(r)&&oe(o)&&oe(i)&&oe(s)&&oe(l)))throw new RangeError(`Invalid number in "${e}`);return{year:n,month:r,day:o,hour:i,minute:s,second:l}}(r.format(new Date(t)))}(t,r);return BalanceISODateTime(i,s,l,d,m,c,o,n,a)}function maxJSBI(t,r){return e.default.lessThan(t,r)?r:t}function afterLatestPossibleTzdbRuleChange(){return e.default.add($e(),Ge)}function GetIANATimeZonePreviousTransition(t,r){const o=afterLatestPossibleTzdbRuleChange(),n=e.default.greaterThan(t,o),a=n?e.default.subtract(t,ve):De;let i=e.default.subtract(t,he);const s=GetIANATimeZoneOffsetNanoseconds(i,r);let l=i,d=s;for(;s===d&&e.default.greaterThan(i,a);)l=e.default.subtract(i,Oe),d=GetIANATimeZoneOffsetNanoseconds(l,r),s===d&&(i=l);if(s===d){if(n){return GetIANATimeZonePreviousTransition(e.default.subtract(o,we),r)}return null}return bisect((e=>GetIANATimeZoneOffsetNanoseconds(e,r)),l,i,d,s)}function LeapYear(e){if(void 0===e)return!1;return e%4==0&&(!(e%100==0)||e%400==0)}function ISODaysInMonth(e,t){return{standard:[31,28,31,30,31,30,31,31,30,31,30,31],leapyear:[31,29,31,30,31,30,31,31,30,31,30,31]}[LeapYear(e)?"leapyear":"standard"][t-1]}function DayOfWeek(e,t,r){const o=t+(t<3?10:-2),n=e-(t<3?1:0),a=Q(n/100),i=n-100*a,s=(r+Q(2.6*o-.2)+(i+Q(i/4))+(Q(a/4)-2*a))%7;return s+(s<=0?7:0)}function DayOfYear(e,t,r){let o=r;for(let r=t-1;r>0;r--)o+=ISODaysInMonth(e,r);return o}function DurationSign(e,t,r,o,n,a,i,s,l,d){for(const m of[e,t,r,o,n,a,i,s,l,d])if(0!==m)return m<0?-1:1;return 0}function BalanceISOYearMonth(e,t){let r=e,o=t;if(!oe(r)||!oe(o))throw new RangeError("infinity is out of range");return o-=1,r+=Q(o/12),o%=12,o<0&&(o+=12),o+=1,{year:r,month:o}}function BalanceISODate(e,t,r){let o=e,n=t,a=r;if(!oe(a))throw new RangeError("infinity is out of range");({year:o,month:n}=BalanceISOYearMonth(o,n));let i=0,s=n>2?o:o-1;for(;i=LeapYear(s)?366:365,a<-i;)o-=1,s-=1,a+=i;for(s+=1;i=LeapYear(s)?366:365,a>i;)o+=1,s+=1,a-=i;for(;a<1;)({year:o,month:n}=BalanceISOYearMonth(o,n-1)),a+=ISODaysInMonth(o,n);for(;a>ISODaysInMonth(o,n);)a-=ISODaysInMonth(o,n),({year:o,month:n}=BalanceISOYearMonth(o,n+1));return{year:o,month:n,day:a}}function BalanceISODateTime(e,t,r,o,n,a,i,s,l){const{deltaDays:d,hour:m,minute:c,second:u,millisecond:h,microsecond:T,nanosecond:p}=BalanceTime(o,n,a,i,s,l),{year:f,month:y,day:S}=BalanceISODate(e,t,r+d);return{year:f,month:y,day:S,hour:m,minute:c,second:u,millisecond:h,microsecond:T,nanosecond:p}}function BalanceTime(e,t,r,o,n,a){let i=e,s=t,l=r,d=o,m=n,c=a;if(!(oe(i)&&oe(s)&&oe(l)&&oe(d)&&oe(m)&&oe(c)))throw new RangeError("infinity is out of range");m+=Q(c/1e3),c=NonNegativeModulo(c,1e3),d+=Q(m/1e3),m=NonNegativeModulo(m,1e3),l+=Q(d/1e3),d=NonNegativeModulo(d,1e3),s+=Q(l/60),l=NonNegativeModulo(l,60),i+=Q(s/60),s=NonNegativeModulo(s,60);const u=Q(i/24);return i=NonNegativeModulo(i,24),{deltaDays:u,hour:i,minute:s,second:l,millisecond:d,microsecond:m,nanosecond:c}}function TotalDurationNanoseconds(t,r,o,n,a,i,s,l){const d=e.default.BigInt(t);let m=e.default.BigInt(s);0!==t&&(m=e.default.subtract(e.default.BigInt(s),e.default.BigInt(l)));const c=e.default.add(e.default.BigInt(r),e.default.multiply(d,e.default.BigInt(24))),u=e.default.add(e.default.BigInt(o),e.default.multiply(c,Te)),h=e.default.add(e.default.BigInt(n),e.default.multiply(u,Te)),T=e.default.add(e.default.BigInt(a),e.default.multiply(h,pe)),p=e.default.add(e.default.BigInt(i),e.default.multiply(T,pe));return e.default.add(e.default.BigInt(m),e.default.multiply(p,pe))}function NanosecondsToDays(t,o){const f=GetIntrinsic("%Temporal.Instant%"),y=ee(e.default.toNumber(t));let S=e.default.BigInt(t),w=864e11;if(0===y)return{days:0,nanoseconds:ue,dayLengthNs:w};if(!IsTemporalZonedDateTime(o)){let t;return({quotient:t,remainder:S}=divmod(S,e.default.BigInt(w))),{days:e.default.toNumber(t),nanoseconds:S,dayLengthNs:w}}const g=GetSlot(o,r),I=GetSlot(o,T),D=e.default.add(g,S),G=new f(D),v=GetSlot(o,p),O=GetSlot(o,h),C=BuiltinTimeZoneGetPlainDateTimeFor(v,I,O),E=BuiltinTimeZoneGetPlainDateTimeFor(v,G,O);let{days:b}=DifferenceISODateTime(GetSlot(C,n),GetSlot(C,a),GetSlot(C,i),GetSlot(C,s),GetSlot(C,l),GetSlot(C,d),GetSlot(C,m),GetSlot(C,c),GetSlot(C,u),GetSlot(E,n),GetSlot(E,a),GetSlot(E,i),GetSlot(E,s),GetSlot(E,l),GetSlot(E,d),GetSlot(E,m),GetSlot(E,c),GetSlot(E,u),O,"day",le(null)),M=AddZonedDateTime(I,v,O,0,0,0,b,0,0,0,0,0,0);if(1===y)for(;b>0&&e.default.greaterThan(M,D);)--b,M=AddZonedDateTime(I,v,O,0,0,0,b,0,0,0,0,0,0);S=e.default.subtract(D,M);let R=!1,Z=new f(M);do{const t=AddZonedDateTime(Z,v,O,0,0,0,y,0,0,0,0,0,0),o=GetSlot(Z,r);w=e.default.toNumber(e.default.subtract(t,o)),R=e.default.greaterThan(e.default.multiply(e.default.subtract(S,e.default.BigInt(w)),e.default.BigInt(y)),ue),R&&(S=e.default.subtract(S,e.default.BigInt(w)),Z=new f(t),b+=y)}while(R);return{days:b,nanoseconds:S,dayLengthNs:K(w)}}function BalanceDuration(t,o,n,a,i,s,l,d,m){let c,u,f,y,S,w,g=t;if(IsTemporalZonedDateTime(m)){const t=AddZonedDateTime(GetSlot(m,T),GetSlot(m,p),GetSlot(m,h),0,0,0,g,o,n,a,i,s,l),d=GetSlot(m,r);c=e.default.subtract(t,d)}else c=TotalDurationNanoseconds(g,o,n,a,i,s,l,0);"year"===d||"month"===d||"week"===d||"day"===d?({days:g,nanoseconds:c}=NanosecondsToDays(c,m)):g=0;const I=e.default.lessThan(c,ue)?-1:1;switch(c=abs(c),u=f=y=S=w=ue,d){case"year":case"month":case"week":case"day":case"hour":({quotient:u,remainder:c}=divmod(c,pe)),({quotient:f,remainder:u}=divmod(u,pe)),({quotient:y,remainder:f}=divmod(f,pe)),({quotient:S,remainder:y}=divmod(y,Te)),({quotient:w,remainder:S}=divmod(S,Te));break;case"minute":({quotient:u,remainder:c}=divmod(c,pe)),({quotient:f,remainder:u}=divmod(u,pe)),({quotient:y,remainder:f}=divmod(f,pe)),({quotient:S,remainder:y}=divmod(y,Te));break;case"second":({quotient:u,remainder:c}=divmod(c,pe)),({quotient:f,remainder:u}=divmod(u,pe)),({quotient:y,remainder:f}=divmod(f,pe));break;case"millisecond":({quotient:u,remainder:c}=divmod(c,pe)),({quotient:f,remainder:u}=divmod(u,pe));break;case"microsecond":({quotient:u,remainder:c}=divmod(c,pe));break;case"nanosecond":break;default:throw new Error("assert not reached")}return{days:g,hours:e.default.toNumber(w)*I,minutes:e.default.toNumber(S)*I,seconds:e.default.toNumber(y)*I,milliseconds:e.default.toNumber(f)*I,microseconds:e.default.toNumber(u)*I,nanoseconds:e.default.toNumber(c)*I}}function UnbalanceDurationRelative(e,t,r,o,n,a){let i=e,s=t,l=r,d=o;const m=GetIntrinsic("%Temporal.Duration%"),c=DurationSign(i,s,l,d,0,0,0,0,0,0);let u,T;a&&(T=ToTemporalDate(a),u=GetSlot(T,h));const p=new m(c),f=new m(0,c),S=new m(0,0,c);switch(n){case"year":break;case"month":{if(!u)throw new RangeError("a starting point is required for months balancing");const e=u.dateAdd,t=u.dateUntil;let r=T;for(;K(i)>0;){const o=CalendarDateAdd(u,r,p,void 0,e),n=le(null);n.largestUnit="month";const a=GetSlot(CalendarDateUntil(u,r,o,n,t),y);r=o,s+=a,i-=c}}break;case"week":if(!u)throw new RangeError("a starting point is required for weeks balancing");for(;K(i)>0;){let e;({relativeTo:T,days:e}=MoveRelativeDate(u,T,p)),d+=e,i-=c}for(;K(s)>0;){let e;({relativeTo:T,days:e}=MoveRelativeDate(u,T,f)),d+=e,s-=c}break;default:for(;K(i)>0;){if(!u)throw new RangeError("a starting point is required for balancing calendar units");let e;({relativeTo:T,days:e}=MoveRelativeDate(u,T,p)),d+=e,i-=c}for(;K(s)>0;){if(!u)throw new RangeError("a starting point is required for balancing calendar units");let e;({relativeTo:T,days:e}=MoveRelativeDate(u,T,f)),d+=e,s-=c}for(;K(l)>0;){if(!u)throw new RangeError("a starting point is required for balancing calendar units");let e;({relativeTo:T,days:e}=MoveRelativeDate(u,T,S)),d+=e,l-=c}}return{years:i,months:s,weeks:l,days:d}}function CalculateOffsetShift(e,t,r,o,n){if(IsTemporalZonedDateTime(e)){const a=GetSlot(e,T),i=GetSlot(e,p),s=GetSlot(e,h),l=GetOffsetNanosecondsFor(i,a),d=AddZonedDateTime(a,i,s,t,r,o,n,0,0,0,0,0,0);return GetOffsetNanosecondsFor(i,new(GetIntrinsic("%Temporal.Instant%"))(d))-l}return 0}function CreateNegatedTemporalDuration(e){return new(GetIntrinsic("%Temporal.Duration%"))(-GetSlot(e,f),-GetSlot(e,y),-GetSlot(e,S),-GetSlot(e,w),-GetSlot(e,g),-GetSlot(e,I),-GetSlot(e,D),-GetSlot(e,G),-GetSlot(e,v),-GetSlot(e,O))}function ConstrainToRange(e,t,r){return V(r,X(t,e))}function ConstrainISODate(e,t,r){const o=ConstrainToRange(t,1,12);return{year:e,month:o,day:ConstrainToRange(r,1,ISODaysInMonth(e,o))}}function RejectToRange(e,t,r){if(e<t||e>r)throw new RangeError(`value out of range: ${t} <= ${e} <= ${r}`)}function RejectISODate(e,t,r){RejectToRange(t,1,12),RejectToRange(r,1,ISODaysInMonth(e,t))}function RejectDateRange(e,t,r){RejectDateTimeRange(e,t,r,12,0,0,0,0,0)}function RejectTime(e,t,r,o,n,a){RejectToRange(e,0,23),RejectToRange(t,0,59),RejectToRange(r,0,59),RejectToRange(o,0,999),RejectToRange(n,0,999),RejectToRange(a,0,999)}function RejectDateTime(e,t,r,o,n,a,i,s,l){RejectISODate(e,t,r),RejectTime(o,n,a,i,s,l)}function RejectDateTimeRange(e,t,r,o,n,a,i,s,l){if(RejectToRange(e,-271821,275760),-271821===e&&null==GetEpochFromISOParts(e,t,r+1,o,n,a,i,s,l-1)||275760===e&&null==GetEpochFromISOParts(e,t,r-1,o,n,a,i,s,l+1))throw new RangeError("DateTime outside of supported range")}function ValidateEpochNanoseconds(t){if(e.default.lessThan(t,ge)||e.default.greaterThan(t,Ie))throw new RangeError("Instant outside of supported range")}function RejectDuration(e,t,r,o,n,a,i,s,l,d){const m=DurationSign(e,t,r,o,n,a,i,s,l,d);for(const c of[e,t,r,o,n,a,i,s,l,d]){if(!oe(c))throw new RangeError("infinite values not allowed as duration fields");const e=ee(c);if(0!==e&&e!==m)throw new RangeError("mixed-sign values not allowed as duration fields")}}function DifferenceISODate(e,t,r,o,n,a,i){switch(i){case"year":case"month":{const s=-CompareISODate(e,t,r,o,n,a);if(0===s)return{years:0,months:0,weeks:0,days:0};const l={year:e,month:t,day:r},d={year:o,month:n,day:a};let m=d.year-l.year,c=AddISODate(e,t,r,m,0,0,0,"constrain"),u=-CompareISODate(c.year,c.month,c.day,o,n,a);if(0===u)return"year"===i?{years:m,months:0,weeks:0,days:0}:{years:0,months:12*m,weeks:0,days:0};let h=d.month-l.month;if(u!==s&&(m-=s,h+=12*s),c=AddISODate(e,t,r,m,h,0,0,"constrain"),u=-CompareISODate(c.year,c.month,c.day,o,n,a),0===u)return"year"===i?{years:m,months:h,weeks:0,days:0}:{years:0,months:h+12*m,weeks:0,days:0};u!==s&&(h-=s,h===-s&&(m-=s,h=11*s),c=AddISODate(e,t,r,m,h,0,0,"constrain"));let T=0;return T=c.month===d.month?d.day-c.day:s<0?-c.day-(ISODaysInMonth(d.year,d.month)-d.day):d.day+(ISODaysInMonth(c.year,c.month)-c.day),"month"===i&&(h+=12*m,m=0),{years:m,months:h,weeks:0,days:T}}case"week":case"day":{let s,l,d;CompareISODate(e,t,r,o,n,a)<0?(l={year:e,month:t,day:r},s={year:o,month:n,day:a},d=1):(l={year:o,month:n,day:a},s={year:e,month:t,day:r},d=-1);let m=DayOfYear(s.year,s.month,s.day)-DayOfYear(l.year,l.month,l.day);for(let e=l.year;e<s.year;++e)m+=LeapYear(e)?366:365;let c=0;return"week"===i&&(c=Q(m/7),m%=7),c*=d,m*=d,{years:0,months:0,weeks:c,days:m}}default:throw new Error("assert not reached")}}function DifferenceTime(e,t,r,o,n,a,i,s,l,d,m,c){let u=i-e,h=s-t,T=l-r,p=d-o,f=m-n,y=c-a;const S=DurationSign(0,0,0,0,u,h,T,p,f,y);u*=S,h*=S,T*=S,p*=S,f*=S,y*=S;let w=0;if(({deltaDays:w,hour:u,minute:h,second:T,millisecond:p,microsecond:f,nanosecond:y}=BalanceTime(u,h,T,p,f,y)),0!=w)throw new Error("assertion failure in DifferenceTime: _bt_.[[Days]] should be 0");return u*=S,h*=S,T*=S,p*=S,f*=S,y*=S,{hours:u,minutes:h,seconds:T,milliseconds:p,microseconds:f,nanoseconds:y}}function DifferenceInstant(t,r,o,n,a){const i=e.default.subtract(r,t),s=e.default.remainder(i,e.default.BigInt(864e11)),l=e.default.subtract(i,s),d=RoundNumberToIncrement(s,Ne[n]*o,a),m=e.default.add(l,d),c=e.default.toNumber(e.default.remainder(m,pe)),u=e.default.toNumber(e.default.remainder(e.default.divide(m,pe),pe)),h=e.default.toNumber(e.default.remainder(e.default.divide(m,fe),pe));return{seconds:e.default.toNumber(e.default.divide(m,ye)),milliseconds:h,microseconds:u,nanoseconds:c}}function DifferenceISODateTime(e,t,r,o,n,a,i,s,l,d,m,c,u,h,T,p,f,y,S,w,g){let I=e,D=t,G=r,{hours:v,minutes:O,seconds:C,milliseconds:E,microseconds:b,nanoseconds:M}=DifferenceTime(o,n,a,i,s,l,u,h,T,p,f,y);const R=DurationSign(0,0,0,0,v,O,C,E,b,M);CompareISODate(d,m,c,I,D,G)===-R&&(({year:I,month:D,day:G}=BalanceISODate(I,D,G-R)),({hours:v,minutes:O,seconds:C,milliseconds:E,microseconds:b,nanoseconds:M}=BalanceDuration(-R,v,O,C,E,b,M,w)));const Z=CreateTemporalDate(I,D,G,S),P=CreateTemporalDate(d,m,c,S),F=MergeLargestUnitOption(g,LargerOfTwoTemporalUnits("day",w));let{years:Y,months:j,weeks:$,days:B}=CalendarDateUntil(S,Z,P,F);return({days:B,hours:v,minutes:O,seconds:C,milliseconds:E,microseconds:b,nanoseconds:M}=BalanceDuration(B,v,O,C,E,b,M,w)),{years:Y,months:j,weeks:$,days:B,hours:v,minutes:O,seconds:C,milliseconds:E,microseconds:b,nanoseconds:M}}function DifferenceZonedDateTime(t,r,o,h,T,p){const f=e.default.subtract(r,t);if(e.default.equal(f,ue))return{years:0,months:0,weeks:0,days:0,hours:0,minutes:0,seconds:0,milliseconds:0,microseconds:0,nanoseconds:0};const y=GetIntrinsic("%Temporal.Instant%"),S=new y(t),w=new y(r),g=BuiltinTimeZoneGetPlainDateTimeFor(o,S,h),I=BuiltinTimeZoneGetPlainDateTimeFor(o,w,h);let{years:D,months:G,weeks:v,days:O}=DifferenceISODateTime(GetSlot(g,n),GetSlot(g,a),GetSlot(g,i),GetSlot(g,s),GetSlot(g,l),GetSlot(g,d),GetSlot(g,m),GetSlot(g,c),GetSlot(g,u),GetSlot(I,n),GetSlot(I,a),GetSlot(I,i),GetSlot(I,s),GetSlot(I,l),GetSlot(I,d),GetSlot(I,m),GetSlot(I,c),GetSlot(I,u),h,T,p);const C=AddZonedDateTime(S,o,h,D,G,v,0,0,0,0,0,0,0);let E=e.default.subtract(r,C);const b=CreateTemporalZonedDateTime(C,o,h);({nanoseconds:E,days:O}=NanosecondsToDays(E,b));const{hours:M,minutes:R,seconds:Z,milliseconds:P,microseconds:F,nanoseconds:Y}=BalanceDuration(0,0,0,0,0,0,e.default.toNumber(E),"hour");return{years:D,months:G,weeks:v,days:O,hours:M,minutes:R,seconds:Z,milliseconds:P,microseconds:F,nanoseconds:Y}}function DifferenceTemporalInstant(e,t,o,n){const a=ToTemporalInstant(o);let i,s;[i,s]="until"===e?[t,a]:[a,t];const l=GetOptionsObject(n),d=GetTemporalUnit(l,"smallestUnit","time","nanosecond"),m=LargerOfTwoTemporalUnits("second",d);let c=GetTemporalUnit(l,"largestUnit","time","auto");if("auto"===c&&(c=m),LargerOfTwoTemporalUnits(c,d)!==c)throw new RangeError(`largestUnit ${c} cannot be smaller than smallestUnit ${d}`);const u=ToTemporalRoundingMode(l,"trunc"),h=ToTemporalRoundingIncrement(l,{hour:24,minute:60,second:60,millisecond:1e3,microsecond:1e3,nanosecond:1e3}[d],!1),T=GetSlot(i,r),p=GetSlot(s,r);let f,y,{seconds:S,milliseconds:w,microseconds:g,nanoseconds:I}=DifferenceInstant(T,p,h,d,u);({hours:f,minutes:y,seconds:S,milliseconds:w,microseconds:g,nanoseconds:I}=BalanceDuration(0,0,0,S,w,g,I,c));return new(GetIntrinsic("%Temporal.Duration%"))(0,0,0,0,f,y,S,w,g,I)}function DifferenceTemporalPlainDate(e,t,r,o){const n="since"===e?-1:1,a=ToTemporalDate(r),i=GetSlot(t,h),s=GetSlot(a,h),l=ToString(i),d=ToString(s);if(l!==d)throw new RangeError(`cannot compute difference between dates of ${l} and ${d} calendars`);const m=GetOptionsObject(o),c=GetTemporalUnit(m,"smallestUnit","date","day"),u=LargerOfTwoTemporalUnits("day",c);let T=GetTemporalUnit(m,"largestUnit","date","auto");if("auto"===T&&(T=u),LargerOfTwoTemporalUnits(T,c)!==T)throw new RangeError(`largestUnit ${T} cannot be smaller than smallestUnit ${c}`);let p=ToTemporalRoundingMode(m,"trunc");"since"===e&&(p=NegateTemporalRoundingMode(p));const f=ToTemporalRoundingIncrement(m,void 0,!1),y=MergeLargestUnitOption(m,T);let{years:S,months:w,weeks:g,days:I}=CalendarDateUntil(i,t,a,y);"day"===c&&1===f||({years:S,months:w,weeks:g,days:I}=RoundDuration(S,w,g,I,0,0,0,0,0,0,f,c,p,t));return new(GetIntrinsic("%Temporal.Duration%"))(n*S,n*w,n*g,n*I,0,0,0,0,0,0)}function DifferenceTemporalPlainDateTime(e,t,r,o){const T="since"===e?-1:1,p=ToTemporalDateTime(r),f=GetSlot(t,h),y=GetSlot(p,h),S=ToString(f),w=ToString(y);if(S!==w)throw new RangeError(`cannot compute difference between dates of ${S} and ${w} calendars`);const g=GetOptionsObject(o),I=GetTemporalUnit(g,"smallestUnit","datetime","nanosecond"),D=LargerOfTwoTemporalUnits("day",I);let G=GetTemporalUnit(g,"largestUnit","datetime","auto");if("auto"===G&&(G=D),LargerOfTwoTemporalUnits(G,I)!==G)throw new RangeError(`largestUnit ${G} cannot be smaller than smallestUnit ${I}`);let v=ToTemporalRoundingMode(g,"trunc");"since"===e&&(v=NegateTemporalRoundingMode(v));const O=ToTemporalDateTimeRoundingIncrement(g,I);let{years:C,months:E,weeks:b,days:M,hours:R,minutes:Z,seconds:P,milliseconds:F,microseconds:Y,nanoseconds:j}=DifferenceISODateTime(GetSlot(t,n),GetSlot(t,a),GetSlot(t,i),GetSlot(t,s),GetSlot(t,l),GetSlot(t,d),GetSlot(t,m),GetSlot(t,c),GetSlot(t,u),GetSlot(p,n),GetSlot(p,a),GetSlot(p,i),GetSlot(p,s),GetSlot(p,l),GetSlot(p,d),GetSlot(p,m),GetSlot(p,c),GetSlot(p,u),f,G,g);const $=TemporalDateTimeToDate(t);({years:C,months:E,weeks:b,days:M,hours:R,minutes:Z,seconds:P,milliseconds:F,microseconds:Y,nanoseconds:j}=RoundDuration(C,E,b,M,R,Z,P,F,Y,j,O,I,v,$)),({days:M,hours:R,minutes:Z,seconds:P,milliseconds:F,microseconds:Y,nanoseconds:j}=BalanceDuration(M,R,Z,P,F,Y,j,G));return new(GetIntrinsic("%Temporal.Duration%"))(T*C,T*E,T*b,T*M,T*R,T*Z,T*P,T*F,T*Y,T*j)}function DifferenceTemporalPlainTime(e,t,r,o){const n="since"===e?-1:1,a=ToTemporalTime(r),i=GetOptionsObject(o);let h=GetTemporalUnit(i,"largestUnit","time","auto");"auto"===h&&(h="hour");const T=GetTemporalUnit(i,"smallestUnit","time","nanosecond");if(LargerOfTwoTemporalUnits(h,T)!==h)throw new RangeError(`largestUnit ${h} cannot be smaller than smallestUnit ${T}`);let p=ToTemporalRoundingMode(i,"trunc");"since"===e&&(p=NegateTemporalRoundingMode(p));const f=ToTemporalRoundingIncrement(i,{hour:24,minute:60,second:60,millisecond:1e3,microsecond:1e3,nanosecond:1e3}[T],!1);let{hours:y,minutes:S,seconds:w,milliseconds:g,microseconds:I,nanoseconds:D}=DifferenceTime(GetSlot(t,s),GetSlot(t,l),GetSlot(t,d),GetSlot(t,m),GetSlot(t,c),GetSlot(t,u),GetSlot(a,s),GetSlot(a,l),GetSlot(a,d),GetSlot(a,m),GetSlot(a,c),GetSlot(a,u));({hours:y,minutes:S,seconds:w,milliseconds:g,microseconds:I,nanoseconds:D}=RoundDuration(0,0,0,0,y,S,w,g,I,D,f,T,p)),({hours:y,minutes:S,seconds:w,milliseconds:g,microseconds:I,nanoseconds:D}=BalanceDuration(0,y,S,w,g,I,D,h));return new(GetIntrinsic("%Temporal.Duration%"))(0,0,0,0,n*y,n*S,n*w,n*g,n*I,n*D)}function DifferenceTemporalPlainYearMonth(e,t,r,o){const n="since"===e?-1:1,a=ToTemporalYearMonth(r),i=GetSlot(t,h),s=GetSlot(a,h),l=ToString(i),d=ToString(s);if(l!==d)throw new RangeError(`cannot compute difference between months of ${l} and ${d} calendars`);const m=GetOptionsObject(o),c=Me.reduce(((e,[t,r,o])=>("date"===o&&"week"!==r&&"day"!==r&&e.push(r,t),e)),[]),u=GetTemporalUnit(m,"smallestUnit","date","month");if("week"===u||"day"===u)throw new RangeError(`smallestUnit must be one of ${c.join(", ")}, not ${u}`);let T=GetTemporalUnit(m,"largestUnit","date","auto");if("week"===T||"day"===T)throw new RangeError(`largestUnit must be one of ${c.join(", ")}, not ${T}`);if("auto"===T&&(T="year"),LargerOfTwoTemporalUnits(T,u)!==T)throw new RangeError(`largestUnit ${T} cannot be smaller than smallestUnit ${u}`);let p=ToTemporalRoundingMode(m,"trunc");"since"===e&&(p=NegateTemporalRoundingMode(p));const f=ToTemporalRoundingIncrement(m,void 0,!1),y=CalendarFields(i,["monthCode","year"]),S=PrepareTemporalFields(a,y,[]);S.day=1;const w=PrepareTemporalFields(t,y,[]);w.day=1;const g=CalendarDateFromFields(i,S),I=CalendarDateFromFields(i,w),D=MergeLargestUnitOption(m,T);let{years:G,months:v}=CalendarDateUntil(i,I,g,D);"month"===u&&1===f||({years:G,months:v}=RoundDuration(G,v,0,0,0,0,0,0,0,0,f,u,p,I));return new(GetIntrinsic("%Temporal.Duration%"))(n*G,n*v,0,0,0,0,0,0,0,0)}function DifferenceTemporalZonedDateTime(e,t,o,n){const a="since"===e?-1:1,i=ToTemporalZonedDateTime(o),s=GetSlot(t,h),l=GetSlot(i,h),d=ToString(s),m=ToString(l);if(d!==m)throw new RangeError(`cannot compute difference between dates of ${d} and ${m} calendars`);const c=GetOptionsObject(n),u=GetTemporalUnit(c,"smallestUnit","datetime","nanosecond"),T=LargerOfTwoTemporalUnits("hour",u);let f=GetTemporalUnit(c,"largestUnit","datetime","auto");if("auto"===f&&(f=T),LargerOfTwoTemporalUnits(f,u)!==f)throw new RangeError(`largestUnit ${f} cannot be smaller than smallestUnit ${u}`);let y=ToTemporalRoundingMode(c,"trunc");"since"===e&&(y=NegateTemporalRoundingMode(y));const S=ToTemporalDateTimeRoundingIncrement(c,u),w=GetSlot(t,r),g=GetSlot(i,r);let I,D,G,v,O,C,E,b,M,R;if("year"!==f&&"month"!==f&&"week"!==f&&"day"!==f)I=0,D=0,G=0,v=0,({seconds:E,milliseconds:b,microseconds:M,nanoseconds:R}=DifferenceInstant(w,g,S,u,y)),({hours:O,minutes:C,seconds:E,milliseconds:b,microseconds:M,nanoseconds:R}=BalanceDuration(0,0,0,E,b,M,R,f));else{const e=GetSlot(t,p);if(!TimeZoneEquals(e,GetSlot(i,p)))throw new RangeError("When calculating difference between time zones, largestUnit must be 'hours' or smaller because day lengths can vary between time zones due to DST or time zone offset changes.");const r=MergeLargestUnitOption(c,f);({years:I,months:D,weeks:G,days:v,hours:O,minutes:C,seconds:E,milliseconds:b,microseconds:M,nanoseconds:R}=DifferenceZonedDateTime(w,g,e,s,f,r)),({years:I,months:D,weeks:G,days:v,hours:O,minutes:C,seconds:E,milliseconds:b,microseconds:M,nanoseconds:R}=RoundDuration(I,D,G,v,O,C,E,b,M,R,S,u,y,t)),({years:I,months:D,weeks:G,days:v,hours:O,minutes:C,seconds:E,milliseconds:b,microseconds:M,nanoseconds:R}=AdjustRoundedDurationDays(I,D,G,v,O,C,E,b,M,R,S,u,y,t))}return new(GetIntrinsic("%Temporal.Duration%"))(a*I,a*D,a*G,a*v,a*O,a*C,a*E,a*b,a*M,a*R)}function AddISODate(e,t,r,o,n,a,i,s){let l=e,d=t,m=r,c=a,u=i;return l+=o,d+=n,({year:l,month:d}=BalanceISOYearMonth(l,d)),({year:l,month:d,day:m}=RegulateISODate(l,d,m,s)),u+=7*c,m+=u,({year:l,month:d,day:m}=BalanceISODate(l,d,m)),{year:l,month:d,day:m}}function AddTime(e,t,r,o,n,a,i,s,l,d,m,c){let u=e,h=t,T=r,p=o,f=n,y=a;u+=i,h+=s,T+=l,p+=d,f+=m,y+=c;let S=0;return({deltaDays:S,hour:u,minute:h,second:T,millisecond:p,microsecond:f,nanosecond:y}=BalanceTime(u,h,T,p,f,y)),{deltaDays:S,hour:u,minute:h,second:T,millisecond:p,microsecond:f,nanosecond:y}}function AddDuration(e,t,o,n,a,i,s,l,d,m,c,u,f,y,S,w,g,I,D,G,v){const O=LargerOfTwoTemporalUnits(DefaultTemporalLargestUnit(e,t,o,n,a,i,s,l,d,m),DefaultTemporalLargestUnit(c,u,f,y,S,w,g,I,D,G));let C,E,b,M,R,Z,P,F,Y,j;if(v)if(IsTemporalDate(v)){const r=GetIntrinsic("%Temporal.Duration%"),T=GetSlot(v,h),p=new r(e,t,o,n,0,0,0,0,0,0),$=new r(c,u,f,y,0,0,0,0,0,0),B=T.dateAdd,N=CalendarDateAdd(T,v,p,void 0,B),k=CalendarDateAdd(T,N,$,void 0,B),A=LargerOfTwoTemporalUnits("day",O),U=le(null);U.largestUnit=A,({years:C,months:E,weeks:b,days:M}=CalendarDateUntil(T,v,k,U)),({days:M,hours:R,minutes:Z,seconds:P,milliseconds:F,microseconds:Y,nanoseconds:j}=BalanceDuration(M,a+S,i+w,s+g,l+I,d+D,m+G,O))}else{const $=GetIntrinsic("%Temporal.Instant%"),B=GetSlot(v,p),N=GetSlot(v,h),k=AddZonedDateTime(GetSlot(v,T),B,N,e,t,o,n,a,i,s,l,d,m),A=AddZonedDateTime(new $(k),B,N,c,u,f,y,S,w,g,I,D,G);"year"!==O&&"month"!==O&&"week"!==O&&"day"!==O?(C=0,E=0,b=0,M=0,({seconds:P,milliseconds:F,microseconds:Y,nanoseconds:j}=DifferenceInstant(GetSlot(v,r),A,1,"nanosecond","halfExpand")),({hours:R,minutes:Z,seconds:P,milliseconds:F,microseconds:Y,nanoseconds:j}=BalanceDuration(0,0,0,P,F,Y,j,O))):({years:C,months:E,weeks:b,days:M,hours:R,minutes:Z,seconds:P,milliseconds:F,microseconds:Y,nanoseconds:j}=DifferenceZonedDateTime(GetSlot(v,r),A,B,N,O,le(null)))}else{if("year"===O||"month"===O||"week"===O)throw new RangeError("relativeTo is required for years, months, or weeks arithmetic");C=E=b=0,({days:M,hours:R,minutes:Z,seconds:P,milliseconds:F,microseconds:Y,nanoseconds:j}=BalanceDuration(n+y,a+S,i+w,s+g,l+I,d+D,m+G,O))}return RejectDuration(C,E,b,M,R,Z,P,F,Y,j),{years:C,months:E,weeks:b,days:M,hours:R,minutes:Z,seconds:P,milliseconds:F,microseconds:Y,nanoseconds:j}}function AddInstant(t,r,o,n,a,i,s){let l=ue;l=e.default.add(l,e.default.BigInt(s)),l=e.default.add(l,e.default.multiply(e.default.BigInt(i),pe)),l=e.default.add(l,e.default.multiply(e.default.BigInt(a),fe)),l=e.default.add(l,e.default.multiply(e.default.BigInt(n),ye)),l=e.default.add(l,e.default.multiply(e.default.BigInt(o),e.default.BigInt(6e10))),l=e.default.add(l,e.default.multiply(e.default.BigInt(r),e.default.BigInt(36e11)));const d=e.default.add(t,l);return ValidateEpochNanoseconds(d),d}function AddDateTime(e,t,r,o,s,l,d,m,c,u,h,T,p,f,y,S,w,g,I,D,G){let v=f,{deltaDays:O,hour:C,minute:E,second:b,millisecond:M,microsecond:R,nanosecond:Z}=AddTime(o,s,l,d,m,c,y,S,w,g,I,D);v+=O;const P=GetIntrinsic("%Temporal.Duration%"),F=CalendarDateAdd(u,CreateTemporalDate(e,t,r,u),new P(h,T,p,v,0,0,0,0,0,0),G);return{year:GetSlot(F,n),month:GetSlot(F,a),day:GetSlot(F,i),hour:C,minute:E,second:b,millisecond:M,microsecond:R,nanosecond:Z}}function AddZonedDateTime(e,t,o,h,T,p,f,y,S,w,g,I,D,G){const v=GetIntrinsic("%Temporal.Duration%");if(0===DurationSign(h,T,p,f,0,0,0,0,0,0))return AddInstant(GetSlot(e,r),y,S,w,g,I,D);const O=BuiltinTimeZoneGetPlainDateTimeFor(t,e,o),C=CalendarDateAdd(o,CreateTemporalDate(GetSlot(O,n),GetSlot(O,a),GetSlot(O,i),o),new v(h,T,p,f,0,0,0,0,0,0),G),E=CreateTemporalDateTime(GetSlot(C,n),GetSlot(C,a),GetSlot(C,i),GetSlot(O,s),GetSlot(O,l),GetSlot(O,d),GetSlot(O,m),GetSlot(O,c),GetSlot(O,u),o);return AddInstant(GetSlot(BuiltinTimeZoneGetInstantFor(t,E,"compatible"),r),y,S,w,g,I,D)}function AddDurationToOrSubtractDurationFromDuration(e,t,r,o){const n="subtract"===e?-1:1;let{years:a,months:i,weeks:s,days:l,hours:d,minutes:m,seconds:c,milliseconds:u,microseconds:h,nanoseconds:T}=ToTemporalDurationRecord(r);const p=ToRelativeTemporalObject(GetOptionsObject(o));({years:a,months:i,weeks:s,days:l,hours:d,minutes:m,seconds:c,milliseconds:u,microseconds:h,nanoseconds:T}=AddDuration(GetSlot(t,f),GetSlot(t,y),GetSlot(t,S),GetSlot(t,w),GetSlot(t,g),GetSlot(t,I),GetSlot(t,D),GetSlot(t,G),GetSlot(t,v),GetSlot(t,O),n*a,n*i,n*s,n*l,n*d,n*m,n*c,n*u,n*h,n*T,p));return new(GetIntrinsic("%Temporal.Duration%"))(a,i,s,l,d,m,c,u,h,T)}function AddDurationToOrSubtractDurationFromInstant(e,t,o){const n="subtract"===e?-1:1,{hours:a,minutes:i,seconds:s,milliseconds:l,microseconds:d,nanoseconds:m}=function ToLimitedTemporalDuration(e,t){let r=ToTemporalDurationRecord(e);for(const e of t)if(0!==r[e])throw new RangeError(`Duration field ${e} not supported by Temporal.Instant. Try Temporal.ZonedDateTime instead.`);return r}(o,["years","months","weeks","days"]),c=AddInstant(GetSlot(t,r),n*a,n*i,n*s,n*l,n*d,n*m);return new(GetIntrinsic("%Temporal.Instant%"))(c)}function AddDurationToOrSubtractDurationFromPlainDateTime(e,t,r,o){const T="subtract"===e?-1:1,{years:p,months:f,weeks:y,days:S,hours:w,minutes:g,seconds:I,milliseconds:D,microseconds:G,nanoseconds:v}=ToTemporalDurationRecord(r),O=GetOptionsObject(o),C=GetSlot(t,h),{year:E,month:b,day:M,hour:R,minute:Z,second:P,millisecond:F,microsecond:Y,nanosecond:j}=AddDateTime(GetSlot(t,n),GetSlot(t,a),GetSlot(t,i),GetSlot(t,s),GetSlot(t,l),GetSlot(t,d),GetSlot(t,m),GetSlot(t,c),GetSlot(t,u),C,T*p,T*f,T*y,T*S,T*w,T*g,T*I,T*D,T*G,T*v,O);return CreateTemporalDateTime(E,b,M,R,Z,P,F,Y,j,C)}function AddDurationToOrSubtractDurationFromPlainTime(e,t,r){const o="subtract"===e?-1:1,{hours:n,minutes:a,seconds:i,milliseconds:h,microseconds:T,nanoseconds:p}=ToTemporalDurationRecord(r);let{hour:f,minute:y,second:S,millisecond:w,microsecond:g,nanosecond:I}=AddTime(GetSlot(t,s),GetSlot(t,l),GetSlot(t,d),GetSlot(t,m),GetSlot(t,c),GetSlot(t,u),o*n,o*a,o*i,o*h,o*T,o*p);({hour:f,minute:y,second:S,millisecond:w,microsecond:g,nanosecond:I}=RegulateTime(f,y,S,w,g,I,"reject"));return new(GetIntrinsic("%Temporal.PlainTime%"))(f,y,S,w,g,I)}function AddDurationToOrSubtractDurationFromPlainYearMonth(e,t,r,o){let n=ToTemporalDurationRecord(r);"subtract"===e&&(n={years:-n.years,months:-n.months,weeks:-n.weeks,days:-n.days,hours:-n.hours,minutes:-n.minutes,seconds:-n.seconds,milliseconds:-n.milliseconds,microseconds:-n.microseconds,nanoseconds:-n.nanoseconds});let{years:a,months:i,weeks:s,days:l,hours:d,minutes:m,seconds:c,milliseconds:u,microseconds:T,nanoseconds:p}=n;({days:l}=BalanceDuration(l,d,m,c,u,T,p,"day"));const f=GetOptionsObject(o),y=GetSlot(t,h),S=CalendarFields(y,["monthCode","year"]),w=PrepareTemporalFields(t,S,[]),g=DurationSign(a,i,s,l,0,0,0,0,0,0);w.day=g<0?ToPositiveInteger(CalendarDaysInMonth(y,t)):1;const I=CalendarDateFromFields(y,w),D=new(GetIntrinsic("%Temporal.Duration%"))(a,i,s,l,0,0,0,0,0,0),G=se(le(null),f);return CalendarYearMonthFromFields(y,PrepareTemporalFields(CalendarDateAdd(y,I,D,f),S,[]),G)}function AddDurationToOrSubtractDurationFromZonedDateTime(e,t,r,o){const n="subtract"===e?-1:1,{years:a,months:i,weeks:s,days:l,hours:d,minutes:m,seconds:c,milliseconds:u,microseconds:f,nanoseconds:y}=ToTemporalDurationRecord(r),S=GetOptionsObject(o),w=GetSlot(t,p),g=GetSlot(t,h);return CreateTemporalZonedDateTime(AddZonedDateTime(GetSlot(t,T),w,g,n*a,n*i,n*s,n*l,n*d,n*m,n*c,n*u,n*f,n*y,S),w,g)}function RoundNumberToIncrement(t,r,o){if(1===r)return t;let{quotient:n,remainder:a}=divmod(t,e.default.BigInt(r));if(e.default.equal(a,ue))return t;const i=e.default.lessThan(a,ue)?-1:1;switch(o){case"ceil":i>0&&(n=e.default.add(n,e.default.BigInt(i)));break;case"floor":i<0&&(n=e.default.add(n,e.default.BigInt(i)));break;case"trunc":break;case"halfExpand":e.default.toNumber(abs(e.default.multiply(a,e.default.BigInt(2))))>=r&&(n=e.default.add(n,e.default.BigInt(i)))}return e.default.multiply(n,e.default.BigInt(r))}function RoundInstant(t,r,o,n){let a=e.default.remainder(t,e.default.BigInt(864e11));e.default.lessThan(a,ue)&&(a=e.default.add(a,e.default.BigInt(864e11)));const i=e.default.subtract(t,a),s=RoundNumberToIncrement(a,Ne[o]*r,n);return e.default.add(i,s)}function RoundISODateTime(e,t,r,o,n,a,i,s,l,d,m,c,u=864e11){const{deltaDays:h,hour:T,minute:p,second:f,millisecond:y,microsecond:S,nanosecond:w}=RoundTime(o,n,a,i,s,l,d,m,c,u),{year:g,month:I,day:D}=BalanceISODate(e,t,r+h);return{year:g,month:I,day:D,hour:T,minute:p,second:f,millisecond:y,microsecond:S,nanosecond:w}}function RoundTime(t,r,o,n,a,i,s,l,d,m=864e11){let c=ue;switch(l){case"day":case"hour":c=e.default.BigInt(t);case"minute":c=e.default.add(e.default.multiply(c,Te),e.default.BigInt(r));case"second":c=e.default.add(e.default.multiply(c,Te),e.default.BigInt(o));case"millisecond":c=e.default.add(e.default.multiply(c,pe),e.default.BigInt(n));case"microsecond":c=e.default.add(e.default.multiply(c,pe),e.default.BigInt(a));case"nanosecond":c=e.default.add(e.default.multiply(c,pe),e.default.BigInt(i))}const u="day"===l?m:Ne[l],h=RoundNumberToIncrement(c,u*s,d),T=e.default.toNumber(e.default.divide(h,e.default.BigInt(u)));switch(l){case"day":return{deltaDays:T,hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0};case"hour":return BalanceTime(T,0,0,0,0,0);case"minute":return BalanceTime(t,T,0,0,0,0);case"second":return BalanceTime(t,r,T,0,0,0);case"millisecond":return BalanceTime(t,r,o,T,0,0);case"microsecond":return BalanceTime(t,r,o,n,T,0);case"nanosecond":return BalanceTime(t,r,o,n,a,T);default:throw new Error(`Invalid unit ${l}`)}}function DaysUntil(e,t){return DifferenceISODate(GetSlot(e,n),GetSlot(e,a),GetSlot(e,i),GetSlot(t,n),GetSlot(t,a),GetSlot(t,i),"day").days}function MoveRelativeDate(e,t,r){const o=CalendarDateAdd(e,t,r,void 0);return{relativeTo:o,days:DaysUntil(t,o)}}function MoveRelativeZonedDateTime(e,t,r,o,n){const a=GetSlot(e,p),i=GetSlot(e,h);return CreateTemporalZonedDateTime(AddZonedDateTime(GetSlot(e,T),a,i,t,r,o,n,0,0,0,0,0,0),a,i)}function AdjustRoundedDurationDays(t,r,o,n,a,i,s,l,d,m,c,u,f,y){let S=t,w=r,g=o,I=n,D=a,G=i,v=s,O=l,C=d,E=m;if(!IsTemporalZonedDateTime(y)||"year"===u||"month"===u||"week"===u||"day"===u||"nanosecond"===u&&1===c)return{years:S,months:w,weeks:g,days:I,hours:D,minutes:G,seconds:v,milliseconds:O,microseconds:C,nanoseconds:E};let b=TotalDurationNanoseconds(0,D,G,v,O,C,E,0);const M=ee(e.default.toNumber(b)),R=GetSlot(y,p),Z=GetSlot(y,h),P=AddZonedDateTime(GetSlot(y,T),R,Z,S,w,g,I,0,0,0,0,0,0),F=AddZonedDateTime(new(GetIntrinsic("%Temporal.Instant%"))(P),R,Z,0,0,0,M,0,0,0,0,0,0),Y=e.default.subtract(F,P);return e.default.greaterThanOrEqual(e.default.multiply(e.default.subtract(b,Y),e.default.BigInt(M)),ue)&&(({years:S,months:w,weeks:g,days:I}=AddDuration(S,w,g,I,0,0,0,0,0,0,0,0,0,M,0,0,0,0,0,0,y)),b=RoundInstant(e.default.subtract(b,Y),c,u,f),({hours:D,minutes:G,seconds:v,milliseconds:O,microseconds:C,nanoseconds:E}=BalanceDuration(0,0,0,0,0,0,e.default.toNumber(b),"hour"))),{years:S,months:w,weeks:g,days:I,hours:D,minutes:G,seconds:v,milliseconds:O,microseconds:C,nanoseconds:E}}function RoundDuration(t,r,o,n,a,i,s,l,d,m,c,u,T,p){let f=t,y=r,S=o,w=n,g=a,I=i,D=s,G=l,v=d,O=e.default.BigInt(m);const C=GetIntrinsic("%Temporal.Duration%");let E,b,M,R,Z=p;if(Z){if(IsTemporalZonedDateTime(Z))b=Z,Z=ToTemporalDate(Z);else if(!IsTemporalDate(Z))throw new TypeError("starting point must be PlainDate or ZonedDateTime");E=GetSlot(Z,h)}if("year"===u||"month"===u||"week"===u||"day"===u){let t,r,o;O=TotalDurationNanoseconds(0,g,I,D,G,v,m,0),b&&(t=MoveRelativeZonedDateTime(b,f,y,S,w)),({days:r,nanoseconds:O,dayLengthNs:o}=NanosecondsToDays(O,t)),M=e.default.BigInt(o),w+=r,g=I=D=G=v=0}switch(u){case"year":{if(!E)throw new RangeError("A starting point is required for years rounding");const t=new C(f),r=E.dateAdd,o=CalendarDateAdd(E,Z,t,void 0,r),n=CalendarDateAdd(E,Z,new C(f,y,S),void 0,r);Z=o,w+=DaysUntil(o,n);const a=CalendarDateAdd(E,Z,{days:w},void 0,r),i=le(null);i.largestUnit="year";const s=CalendarDateUntil(E,Z,a,i).years;f+=s;const l=Z;Z=CalendarDateAdd(E,Z,{years:s},void 0,r);w-=DaysUntil(l,Z);const d=new C(w<0?-1:1);let{days:m}=MoveRelativeDate(E,Z,d);m=K(m);const u=e.default.multiply(e.default.BigInt(m),M);O=e.default.add(e.default.add(e.default.multiply(u,e.default.BigInt(f)),e.default.multiply(e.default.BigInt(w),M)),O);const h=RoundNumberToIncrement(O,e.default.toNumber(e.default.multiply(u,e.default.BigInt(c))),T);R=e.default.toNumber(O)/e.default.toNumber(u),f=e.default.toNumber(e.default.divide(h,u)),O=ue,y=S=w=0;break}case"month":{if(!E)throw new RangeError("A starting point is required for months rounding");const t=new C(f,y),r=E.dateAdd,o=CalendarDateAdd(E,Z,t,void 0,r),n=CalendarDateAdd(E,Z,new C(f,y,S),void 0,r);Z=o,w+=DaysUntil(o,n);const a=ee(w),i=new C(0,w<0?-1:1);let s;for(({relativeTo:Z,days:s}=MoveRelativeDate(E,Z,i));K(w)>=K(s);)y+=a,w-=s,({relativeTo:Z,days:s}=MoveRelativeDate(E,Z,i));s=K(s);const l=e.default.multiply(e.default.BigInt(s),M);O=e.default.add(e.default.add(e.default.multiply(l,e.default.BigInt(y)),e.default.multiply(e.default.BigInt(w),M)),O);const d=RoundNumberToIncrement(O,e.default.toNumber(e.default.multiply(l,e.default.BigInt(c))),T);R=e.default.toNumber(O)/e.default.toNumber(l),y=e.default.toNumber(e.default.divide(d,l)),O=ue,S=w=0;break}case"week":{if(!E)throw new RangeError("A starting point is required for weeks rounding");const t=ee(w),r=new C(0,0,w<0?-1:1);let o;for(({relativeTo:Z,days:o}=MoveRelativeDate(E,Z,r));K(w)>=K(o);)S+=t,w-=o,({relativeTo:Z,days:o}=MoveRelativeDate(E,Z,r));o=K(o);const n=e.default.multiply(e.default.BigInt(o),M);O=e.default.add(e.default.add(e.default.multiply(n,e.default.BigInt(S)),e.default.multiply(e.default.BigInt(w),M)),O);const a=RoundNumberToIncrement(O,e.default.toNumber(e.default.multiply(n,e.default.BigInt(c))),T);R=e.default.toNumber(O)/e.default.toNumber(n),S=e.default.toNumber(e.default.divide(a,n)),O=ue,w=0;break}case"day":{const t=M;O=e.default.add(e.default.multiply(t,e.default.BigInt(w)),O);const r=RoundNumberToIncrement(O,e.default.toNumber(e.default.multiply(t,e.default.BigInt(c))),T);R=e.default.toNumber(O)/e.default.toNumber(t),w=e.default.toNumber(e.default.divide(r,t)),O=ue;break}case"hour":{const t=36e11;let r=e.default.multiply(e.default.BigInt(g),e.default.BigInt(36e11));r=e.default.add(r,e.default.multiply(e.default.BigInt(I),e.default.BigInt(6e10))),r=e.default.add(r,e.default.multiply(e.default.BigInt(D),ye)),r=e.default.add(r,e.default.multiply(e.default.BigInt(G),fe)),r=e.default.add(r,e.default.multiply(e.default.BigInt(v),pe)),r=e.default.add(r,O),R=e.default.toNumber(r)/t;const o=RoundNumberToIncrement(r,t*c,T);g=e.default.toNumber(e.default.divide(o,e.default.BigInt(t))),O=ue,I=D=G=v=0;break}case"minute":{const t=6e10;let r=e.default.multiply(e.default.BigInt(I),e.default.BigInt(6e10));r=e.default.add(r,e.default.multiply(e.default.BigInt(D),ye)),r=e.default.add(r,e.default.multiply(e.default.BigInt(G),fe)),r=e.default.add(r,e.default.multiply(e.default.BigInt(v),pe)),r=e.default.add(r,O),R=e.default.toNumber(r)/t;const o=RoundNumberToIncrement(r,t*c,T);I=e.default.toNumber(e.default.divide(o,e.default.BigInt(t))),O=ue,D=G=v=0;break}case"second":{const t=1e9;let r=e.default.multiply(e.default.BigInt(D),ye);r=e.default.add(r,e.default.multiply(e.default.BigInt(G),fe)),r=e.default.add(r,e.default.multiply(e.default.BigInt(v),pe)),r=e.default.add(r,O),R=e.default.toNumber(r)/t;const o=RoundNumberToIncrement(r,t*c,T);D=e.default.toNumber(e.default.divide(o,e.default.BigInt(t))),O=ue,G=v=0;break}case"millisecond":{const t=1e6;let r=e.default.multiply(e.default.BigInt(G),fe);r=e.default.add(r,e.default.multiply(e.default.BigInt(v),pe)),r=e.default.add(r,O),R=e.default.toNumber(r)/t;const o=RoundNumberToIncrement(r,t*c,T);G=e.default.toNumber(e.default.divide(o,e.default.BigInt(t))),O=ue,v=0;break}case"microsecond":{const t=1e3;let r=e.default.multiply(e.default.BigInt(v),pe);r=e.default.add(r,O),R=e.default.toNumber(r)/t;const o=RoundNumberToIncrement(r,t*c,T);v=e.default.toNumber(e.default.divide(o,e.default.BigInt(t))),O=ue;break}case"nanosecond":R=e.default.toNumber(O),O=RoundNumberToIncrement(O,c,T)}return{years:f,months:y,weeks:S,days:w,hours:g,minutes:I,seconds:D,milliseconds:G,microseconds:v,nanoseconds:e.default.toNumber(O),total:R}}function CompareISODate(e,t,r,o,n,a){for(const[i,s]of[[e,o],[t,n],[r,a]])if(i!==s)return ComparisonResult(i-s);return 0}function NonNegativeModulo(e,t){let r=e%t;return me(r,-0)?0:(r<0&&(r+=t),r)}function ToBigIntExternal(e){const t=ToBigInt(e);return void 0!==globalThis.BigInt?globalThis.BigInt(t.toString(10)):t}function ToBigInt(t){if(t instanceof e.default)return t;let r=t;if("object"==typeof t){const e=t[Symbol.toPrimitive];e&&"function"==typeof e&&(r=ce(e,t,["number"]))}switch(typeof r){case"undefined":case"object":case"number":case"symbol":default:throw new TypeError(`cannot convert ${typeof t} to bigint`);case"string":if(!r.match(/^\s*(?:[+-]?\d+\s*)?$/))throw new SyntaxError("invalid BigInt syntax");case"bigint":try{return e.default.BigInt(r.toString())}catch(e){if(e instanceof Error&&e.message.startsWith("Invalid integer"))throw new SyntaxError(e.message);throw e}case"boolean":return r?he:ue}}const $e=(()=>{let t=e.default.BigInt(Date.now()%1e6);return()=>{const r=e.default.BigInt(Date.now()),o=e.default.add(e.default.multiply(r,fe),t);return t=e.default.remainder(r,fe),e.default.greaterThan(o,Ie)?Ie:e.default.lessThan(o,ge)?ge:o}})();function ComparisonResult(e){return e<0?-1:e>0?1:e}function GetOptionsObject(e){if(void 0===e)return le(null);if(IsObject(e)&&null!==e)return e;throw new TypeError("Options parameter must be an object, not "+(null===e?"null":""+typeof e))}function CreateOnePropObject(e,t){const r=le(null);return r[e]=t,r}function GetOption(e,t,r,o){let n=e[t];if(void 0!==n){if(n=ToString(n),!r.includes(n))throw new RangeError(`${t} must be one of ${r.join(", ")}, not ${n}`);return n}return o}function IsBuiltinCalendar(e){return z.call(Ce,e)}const Be=new RegExp(`^${B.source}$`);function bisect(t,r,o,n=t(r),a=t(o)){let i=e.default.BigInt(r),s=e.default.BigInt(o),l=n,d=a;for(;e.default.greaterThan(e.default.subtract(s,i),he);){const r=e.default.divide(e.default.add(i,s),e.default.BigInt(2)),o=t(r);if(o===l)i=r,l=o;else{if(o!==d)throw new Error(`invalid state in bisection ${l} - ${o} - ${d}`);s=r,d=o}}return s}const Ne={hour:36e11,minute:6e10,second:1e9,millisecond:1e6,microsecond:1e3,nanosecond:1},ke=Symbol("date"),Ae=Symbol("ym"),Ue=Symbol("md"),Le=Symbol("time"),xe=Symbol("datetime"),He=Symbol("zoneddatetime"),qe=Symbol("instant"),We=Symbol("original"),ze=Symbol("timezone"),_e=Symbol("timezone-id-given"),Je=Symbol("calendar-id"),Ve=Symbol("locale"),Xe=Symbol("options"),descriptor=e=>({value:e,enumerable:!0,writable:!1,configurable:!0}),Ke=globalThis.Intl.DateTimeFormat,Qe=Object.assign,et=Object.prototype.hasOwnProperty,tt=Reflect.apply;function getPropLazy(e,t){let r=e[t];return"function"==typeof r&&(r=new Ke(e[Ve],r(e[Xe])),e[t]=r),r}function getResolvedTimeZoneLazy(e){let t=e[ze];return"string"==typeof t&&(t=ToTemporalTimeZone(t),e[ze]=t),t}function DateTimeFormatImpl(e,t={}){if(!(this instanceof DateTimeFormatImpl))return new DateTimeFormatImpl(e,t);const r=void 0!==t,o=r?Qe({},t):{},n=new Ke(e,o),a=n.resolvedOptions();if(r){const e=Qe({},a);for(const t in e)tt(et,o,[t])||delete e[t];this[Xe]=e}else this[Xe]=o;this[_e]=o.timeZone?o.timeZone:null,this[Ve]=a.locale,this[We]=n,this[ze]=a.timeZone,this[Je]=a.calendar,this[ke]=dateAmend,this[Ae]=yearMonthAmend,this[Ue]=monthDayAmend,this[Le]=timeAmend,this[xe]=datetimeAmend,this[He]=zonedDateTimeAmend,this[qe]=instantAmend}Object.defineProperty(DateTimeFormatImpl,"name",{writable:!0,value:"DateTimeFormat"}),DateTimeFormatImpl.supportedLocalesOf=function(e,t){return Ke.supportedLocalesOf(e,t)};const rt={resolvedOptions:descriptor((function resolvedOptions(){return this[We].resolvedOptions()})),format:descriptor((function format(e,...t){let{instant:r,formatter:o,timeZone:n}=extractOverrides(e,this);if(r&&o)return o=adjustFormatterTimeZone(o,n),o.format(r.epochMilliseconds);return this[We].format(e,...t)})),formatRange:descriptor((function formatRange(e,t){if(isTemporalObject(e)||isTemporalObject(t)){if(!sameTemporalType(e,t))throw new TypeError("Intl.DateTimeFormat.formatRange accepts two values of the same type");const{instant:r,formatter:o,timeZone:n}=extractOverrides(e,this),{instant:a,formatter:i,timeZone:s}=extractOverrides(t,this);if(n&&s&&n!==s)throw new RangeError("cannot format range between different time zones");if(r&&a&&o&&i&&o===i){return adjustFormatterTimeZone(o,n).formatRange(r.epochMilliseconds,a.epochMilliseconds)}}return this[We].formatRange(e,t)}))};"formatToParts"in Ke.prototype&&(rt.formatToParts=descriptor((function formatToParts(e,...t){let{instant:r,formatter:o,timeZone:n}=extractOverrides(e,this);if(r&&o)return o=adjustFormatterTimeZone(o,n),o.formatToParts(r.epochMilliseconds);return this[We].formatToParts(e,...t)}))),"formatRangeToParts"in Ke.prototype&&(rt.formatRangeToParts=descriptor((function formatRangeToParts(e,t){if(isTemporalObject(e)||isTemporalObject(t)){if(!sameTemporalType(e,t))throw new TypeError("Intl.DateTimeFormat.formatRangeToParts accepts two values of the same type");const{instant:r,formatter:o,timeZone:n}=extractOverrides(e,this),{instant:a,formatter:i,timeZone:s}=extractOverrides(t,this);if(n&&s&&n!==s)throw new RangeError("cannot format range between different time zones");if(r&&a&&o&&i&&o===i){return adjustFormatterTimeZone(o,n).formatRangeToParts(r.epochMilliseconds,a.epochMilliseconds)}}return this[We].formatRangeToParts(e,t)}))),DateTimeFormatImpl.prototype=Object.create(Ke.prototype,rt),Object.defineProperty(DateTimeFormatImpl,"prototype",{writable:!1,enumerable:!1,configurable:!1});const ot=DateTimeFormatImpl;function adjustFormatterTimeZone(e,t){if(!t)return e;const r=e.resolvedOptions();return r.timeZone===t?e:((r.dateStyle||r.timeStyle)&&(delete r.weekday,delete r.era,delete r.year,delete r.month,delete r.day,delete r.hour,delete r.minute,delete r.second,delete r.timeZoneName,delete r.hourCycle,delete r.hour12,delete r.dayPeriod),new Ke(r.locale,{...r,timeZone:t}))}function amend(e={},t={}){const r=Qe({},e);for(const e of["year","month","day","hour","minute","second","weekday","dayPeriod","timeZoneName","dateStyle","timeStyle"])r[e]=e in t?t[e]:r[e],!1!==r[e]&&void 0!==r[e]||delete r[e];return r}function timeAmend(e){let t=amend(e,{year:!1,month:!1,day:!1,weekday:!1,timeZoneName:!1,dateStyle:!1});return hasTimeOptions(t)||(t=Qe({},t,{hour:"numeric",minute:"numeric",second:"numeric"})),t}function yearMonthAmend(e){let t=amend(e,{day:!1,hour:!1,minute:!1,second:!1,weekday:!1,dayPeriod:!1,timeZoneName:!1,dateStyle:!1,timeStyle:!1});return"year"in t||"month"in t||(t=Qe(t,{year:"numeric",month:"numeric"})),t}function monthDayAmend(e){let t=amend(e,{year:!1,hour:!1,minute:!1,second:!1,weekday:!1,dayPeriod:!1,timeZoneName:!1,dateStyle:!1,timeStyle:!1});return"month"in t||"day"in t||(t=Qe({},t,{month:"numeric",day:"numeric"})),t}function dateAmend(e){let t=amend(e,{hour:!1,minute:!1,second:!1,dayPeriod:!1,timeZoneName:!1,timeStyle:!1});return hasDateOptions(t)||(t=Qe({},t,{year:"numeric",month:"numeric",day:"numeric"})),t}function datetimeAmend(e){let t=amend(e,{timeZoneName:!1});return hasTimeOptions(t)||hasDateOptions(t)||(t=Qe({},t,{year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric"})),t}function zonedDateTimeAmend(e){let t=e;return hasTimeOptions(t)||hasDateOptions(t)||(t=Qe({},t,{year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric"}),void 0===t.timeZoneName&&(t.timeZoneName="short")),t}function instantAmend(e){let t=e;return hasTimeOptions(t)||hasDateOptions(t)||(t=Qe({},t,{year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric"})),t}function hasDateOptions(e){return"year"in e||"month"in e||"day"in e||"weekday"in e||"dateStyle"in e}function hasTimeOptions(e){return"hour"in e||"minute"in e||"second"in e||"timeStyle"in e||"dayPeriod"in e}function isTemporalObject(e){return IsTemporalDate(e)||IsTemporalTime(e)||IsTemporalDateTime(e)||IsTemporalZonedDateTime(e)||IsTemporalYearMonth(e)||IsTemporalMonthDay(e)||IsTemporalInstant(e)}function sameTemporalType(e,t){return!(!isTemporalObject(e)||!isTemporalObject(t))&&(!(IsTemporalTime(e)&&!IsTemporalTime(t))&&(!(IsTemporalDate(e)&&!IsTemporalDate(t))&&(!(IsTemporalDateTime(e)&&!IsTemporalDateTime(t))&&(!(IsTemporalZonedDateTime(e)&&!IsTemporalZonedDateTime(t))&&(!(IsTemporalYearMonth(e)&&!IsTemporalYearMonth(t))&&(!(IsTemporalMonthDay(e)&&!IsTemporalMonthDay(t))&&!(IsTemporalInstant(e)&&!IsTemporalInstant(t))))))))}function extractOverrides(e,t){const r=GetIntrinsic("%Temporal.PlainDateTime%");if(IsTemporalTime(e)){const o=new r(1970,1,1,GetSlot(e,s),GetSlot(e,l),GetSlot(e,d),GetSlot(e,m),GetSlot(e,c),GetSlot(e,u),t[Je]);return{instant:BuiltinTimeZoneGetInstantFor(getResolvedTimeZoneLazy(t),o,"compatible"),formatter:getPropLazy(t,Le)}}if(IsTemporalYearMonth(e)){const o=GetSlot(e,n),s=GetSlot(e,a),l=GetSlot(e,i),d=ToString(GetSlot(e,h));if(d!==t[Je])throw new RangeError(`cannot format PlainYearMonth with calendar ${d} in locale with calendar ${t[Je]}`);const m=new r(o,s,l,12,0,0,0,0,0,d);return{instant:BuiltinTimeZoneGetInstantFor(getResolvedTimeZoneLazy(t),m,"compatible"),formatter:getPropLazy(t,Ae)}}if(IsTemporalMonthDay(e)){const o=GetSlot(e,n),s=GetSlot(e,a),l=GetSlot(e,i),d=ToString(GetSlot(e,h));if(d!==t[Je])throw new RangeError(`cannot format PlainMonthDay with calendar ${d} in locale with calendar ${t[Je]}`);const m=new r(o,s,l,12,0,0,0,0,0,d);return{instant:BuiltinTimeZoneGetInstantFor(getResolvedTimeZoneLazy(t),m,"compatible"),formatter:getPropLazy(t,Ue)}}if(IsTemporalDate(e)){const o=GetSlot(e,n),s=GetSlot(e,a),l=GetSlot(e,i),d=ToString(GetSlot(e,h));if("iso8601"!==d&&d!==t[Je])throw new RangeError(`cannot format PlainDate with calendar ${d} in locale with calendar ${t[Je]}`);const m=new r(o,s,l,12,0,0,0,0,0,t[Je]);return{instant:BuiltinTimeZoneGetInstantFor(getResolvedTimeZoneLazy(t),m,"compatible"),formatter:getPropLazy(t,ke)}}if(IsTemporalDateTime(e)){const o=GetSlot(e,n),T=GetSlot(e,a),p=GetSlot(e,i),f=GetSlot(e,s),y=GetSlot(e,l),S=GetSlot(e,d),w=GetSlot(e,m),g=GetSlot(e,c),I=GetSlot(e,u),D=ToString(GetSlot(e,h));if("iso8601"!==D&&D!==t[Je])throw new RangeError(`cannot format PlainDateTime with calendar ${D} in locale with calendar ${t[Je]}`);let G=e;return"iso8601"===D&&(G=new r(o,T,p,f,y,S,w,g,I,t[Je])),{instant:BuiltinTimeZoneGetInstantFor(getResolvedTimeZoneLazy(t),G,"compatible"),formatter:getPropLazy(t,xe)}}if(IsTemporalZonedDateTime(e)){const r=ToString(GetSlot(e,h));if("iso8601"!==r&&r!==t[Je])throw new RangeError(`cannot format ZonedDateTime with calendar ${r} in locale with calendar ${t[Je]}`);const o=ToString(GetSlot(e,p));if(t[_e]&&t[_e]!==o)throw new RangeError(`timeZone option ${t[_e]} doesn't match actual time zone ${o}`);return{instant:GetSlot(e,T),formatter:getPropLazy(t,He),timeZone:o}}return IsTemporalInstant(e)?{instant:e,formatter:getPropLazy(t,qe)}:{}}var nt=Object.freeze({__proto__:null,DateTimeFormat:ot});class Instant{constructor(e){if(arguments.length<1)throw new TypeError("missing argument: epochNanoseconds is required");const t=ToBigInt(e);ValidateEpochNanoseconds(t),CreateSlots(this),SetSlot(this,r,t)}get epochSeconds(){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");const t=GetSlot(this,r);return e.default.toNumber(e.default.divide(t,ye))}get epochMilliseconds(){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");const t=e.default.BigInt(GetSlot(this,r));return e.default.toNumber(e.default.divide(t,fe))}get epochMicroseconds(){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");const t=e.default.BigInt(GetSlot(this,r));return ToBigIntExternal(e.default.divide(t,pe))}get epochNanoseconds(){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");return ToBigIntExternal(e.default.BigInt(GetSlot(this,r)))}add(e){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");return AddDurationToOrSubtractDurationFromInstant("add",this,e)}subtract(e){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");return AddDurationToOrSubtractDurationFromInstant("subtract",this,e)}until(e,t){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");return DifferenceTemporalInstant("until",this,e,t)}since(e,t){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");return DifferenceTemporalInstant("since",this,e,t)}round(e){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");if(void 0===e)throw new TypeError("options parameter is required");const t="string"==typeof e?CreateOnePropObject("smallestUnit",e):GetOptionsObject(e),o=GetTemporalUnit(t,"smallestUnit","time",je),n=ToTemporalRoundingMode(t,"halfExpand"),a=ToTemporalRoundingIncrement(t,{hour:24,minute:1440,second:86400,millisecond:864e5,microsecond:864e8,nanosecond:864e11}[o],!0),i=RoundInstant(GetSlot(this,r),a,o,n);return new Instant(i)}equals(t){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");const o=ToTemporalInstant(t),n=GetSlot(this,r),a=GetSlot(o,r);return e.default.equal(e.default.BigInt(n),e.default.BigInt(a))}toString(e){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");const t=GetOptionsObject(e);let o=t.timeZone;void 0!==o&&(o=ToTemporalTimeZone(o));const{precision:n,unit:a,increment:i}=ToSecondsStringPrecision(t),s=ToTemporalRoundingMode(t,"trunc"),l=RoundInstant(GetSlot(this,r),i,a,s);return TemporalInstantToString(new Instant(l),o,n)}toJSON(){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");return TemporalInstantToString(this,void 0,"auto")}toLocaleString(e,t){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");return new ot(e,t).format(this)}valueOf(){throw new TypeError("use compare() or equals() to compare Temporal.Instant")}toZonedDateTime(e){if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");if(!IsObject(e))throw new TypeError("invalid argument in toZonedDateTime");const t=e.calendar;if(void 0===t)throw new TypeError("missing calendar property in toZonedDateTime");const o=ToTemporalCalendar(t),n=e.timeZone;if(void 0===n)throw new TypeError("missing timeZone property in toZonedDateTime");const a=ToTemporalTimeZone(n);return CreateTemporalZonedDateTime(GetSlot(this,r),a,o)}toZonedDateTimeISO(e){let t=e;if(!IsTemporalInstant(this))throw new TypeError("invalid receiver");if(IsObject(t)){const e=t.timeZone;void 0!==e&&(t=e)}const o=ToTemporalTimeZone(t),n=GetISO8601Calendar();return CreateTemporalZonedDateTime(GetSlot(this,r),o,n)}static fromEpochSeconds(t){const r=ToNumber(t),o=e.default.multiply(e.default.BigInt(r),ye);return ValidateEpochNanoseconds(o),new Instant(o)}static fromEpochMilliseconds(t){const r=ToNumber(t),o=e.default.multiply(e.default.BigInt(r),fe);return ValidateEpochNanoseconds(o),new Instant(o)}static fromEpochMicroseconds(t){const r=ToBigInt(t),o=e.default.multiply(r,pe);return ValidateEpochNanoseconds(o),new Instant(o)}static fromEpochNanoseconds(e){const t=ToBigInt(e);return ValidateEpochNanoseconds(t),new Instant(t)}static from(e){return IsTemporalInstant(e)?new Instant(GetSlot(e,r)):ToTemporalInstant(e)}static compare(t,o){const n=ToTemporalInstant(t),a=ToTemporalInstant(o),i=GetSlot(n,r),s=GetSlot(a,r);return e.default.lessThan(i,s)?-1:e.default.greaterThan(i,s)?1:0}}MakeIntrinsicClass(Instant,"Temporal.Instant");const at=Array.prototype.includes,it=Array.prototype.push,st=globalThis.Intl.DateTimeFormat,lt=Array.prototype.sort,dt=Math.abs,mt=Math.floor,ct=Object.entries,ut=Object.keys,ht={};class Calendar{constructor(e){if(arguments.length<1)throw new RangeError("missing argument: id is required");const t=ToString(e);if(!IsBuiltinCalendar(t))throw new RangeError(`invalid calendar identifier ${t}`);CreateSlots(this),SetSlot(this,C,t)}get id(){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");return ToString(this)}dateFromFields(e,t){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");if(!IsObject(e))throw new TypeError("invalid fields");const r=GetOptionsObject(t);return ht[GetSlot(this,C)].dateFromFields(e,r,this)}yearMonthFromFields(e,t){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");if(!IsObject(e))throw new TypeError("invalid fields");const r=GetOptionsObject(t);return ht[GetSlot(this,C)].yearMonthFromFields(e,r,this)}monthDayFromFields(e,t){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");if(!IsObject(e))throw new TypeError("invalid fields");const r=GetOptionsObject(t);return ht[GetSlot(this,C)].monthDayFromFields(e,r,this)}fields(e){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");const t=[],r=new Set(["year","month","monthCode","day","hour","minute","second","millisecond","microsecond","nanosecond"]);for(const o of e){if("string"!=typeof o)throw new TypeError("invalid fields");if(!r.has(o))throw new RangeError(`invalid field name ${o}`);r.delete(o),it.call(t,o)}return ht[GetSlot(this,C)].fields(t)}mergeFields(e,t){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");return ht[GetSlot(this,C)].mergeFields(e,t)}dateAdd(e,t,r){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");const o=ToTemporalDate(e),n=ToTemporalDuration(t),a=ToTemporalOverflow(GetOptionsObject(r)),{days:i}=BalanceDuration(GetSlot(n,w),GetSlot(n,g),GetSlot(n,I),GetSlot(n,D),GetSlot(n,G),GetSlot(n,v),GetSlot(n,O),"day");return ht[GetSlot(this,C)].dateAdd(o,GetSlot(n,f),GetSlot(n,y),GetSlot(n,S),i,a,this)}dateUntil(e,t,r){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");const o=ToTemporalDate(e),n=ToTemporalDate(t);let a=GetTemporalUnit(GetOptionsObject(r),"largestUnit","date","auto");"auto"===a&&(a="day");const{years:i,months:s,weeks:l,days:d}=ht[GetSlot(this,C)].dateUntil(o,n,a);return new(GetIntrinsic("%Temporal.Duration%"))(i,s,l,d,0,0,0,0,0,0)}year(e){let t=e;if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");return IsTemporalYearMonth(t)||(t=ToTemporalDate(t)),ht[GetSlot(this,C)].year(t)}month(e){let t=e;if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");if(IsTemporalMonthDay(t))throw new TypeError("use monthCode on PlainMonthDay instead");return IsTemporalYearMonth(t)||(t=ToTemporalDate(t)),ht[GetSlot(this,C)].month(t)}monthCode(e){let t=e;if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");return IsTemporalYearMonth(t)||IsTemporalMonthDay(t)||(t=ToTemporalDate(t)),ht[GetSlot(this,C)].monthCode(t)}day(e){let t=e;if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");return IsTemporalMonthDay(t)||(t=ToTemporalDate(t)),ht[GetSlot(this,C)].day(t)}era(e){let t=e;if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");return IsTemporalYearMonth(t)||(t=ToTemporalDate(t)),ht[GetSlot(this,C)].era(t)}eraYear(e){let t=e;if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");return IsTemporalYearMonth(t)||(t=ToTemporalDate(t)),ht[GetSlot(this,C)].eraYear(t)}dayOfWeek(e){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");const t=ToTemporalDate(e);return ht[GetSlot(this,C)].dayOfWeek(t)}dayOfYear(e){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");const t=ToTemporalDate(e);return ht[GetSlot(this,C)].dayOfYear(t)}weekOfYear(e){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");const t=ToTemporalDate(e);return ht[GetSlot(this,C)].weekOfYear(t)}daysInWeek(e){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");const t=ToTemporalDate(e);return ht[GetSlot(this,C)].daysInWeek(t)}daysInMonth(e){let t=e;if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");return IsTemporalYearMonth(t)||(t=ToTemporalDate(t)),ht[GetSlot(this,C)].daysInMonth(t)}daysInYear(e){let t=e;if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");return IsTemporalYearMonth(t)||(t=ToTemporalDate(t)),ht[GetSlot(this,C)].daysInYear(t)}monthsInYear(e){let t=e;if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");return IsTemporalYearMonth(t)||(t=ToTemporalDate(t)),ht[GetSlot(this,C)].monthsInYear(t)}inLeapYear(e){let t=e;if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");return IsTemporalYearMonth(t)||(t=ToTemporalDate(t)),ht[GetSlot(this,C)].inLeapYear(t)}toString(){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");return GetSlot(this,C)}toJSON(){if(!IsTemporalCalendar(this))throw new TypeError("invalid receiver");return ToString(this)}static from(e){return ToTemporalCalendar(e)}}function monthCodeNumberPart(e){if(!e.startsWith("M"))throw new RangeError(`Invalid month code: ${e}.  Month codes must start with M.`);const t=+e.slice(1);if(isNaN(t))throw new RangeError(`Invalid month code: ${e}`);return t}function buildMonthCode(e,t=!1){return`M${e.toString().padStart(2,"0")}${t?"L":""}`}function resolveNonLunisolarMonth(e,t,r=12){let{month:o,monthCode:n}=e;if(void 0===n){if(void 0===o)throw new TypeError("Either month or monthCode are required");"reject"===t&&RejectToRange(o,1,r),"constrain"===t&&(o=ConstrainToRange(o,1,r)),n=buildMonthCode(o)}else{const e=monthCodeNumberPart(n);if(void 0!==o&&o!==e)throw new RangeError(`monthCode ${n} and month ${o} must match if both are present`);if(n!==buildMonthCode(e))throw new RangeError(`Invalid month code: ${n}`);if(o=e,o<1||o>r)throw new RangeError(`Invalid monthCode: ${n}`)}return{...e,month:o,monthCode:n}}MakeIntrinsicClass(Calendar,"Temporal.Calendar"),DefineIntrinsic("Temporal.Calendar.from",Calendar.from),ht.iso8601={dateFromFields(e,t,r){const o=ToTemporalOverflow(t);let n=PrepareTemporalFields(e,["day","month","monthCode","year"],["year","day"]);n=resolveNonLunisolarMonth(n);let{year:a,month:i,day:s}=n;return({year:a,month:i,day:s}=RegulateISODate(a,i,s,o)),CreateTemporalDate(a,i,s,r)},yearMonthFromFields(e,t,r){const o=ToTemporalOverflow(t);let n=PrepareTemporalFields(e,["month","monthCode","year"],["year"]);n=resolveNonLunisolarMonth(n);let{year:a,month:i}=n;return({year:a,month:i}=function RegulateISOYearMonth(e,t,r){let o=e,n=t;switch(r){case"reject":RejectISODate(o,n,1);break;case"constrain":({year:o,month:n}=ConstrainISODate(o,n))}return{year:o,month:n}}(a,i,o)),CreateTemporalYearMonth(a,i,r,1)},monthDayFromFields(e,t,r){const o=ToTemporalOverflow(t);let n=PrepareTemporalFields(e,["day","month","monthCode","year"],["day"]);if(void 0!==n.month&&void 0===n.year&&void 0===n.monthCode)throw new TypeError("either year or monthCode required with month");const a=void 0===n.monthCode;n=resolveNonLunisolarMonth(n);let{month:i,day:s,year:l}=n;return({month:i,day:s}=RegulateISODate(a?l:1972,i,s,o)),CreateTemporalMonthDay(i,s,r,1972)},fields:e=>e,mergeFields(e,t){const r={};for(const t of ut(e))"month"!==t&&"monthCode"!==t&&(r[t]=e[t]);const o=ut(t);for(const e of o)r[e]=t[e];if(!at.call(o,"month")&&!at.call(o,"monthCode")){const{month:t,monthCode:o}=e;void 0!==t&&(r.month=t),void 0!==o&&(r.monthCode=o)}return r},dateAdd(e,t,r,o,s,l,d){let m=GetSlot(e,n),c=GetSlot(e,a),u=GetSlot(e,i);return({year:m,month:c,day:u}=AddISODate(m,c,u,t,r,o,s,l)),CreateTemporalDate(m,c,u,d)},dateUntil:(e,t,r)=>DifferenceISODate(GetSlot(e,n),GetSlot(e,a),GetSlot(e,i),GetSlot(t,n),GetSlot(t,a),GetSlot(t,i),r),year:e=>GetSlot(e,n),era(){},eraYear(){},month:e=>GetSlot(e,a),monthCode:e=>buildMonthCode(GetSlot(e,a)),day:e=>GetSlot(e,i),dayOfWeek:e=>DayOfWeek(GetSlot(e,n),GetSlot(e,a),GetSlot(e,i)),dayOfYear:e=>DayOfYear(GetSlot(e,n),GetSlot(e,a),GetSlot(e,i)),weekOfYear:e=>function WeekOfYear(e,t,r){const o=DayOfYear(e,t,r),n=DayOfWeek(e,t,r)||7,a=DayOfWeek(e,1,1),i=Q((o-n+10)/7);return i<1?5===a||6===a&&LeapYear(e-1)?53:52:53===i&&(LeapYear(e)?366:365)-o<4-n?1:i}(GetSlot(e,n),GetSlot(e,a),GetSlot(e,i)),daysInWeek:()=>7,daysInMonth:e=>ISODaysInMonth(GetSlot(e,n),GetSlot(e,a)),daysInYear(e){let t=e;return HasSlot(t,n)||(t=ToTemporalDate(t)),LeapYear(GetSlot(t,n))?366:365},monthsInYear:()=>12,inLeapYear(e){let t=e;return HasSlot(t,n)||(t=ToTemporalDate(t)),LeapYear(GetSlot(t,n))}};class OneObjectCache{constructor(e){if(this.map=new Map,this.calls=0,this.hits=0,this.misses=0,this.now=globalThis.performance?globalThis.performance.now():Date.now(),void 0!==e){let t=0;for(const r of e.map.entries()){if(++t>OneObjectCache.MAX_CACHE_ENTRIES)break;this.map.set(...r)}}}get(e){const t=this.map.get(e);return t&&(this.hits++,this.report()),this.calls++,t}set(e,t){this.map.set(e,t),this.misses++,this.report()}report(){}setObject(e){if(OneObjectCache.objectMap.get(e))throw new RangeError("object already cached");OneObjectCache.objectMap.set(e,this),this.report()}static getCacheForObject(e){let t=OneObjectCache.objectMap.get(e);return t||(t=new OneObjectCache,OneObjectCache.objectMap.set(e,t)),t}}function toUtcIsoDateString({isoYear:e,isoMonth:t,isoDay:r}){return`${ISOYearString(e)}-${ISODateTimePartString(t)}-${ISODateTimePartString(r)}T00:00Z`}function simpleDateDiff(e,t){return{years:e.year-t.year,months:e.month-t.month,days:e.day-t.day}}OneObjectCache.objectMap=new WeakMap,OneObjectCache.MAX_CACHE_ENTRIES=1e3;class HelperBase{constructor(){this.eraLength="short",this.hasEra=!0}getFormatter(){return void 0===this.formatter&&(this.formatter=new st(`en-US-u-ca-${this.id}`,{day:"numeric",month:"numeric",year:"numeric",era:this.eraLength,timeZone:"UTC"})),this.formatter}isoToCalendarDate(e,t){const{year:r,month:o,day:n}=e,a=JSON.stringify({func:"isoToCalendarDate",isoYear:r,isoMonth:o,isoDay:n,id:this.id}),i=t.get(a);if(i)return i;const s=this.getFormatter();let l,d;try{d=toUtcIsoDateString({isoYear:r,isoMonth:o,isoDay:n}),l=s.formatToParts(new Date(d))}catch(e){throw new RangeError(`Invalid ISO date: ${JSON.stringify({isoYear:r,isoMonth:o,isoDay:n})}`)}const m={};for(let{type:e,value:t}of l){if("year"===e&&(m.eraYear=+t),"relatedYear"===e&&(m.eraYear=+t),"month"===e){const e=/^([0-9]*)(.*?)$/.exec(t);if(!e||3!=e.length||!e[1]&&!e[2])throw new RangeError(`Unexpected month: ${t}`);if(m.month=e[1]?+e[1]:1,m.month<1)throw new RangeError(`Invalid month ${t} from ${d}[u-ca-${this.id}] (probably due to https://bugs.chromium.org/p/v8/issues/detail?id=10527)`);if(m.month>13)throw new RangeError(`Invalid month ${t} from ${d}[u-ca-${this.id}] (probably due to https://bugs.chromium.org/p/v8/issues/detail?id=10529)`);e[2]&&(m.monthExtra=e[2])}"day"===e&&(m.day=+t),this.hasEra&&"era"===e&&null!=t&&""!==t&&(t=t.split(" (")[0],m.era=t.normalize("NFD").replace(/[^-0-9 \p{L}]/gu,"").replace(" ","-").toLowerCase())}if(void 0===m.eraYear)throw new RangeError(`Intl.DateTimeFormat.formatToParts lacks relatedYear in ${this.id} calendar. Try Node 14+ or modern browsers.`);if(this.reviseIntlEra){const{era:t,eraYear:r}=this.reviseIntlEra(m,e);m.era=t,m.eraYear=r}this.checkIcuBugs&&this.checkIcuBugs(e);const c=this.adjustCalendarDate(m,t,"constrain",!0);if(void 0===c.year)throw new RangeError(`Missing year converting ${JSON.stringify(e)}`);if(void 0===c.month)throw new RangeError(`Missing month converting ${JSON.stringify(e)}`);if(void 0===c.day)throw new RangeError(`Missing day converting ${JSON.stringify(e)}`);return t.set(a,c),["constrain","reject"].forEach((r=>{const o=JSON.stringify({func:"calendarToIsoDate",year:c.year,month:c.month,day:c.day,overflow:r,id:this.id});t.set(o,e)})),c}validateCalendarDate(e){const{era:t,month:r,year:o,day:n,eraYear:a,monthCode:i,monthExtra:s}=e;if(void 0!==s)throw new RangeError("Unexpected `monthExtra` value");if(void 0===o&&void 0===a)throw new TypeError("year or eraYear is required");if(void 0===r&&void 0===i)throw new TypeError("month or monthCode is required");if(void 0===n)throw new RangeError("Missing day");if(void 0!==i){if("string"!=typeof i)throw new RangeError("monthCode must be a string, not "+typeof i);if(!/^M([01]?\d)(L?)$/.test(i))throw new RangeError(`Invalid monthCode: ${i}`)}if(this.constantEra){if(void 0!==t&&t!==this.constantEra)throw new RangeError(`era must be ${this.constantEra}, not ${t}`);if(void 0!==a&&void 0!==o&&a!==o)throw new RangeError(`eraYear ${a} does not match year ${o}`)}}adjustCalendarDate(e,t,r="constrain",o=!1){if("lunisolar"===this.calendarType)throw new RangeError("Override required for lunisolar calendars");let n=e;if(this.validateCalendarDate(n),this.constantEra){const{year:e,eraYear:t}=n;n={...n,era:this.constantEra,year:void 0!==e?e:t,eraYear:void 0!==t?t:e}}const a=this.monthsInYear(n,t);let{month:i,monthCode:s}=n;return({month:i,monthCode:s}=resolveNonLunisolarMonth(n,r,a)),{...n,month:i,monthCode:s}}regulateMonthDayNaive(e,t,r){const o=this.monthsInYear(e,r);let{month:n,day:a}=e;return"reject"===t?(RejectToRange(n,1,o),RejectToRange(a,1,this.maximumMonthLength(e))):(n=ConstrainToRange(n,1,o),a=ConstrainToRange(a,1,this.maximumMonthLength({...e,month:n}))),{...e,month:n,day:a}}calendarToIsoDate(e,t="constrain",r){const o=e;let n=this.adjustCalendarDate(e,r,t,!1);n=this.regulateMonthDayNaive(n,t,r);const{year:a,month:i,day:s}=n,l=JSON.stringify({func:"calendarToIsoDate",year:a,month:i,day:s,overflow:t,id:this.id});let d,m=r.get(l);if(m)return m;if(void 0!==o.year&&void 0!==o.month&&void 0!==o.day&&(o.year!==n.year||o.month!==n.month||o.day!==n.day)&&(d=JSON.stringify({func:"calendarToIsoDate",year:o.year,month:o.month,day:o.day,overflow:t,id:this.id}),m=r.get(d),m))return m;let c=this.estimateIsoDate({year:a,month:i,day:s});const calculateSameMonthResult=e=>{let o=this.addDaysIso(c,e);if(n.day>this.minimumMonthLength(n)){let e=this.isoToCalendarDate(o,r);for(;e.month!==i||e.year!==a;){if("reject"===t)throw new RangeError(`day ${s} does not exist in month ${i} of year ${a}`);o=this.addDaysIso(o,-1),e=this.isoToCalendarDate(o,r)}}return o};let u=0,h=this.isoToCalendarDate(c,r),T=simpleDateDiff(n,h);if(0!==T.years||0!==T.months||0!==T.days){const e=365*T.years+30*T.months+T.days;c=this.addDaysIso(c,e),h=this.isoToCalendarDate(c,r),T=simpleDateDiff(n,h),0===T.years&&0===T.months?c=calculateSameMonthResult(T.days):u=this.compareCalendarDates(n,h)}let p=8,f=!1;for(;u;){c=this.addDaysIso(c,u*p);const e=h;h=this.isoToCalendarDate(c,r);const a=u;if(u=this.compareCalendarDates(n,h),u)if(T=simpleDateDiff(n,h),0===T.years&&0===T.months)c=calculateSameMonthResult(T.days),u=0,f=n.day>this.minimumMonthLength(n);else if(a&&u!==a)if(p>1)p/=2;else{if("reject"===t)throw new RangeError(`Can't find ISO date from calendar date: ${JSON.stringify({...o})}`);this.compareCalendarDates(h,e)>0&&(c=this.addDaysIso(c,-1)),f=!0,u=0}}if(r.set(l,c),d&&r.set(d,c),void 0===n.year||void 0===n.month||void 0===n.day||void 0===n.monthCode||this.hasEra&&(void 0===n.era||void 0===n.eraYear))throw new RangeError("Unexpected missing property");if(!f){const e=JSON.stringify({func:"isoToCalendarDate",isoYear:c.year,isoMonth:c.month,isoDay:c.day,id:this.id});r.set(e,n)}return c}temporalToCalendarDate(e,t){const r={year:GetSlot(e,n),month:GetSlot(e,a),day:GetSlot(e,i)};return this.isoToCalendarDate(r,t)}compareCalendarDates(e,t){const r=PrepareTemporalFields(e,["day","month","year"],["day","month","year"]),o=PrepareTemporalFields(t,["day","month","year"],["day","month","year"]);return r.year!==o.year?ComparisonResult(r.year-o.year):r.month!==o.month?ComparisonResult(r.month-o.month):r.day!==o.day?ComparisonResult(r.day-o.day):0}regulateDate(e,t="constrain",r){const o=this.calendarToIsoDate(e,t,r);return this.isoToCalendarDate(o,r)}addDaysIso(e,t){return AddISODate(e.year,e.month,e.day,0,0,0,t,"constrain")}addDaysCalendar(e,t,r){const o=this.calendarToIsoDate(e,"constrain",r),n=this.addDaysIso(o,t);return this.isoToCalendarDate(n,r)}addMonthsCalendar(e,t,r,o){let n=e;const{day:a}=n;for(let e=0,r=dt(t);e<r;e++){const{month:e}=n,r=n,i=t<0?-Math.max(a,this.daysInPreviousMonth(n,o)):this.daysInMonth(n,o),s=this.calendarToIsoDate(n,"constrain",o);let l=this.addDaysIso(s,i);if(n=this.isoToCalendarDate(l,o),t>0){const t=this.monthsInYear(r,o);for(;n.month-1!=e%t;)l=this.addDaysIso(l,-1),n=this.isoToCalendarDate(l,o)}n.day!==a&&(n=this.regulateDate({...n,day:a},"constrain",o))}if("reject"===r&&n.day!==a)throw new RangeError(`Day ${a} does not exist in resulting calendar month`);return n}addCalendar(e,{years:t=0,months:r=0,weeks:o=0,days:n=0},a,i){const{year:s,day:l,monthCode:d}=e,m=this.adjustCalendarDate({year:s+t,monthCode:d,day:l},i),c=this.addMonthsCalendar(m,r,a,i),u=n+7*o;return this.addDaysCalendar(c,u,i)}untilCalendar(e,t,r,o){let n=0,a=0,i=0,s=0;switch(r){case"day":n=this.calendarDaysUntil(e,t,o);break;case"week":{const r=this.calendarDaysUntil(e,t,o);n=r%7,a=(r-n)/7;break}case"month":case"year":{const a=t.year-e.year,l=t.month-e.month,d=t.day-e.day,m=this.compareCalendarDates(t,e);if(!m)return{years:0,months:0,weeks:0,days:0};if("year"===r&&a){s=l*m<0||0===l&&d*m<0?a-m:a}let c,u=s?this.addCalendar(e,{years:s},"constrain",o):e;do{i+=m,c=u,u=this.addMonthsCalendar(c,m,"constrain",o),u.day!==e.day&&(u=this.regulateDate({...u,day:e.day},"constrain",o))}while(this.compareCalendarDates(t,u)*m>=0);i-=m;n=this.calendarDaysUntil(c,t,o);break}}return{years:s,months:i,weeks:a,days:n}}daysInMonth(e,t){const{day:r}=e,o=this.maximumMonthLength(e),n=this.minimumMonthLength(e);if(n===o)return n;const a=r<=o-n?o:n,i=this.calendarToIsoDate(e,"constrain",t),s=this.addDaysIso(i,a),l=this.isoToCalendarDate(s,t),d=this.addDaysIso(s,-l.day);return this.isoToCalendarDate(d,t).day}daysInPreviousMonth(e,t){const{day:r,month:o,year:n}=e;let a={year:o>1?n:n-1,month:o,day:1};const i=o>1?o-1:this.monthsInYear(a,t);a={...a,month:i};const s=this.minimumMonthLength(a),l=this.maximumMonthLength(a);if(s===l)return l;const d=this.calendarToIsoDate(e,"constrain",t),m=this.addDaysIso(d,-r);return this.isoToCalendarDate(m,t).day}startOfCalendarYear(e){return{year:e.year,month:1,monthCode:"M01",day:1}}startOfCalendarMonth(e){return{year:e.year,month:e.month,day:1}}calendarDaysUntil(e,t,r){const o=this.calendarToIsoDate(e,"constrain",r),n=this.calendarToIsoDate(t,"constrain",r);return this.isoDaysUntil(o,n)}isoDaysUntil(e,t){return DifferenceISODate(e.year,e.month,e.day,t.year,t.month,t.day,"day").days}monthDayFromFields(e,t,r){let o,n,a,i,s,{year:l,month:d,monthCode:m,day:c,era:u,eraYear:h}=e;if(void 0===m){if(void 0===l&&(void 0===u||void 0===h))throw new TypeError("`monthCode`, `year`, or `era` and `eraYear` is required");({monthCode:m,year:l}=this.adjustCalendarDate({year:l,month:d,monthCode:m,day:c,era:u,eraYear:h},r,t))}const{year:T}=this.isoToCalendarDate({year:1972,month:1,day:1},r);for(let e=0;e<100;e++){const l=this.adjustCalendarDate({day:c,monthCode:m,year:T-e},r),d=this.calendarToIsoDate(l,"constrain",r),u=this.isoToCalendarDate(d,r);if(({year:o,month:n,day:a}=d),u.monthCode===m&&u.day===c)return{month:n,day:a,year:o};"constrain"===t&&(void 0===i||u.monthCode===i.monthCode&&u.day>i.day)&&(i=u,s=d)}if("constrain"===t&&void 0!==s)return s;throw new RangeError(`No recent ${this.id} year with monthCode ${m} and day ${c}`)}}class HebrewHelper extends HelperBase{constructor(){super(...arguments),this.id="hebrew",this.calendarType="lunisolar",this.months={Tishri:{leap:1,regular:1,monthCode:"M01",days:30},Heshvan:{leap:2,regular:2,monthCode:"M02",days:{min:29,max:30}},Kislev:{leap:3,regular:3,monthCode:"M03",days:{min:29,max:30}},Tevet:{leap:4,regular:4,monthCode:"M04",days:29},Shevat:{leap:5,regular:5,monthCode:"M05",days:30},Adar:{leap:void 0,regular:6,monthCode:"M06",days:29},"Adar I":{leap:6,regular:void 0,monthCode:"M05L",days:30},"Adar II":{leap:7,regular:void 0,monthCode:"M06",days:29},Nisan:{leap:8,regular:7,monthCode:"M07",days:30},Iyar:{leap:9,regular:8,monthCode:"M08",days:29},Sivan:{leap:10,regular:9,monthCode:"M09",days:30},Tamuz:{leap:11,regular:10,monthCode:"M10",days:29},Av:{leap:12,regular:11,monthCode:"M11",days:30},Elul:{leap:13,regular:12,monthCode:"M12",days:29}},this.hasEra=!1}inLeapYear(e){const{year:t}=e;return(7*t+1)%19<7}monthsInYear(e){return this.inLeapYear(e)?13:12}minimumMonthLength(e){return this.minMaxMonthLength(e,"min")}maximumMonthLength(e){return this.minMaxMonthLength(e,"max")}minMaxMonthLength(e,t){const{month:r,year:o}=e,n=this.getMonthCode(o,r),a=ct(this.months).find((e=>e[1].monthCode===n));if(void 0===a)throw new RangeError(`unmatched Hebrew month: ${r}`);const i=a[1].days;return"number"==typeof i?i:i[t]}estimateIsoDate(e){const{year:t}=e;return{year:t-3760,month:1,day:1}}getMonthCode(e,t){return this.inLeapYear({year:e})?6===t?buildMonthCode(5,!0):buildMonthCode(t<6?t:t-1):buildMonthCode(t)}adjustCalendarDate(e,t,r="constrain",o=!1){let{year:n,eraYear:a,month:i,monthCode:s,day:l,monthExtra:d}=e;if(void 0===n&&void 0!==a&&(n=a),void 0===a&&void 0!==n&&(a=n),o){if(d){const e=this.months[d];if(!e)throw new RangeError(`Unrecognized month from formatToParts: ${d}`);i=this.inLeapYear({year:n})?e.leap:e.regular}s=this.getMonthCode(n,i);return{year:n,month:i,day:l,era:void 0,eraYear:a,monthCode:s}}if(this.validateCalendarDate(e),void 0===i)if(s.endsWith("L")){if("M05L"!==s)throw new RangeError(`Hebrew leap month must have monthCode M05L, not ${s}`);if(i=6,!this.inLeapYear({year:n})){if("reject"===r)throw new RangeError(`Hebrew monthCode M05L is invalid in year ${n} which is not a leap year`);i=5,l=30,s="M05"}}else{i=monthCodeNumberPart(s),this.inLeapYear({year:n})&&i>=6&&i++;const e=this.monthsInYear({year:n});if(i<1||i>e)throw new RangeError(`Invalid monthCode: ${s}`)}else if("reject"===r?(RejectToRange(i,1,this.monthsInYear({year:n})),RejectToRange(l,1,this.maximumMonthLength({year:n,month:i}))):(i=ConstrainToRange(i,1,this.monthsInYear({year:n})),l=ConstrainToRange(l,1,this.maximumMonthLength({year:n,month:i}))),void 0===s)s=this.getMonthCode(n,i);else{if(this.getMonthCode(n,i)!==s)throw new RangeError(`monthCode ${s} doesn't correspond to month ${i} in Hebrew year ${n}`)}return{...e,day:l,month:i,monthCode:s,year:n,eraYear:a}}}class IslamicBaseHelper extends HelperBase{constructor(){super(...arguments),this.calendarType="lunar",this.DAYS_PER_ISLAMIC_YEAR=354+11/30,this.DAYS_PER_ISO_YEAR=365.2425,this.constantEra="ah"}inLeapYear(e,t){return 30===this.daysInMonth({year:e.year,month:12,day:1},t)}monthsInYear(){return 12}minimumMonthLength(){return 29}maximumMonthLength(){return 30}estimateIsoDate(e){const{year:t}=this.adjustCalendarDate(e);return{year:mt(t*this.DAYS_PER_ISLAMIC_YEAR/this.DAYS_PER_ISO_YEAR)+622,month:1,day:1}}}class IslamicHelper extends IslamicBaseHelper{constructor(){super(...arguments),this.id="islamic"}}class IslamicUmalquraHelper extends IslamicBaseHelper{constructor(){super(...arguments),this.id="islamic-umalqura"}}class IslamicTblaHelper extends IslamicBaseHelper{constructor(){super(...arguments),this.id="islamic-tbla"}}class IslamicCivilHelper extends IslamicBaseHelper{constructor(){super(...arguments),this.id="islamic-civil"}}class IslamicRgsaHelper extends IslamicBaseHelper{constructor(){super(...arguments),this.id="islamic-rgsa"}}class IslamicCcHelper extends IslamicBaseHelper{constructor(){super(...arguments),this.id="islamicc"}}class PersianHelper extends HelperBase{constructor(){super(...arguments),this.id="persian",this.calendarType="solar",this.constantEra="ap"}inLeapYear(e,t){return IslamicHelper.prototype.inLeapYear.call(this,e,t)}monthsInYear(){return 12}minimumMonthLength(e){const{month:t}=e;return 12===t?29:t<=6?31:30}maximumMonthLength(e){const{month:t}=e;return 12===t?30:t<=6?31:30}estimateIsoDate(e){const{year:t}=this.adjustCalendarDate(e);return{year:t+621,month:1,day:1}}}class IndianHelper extends HelperBase{constructor(){super(...arguments),this.id="indian",this.calendarType="solar",this.constantEra="saka",this.months={1:{length:30,month:3,day:22,leap:{length:31,month:3,day:21}},2:{length:31,month:4,day:21},3:{length:31,month:5,day:22},4:{length:31,month:6,day:22},5:{length:31,month:7,day:23},6:{length:31,month:8,day:23},7:{length:30,month:9,day:23},8:{length:30,month:10,day:23},9:{length:30,month:11,day:22},10:{length:30,month:12,day:22},11:{length:30,month:1,nextYear:!0,day:21},12:{length:30,month:2,nextYear:!0,day:20}},this.vulnerableToBceBug="10/11/-79 Saka"!==new Date("0000-01-01T00:00Z").toLocaleDateString("en-US-u-ca-indian",{timeZone:"UTC"})}inLeapYear(e){return isGregorianLeapYear(e.year+78)}monthsInYear(){return 12}minimumMonthLength(e){return this.getMonthInfo(e).length}maximumMonthLength(e){return this.getMonthInfo(e).length}getMonthInfo(e){const{month:t}=e;let r=this.months[t];if(void 0===r)throw new RangeError(`Invalid month: ${t}`);return this.inLeapYear(e)&&r.leap&&(r=r.leap),r}estimateIsoDate(e){const t=this.adjustCalendarDate(e),r=this.getMonthInfo(t);return AddISODate(t.year+78+(r.nextYear?1:0),r.month,r.day,0,0,0,t.day-1,"constrain")}checkIcuBugs(e){if(this.vulnerableToBceBug&&e.year<1)throw new RangeError(`calendar '${this.id}' is broken for ISO dates before 0001-01-01 (see https://bugs.chromium.org/p/v8/issues/detail?id=10529)`)}}function isGregorianLeapYear(e){return e%4==0&&(e%100!=0||e%400==0)}class GregorianBaseHelper extends HelperBase{constructor(e,t){super(),this.calendarType="solar",this.v8IsVulnerableToJulianBug=new Date("+001001-01-01T00:00Z").toLocaleDateString("en-US-u-ca-japanese",{timeZone:"UTC"}).startsWith("12"),this.calendarIsVulnerableToJulianBug=!1,this.id=e;const{eras:r,anchorEra:o}=function adjustEras(e){let t,r=e;if(0===r.length)throw new RangeError("Invalid era data: eras are required");if(1===r.length&&r[0].reverseOf)throw new RangeError("Invalid era data: anchor era cannot count years backwards");if(1===r.length&&!r[0].name)throw new RangeError("Invalid era data: at least one named era is required");if(r.filter((e=>null!=e.reverseOf)).length>1)throw new RangeError("Invalid era data: only one era can count years backwards");r.forEach((e=>{if(e.isAnchor||!e.anchorEpoch&&!e.reverseOf){if(t)throw new RangeError("Invalid era data: cannot have multiple anchor eras");t=e,e.anchorEpoch={year:e.hasYearZero?0:1}}else if(!e.name)throw new RangeError("If era name is blank, it must be the anchor era")})),r=r.filter((e=>e.name)),r.forEach((e=>{const{reverseOf:t}=e;if(t){const o=r.find((e=>e.name===t));if(void 0===o)throw new RangeError(`Invalid era data: unmatched reverseOf era: ${t}`);e.reverseOf=o,e.anchorEpoch=o.anchorEpoch,e.isoEpoch=o.isoEpoch}void 0===e.anchorEpoch.month&&(e.anchorEpoch.month=1),void 0===e.anchorEpoch.day&&(e.anchorEpoch.day=1)})),lt.call(r,((e,t)=>{if(e.reverseOf)return 1;if(t.reverseOf)return-1;if(!e.isoEpoch||!t.isoEpoch)throw new RangeError("Invalid era data: missing ISO epoch");return t.isoEpoch.year-e.isoEpoch.year}));const o=r[r.length-1].reverseOf;if(o&&o!==r[r.length-2])throw new RangeError("Invalid era data: invalid reverse-sign era");return r.forEach(((e,t)=>{e.genericName="era"+(r.length-1-t)})),{eras:r,anchorEra:t||r[0]}}(t);this.anchorEra=o,this.eras=r}inLeapYear(e){const{year:t}=this.estimateIsoDate({month:1,day:1,year:e.year});return isGregorianLeapYear(t)}monthsInYear(){return 12}minimumMonthLength(e){const{month:t}=e;return 2===t?this.inLeapYear(e)?29:28:[4,6,9,11].indexOf(t)>=0?30:31}maximumMonthLength(e){return this.minimumMonthLength(e)}completeEraYear(e){const checkField=(t,r)=>{const o=e[t];if(null!=o&&o!=r)throw new RangeError(`Input ${t} ${o} doesn't match calculated value ${r}`)},eraFromYear=t=>{let r;const o={...e,year:t},n=this.eras.find(((e,n)=>{if(n===this.eras.length-1){if(e.reverseOf){if(t>0)throw new RangeError(`Signed year ${t} is invalid for era ${e.name}`);return r=e.anchorEpoch.year-t,!0}return r=t-e.anchorEpoch.year+(e.hasYearZero?0:1),!0}return this.compareCalendarDates(o,e.anchorEpoch)>=0&&(r=t-e.anchorEpoch.year+(e.hasYearZero?0:1),!0)}));if(!n)throw new RangeError(`Year ${t} was not matched by any era`);return{eraYear:r,era:n.name}};let{year:t,eraYear:r,era:o}=e;if(null!=t)({eraYear:r,era:o}=eraFromYear(t)),checkField("era",o),checkField("eraYear",r);else{if(null==r)throw new RangeError("Either `year` or `eraYear` and `era` are required");{const e=void 0===o?void 0:this.eras.find((e=>e.name===o||e.genericName===o));if(!e)throw new RangeError(`Era ${o} (ISO year ${r}) was not matched by any era`);if(r<1&&e.reverseOf)throw new RangeError(`Years in ${o} era must be positive, not ${t}`);t=e.reverseOf?e.anchorEpoch.year-r:r+e.anchorEpoch.year-(e.hasYearZero?0:1),checkField("year",t),({eraYear:r,era:o}=eraFromYear(t))}}return{...e,year:t,eraYear:r,era:o}}adjustCalendarDate(e,t,r="constrain"){let o=e;const{month:n,monthCode:a}=o;return void 0===n&&(o={...o,month:monthCodeNumberPart(a)}),this.validateCalendarDate(o),o=this.completeEraYear(o),super.adjustCalendarDate(o,t,r)}estimateIsoDate(e){const t=this.adjustCalendarDate(e),{year:r,month:o,day:n}=t,{anchorEra:a}=this;return RegulateISODate(r+a.isoEpoch.year-(a.hasYearZero?0:1),o,n,"constrain")}checkIcuBugs(e){if(this.calendarIsVulnerableToJulianBug&&this.v8IsVulnerableToJulianBug){if(CompareISODate(e.year,e.month,e.day,1582,10,15)<0)throw new RangeError(`calendar '${this.id}' is broken for ISO dates before 1582-10-15 (see https://bugs.chromium.org/p/chromium/issues/detail?id=1173158)`)}}}class OrthodoxBaseHelper extends GregorianBaseHelper{constructor(e,t){super(e,t)}inLeapYear(e){const{year:t}=e;return(t+1)%4==0}monthsInYear(){return 13}minimumMonthLength(e){const{month:t}=e;return 13===t?this.inLeapYear(e)?6:5:30}maximumMonthLength(e){return this.minimumMonthLength(e)}}class EthioaaHelper extends OrthodoxBaseHelper{constructor(){super("ethioaa",[{name:"era0",isoEpoch:{year:-5492,month:7,day:17}}])}}class CopticHelper extends OrthodoxBaseHelper{constructor(){super("coptic",[{name:"era1",isoEpoch:{year:284,month:8,day:29}},{name:"era0",reverseOf:"era1"}])}}class EthiopicHelper extends OrthodoxBaseHelper{constructor(){super("ethiopic",[{name:"era0",isoEpoch:{year:-5492,month:7,day:17}},{name:"era1",isoEpoch:{year:8,month:8,day:27},anchorEpoch:{year:5501}}])}}class RocHelper extends GregorianBaseHelper{constructor(){super("roc",[{name:"minguo",isoEpoch:{year:1912,month:1,day:1}},{name:"before-roc",reverseOf:"minguo"}]),this.calendarIsVulnerableToJulianBug=!0}}class BuddhistHelper extends GregorianBaseHelper{constructor(){super("buddhist",[{name:"be",hasYearZero:!0,isoEpoch:{year:-543,month:1,day:1}}]),this.calendarIsVulnerableToJulianBug=!0}}class GregoryHelper extends GregorianBaseHelper{constructor(){super("gregory",[{name:"ce",isoEpoch:{year:1,month:1,day:1}},{name:"bce",reverseOf:"ce"}])}reviseIntlEra(e){let{era:t,eraYear:r}=e;return"bc"!==t&&"b"!==t||(t="bce"),"ad"!==t&&"a"!==t||(t="ce"),{era:t,eraYear:r}}}class JapaneseHelper extends GregorianBaseHelper{constructor(){super("japanese",[{name:"reiwa",isoEpoch:{year:2019,month:5,day:1},anchorEpoch:{year:2019,month:5,day:1}},{name:"heisei",isoEpoch:{year:1989,month:1,day:8},anchorEpoch:{year:1989,month:1,day:8}},{name:"showa",isoEpoch:{year:1926,month:12,day:25},anchorEpoch:{year:1926,month:12,day:25}},{name:"taisho",isoEpoch:{year:1912,month:7,day:30},anchorEpoch:{year:1912,month:7,day:30}},{name:"meiji",isoEpoch:{year:1868,month:9,day:8},anchorEpoch:{year:1868,month:9,day:8}},{name:"ce",isoEpoch:{year:1,month:1,day:1}},{name:"bce",reverseOf:"ce"}]),this.calendarIsVulnerableToJulianBug=!0,this.eraLength="long"}reviseIntlEra(e,t){const{era:r,eraYear:o}=e,{year:n}=t;return this.eras.find((e=>e.name===r))?{era:r,eraYear:o}:n<1?{era:"bce",eraYear:1-n}:{era:"ce",eraYear:n}}}class ChineseBaseHelper extends HelperBase{constructor(){super(...arguments),this.calendarType="lunisolar",this.hasEra=!1}inLeapYear(e,t){const r=this.getMonthList(e.year,t);return 13===ct(r).length}monthsInYear(e,t){return this.inLeapYear(e,t)?13:12}minimumMonthLength(){return 29}maximumMonthLength(){return 30}getMonthList(e,t){if(void 0===e)throw new TypeError("Missing year");const r=JSON.stringify({func:"getMonthList",calendarYear:e,id:this.id}),o=t.get(r);if(o)return o;const n=this.getFormatter(),getCalendarDate=(e,t)=>{const r=toUtcIsoDateString({isoYear:e,isoMonth:2,isoDay:1}),o=new Date(r);o.setUTCDate(t+1);const a=n.formatToParts(o),i=a.find((e=>"month"===e.type)).value,s=+a.find((e=>"day"===e.type)).value;let l=a.find((e=>"relatedYear"===e.type));if(void 0===l)throw new RangeError(`Intl.DateTimeFormat.formatToParts lacks relatedYear in ${this.id} calendar. Try Node 14+ or modern browsers.`);return l=+l.value,{calendarMonthString:i,calendarDay:s,calendarYearToVerify:l}};let a=17,{calendarMonthString:i,calendarDay:s,calendarYearToVerify:l}=getCalendarDate(e,a);"1"!==i&&(a+=29,({calendarMonthString:i,calendarDay:s}=getCalendarDate(e,a))),a-=s-5;const d={};let m,c,u=1,h=!1;do{({calendarMonthString:i,calendarDay:s,calendarYearToVerify:l}=getCalendarDate(e,a)),m&&(d[c].daysInMonth=m+30-s),l!==e?h=!0:(d[i]={monthIndex:u++},a+=30),m=s,c=i}while(!h);return d[c].daysInMonth=m+30-s,t.set(r,d),d}estimateIsoDate(e){const{year:t,month:r}=e;return{year:t,month:r>=12?12:r+1,day:1}}adjustCalendarDate(e,t,r="constrain",o=!1){let{year:n,month:a,monthExtra:i,day:s,monthCode:l,eraYear:d}=e;if(o){if(n=d,i&&"bis"!==i)throw new RangeError(`Unexpected leap month suffix: ${i}`);const e=buildMonthCode(a,void 0!==i),r=`${a}${i||""}`,o=this.getMonthList(n,t)[r];if(void 0===o)throw new RangeError(`Unmatched month ${r} in Chinese year ${n}`);return a=o.monthIndex,{year:n,month:a,day:s,era:void 0,eraYear:d,monthCode:e}}if(this.validateCalendarDate(e),void 0===n&&(n=d),void 0===d&&(d=n),void 0===a){const e=this.getMonthList(n,t);let o=l.replace("L","bis").slice(1);"0"===o[0]&&(o=o.slice(1));let i=e[o];if(a=i&&i.monthIndex,void 0===a&&l.endsWith("L")&&!at.call(["M01L","M12L","M13L"],l)&&"constrain"===r){let t=l.slice(1,-1);"0"===t[0]&&(t=t.slice(1)),i=e[t],i&&(({daysInMonth:s,monthIndex:a}=i),l=buildMonthCode(t))}if(void 0===a)throw new RangeError(`Unmatched month ${l} in Chinese year ${n}`)}else if(void 0===l){const e=this.getMonthList(n,t),o=ct(e),i=o.length;"reject"===r?(RejectToRange(a,1,i),RejectToRange(s,1,this.maximumMonthLength())):(a=ConstrainToRange(a,1,i),s=ConstrainToRange(s,1,this.maximumMonthLength()));const d=o.find((([,e])=>e.monthIndex===a));if(void 0===d)throw new RangeError(`Invalid month ${a} in Chinese year ${n}`);l=buildMonthCode(d[0].replace("bis",""),-1!==d[0].indexOf("bis"))}else{const e=this.getMonthList(n,t);let r=l.replace("L","bis").slice(1);"0"===r[0]&&(r=r.slice(1));const o=e[r];if(!o)throw new RangeError(`Unmatched monthCode ${l} in Chinese year ${n}`);if(a!==o.monthIndex)throw new RangeError(`monthCode ${l} doesn't correspond to month ${a} in Chinese year ${n}`)}return{...e,year:n,eraYear:d,month:a,monthCode:l,day:s}}}class ChineseHelper extends ChineseBaseHelper{constructor(){super(...arguments),this.id="chinese"}}class DangiHelper extends ChineseBaseHelper{constructor(){super(...arguments),this.id="dangi"}}const Tt={helper:void 0,dateFromFields(e,t,r){const o=ToTemporalOverflow(t),n=new OneObjectCache,a=PrepareTemporalFields(e,["day","era","eraYear","month","monthCode","year"],["day"]),{year:i,month:s,day:l}=this.helper.calendarToIsoDate(a,o,n),d=CreateTemporalDate(i,s,l,r);return n.setObject(d),d},yearMonthFromFields(e,t,r){const o=ToTemporalOverflow(t),n=new OneObjectCache,a=PrepareTemporalFields(e,["era","eraYear","month","monthCode","year"],[]),{year:i,month:s,day:l}=this.helper.calendarToIsoDate({...a,day:1},o,n),d=CreateTemporalYearMonth(i,s,r,l);return n.setObject(d),d},monthDayFromFields(e,t,r){const o=ToTemporalOverflow(t),n=new OneObjectCache,a=PrepareTemporalFields(e,["day","era","eraYear","month","monthCode","year"],["day"]),{year:i,month:s,day:l}=this.helper.monthDayFromFields(a,o,n),d=CreateTemporalMonthDay(s,l,r,i);return n.setObject(d),d},fields(e){let t=e;return at.call(t,"year")&&(t=[...t,"era","eraYear"]),t},mergeFields(e,t){const r={...e},o={...t},{month:n,monthCode:a,year:i,era:s,eraYear:l,...d}=r,{month:m,monthCode:c,year:u,era:h,eraYear:T}=o;return void 0===m&&void 0===c&&(d.month=n,d.monthCode=a),void 0===u&&void 0===h&&void 0===T&&(d.year=i),{...d,...o}},dateAdd(e,t,r,o,n,a,i){const s=OneObjectCache.getCacheForObject(e),l=this.helper.temporalToCalendarDate(e,s),d=this.helper.addCalendar(l,{years:t,months:r,weeks:o,days:n},a,s),m=this.helper.calendarToIsoDate(d,"constrain",s),{year:c,month:u,day:h}=m,T=CreateTemporalDate(c,u,h,i);return new OneObjectCache(s).setObject(T),T},dateUntil(e,t,r){const o=OneObjectCache.getCacheForObject(e),n=OneObjectCache.getCacheForObject(t),a=this.helper.temporalToCalendarDate(e,o),i=this.helper.temporalToCalendarDate(t,n);return this.helper.untilCalendar(a,i,r,o)},year(e){const t=OneObjectCache.getCacheForObject(e);return this.helper.temporalToCalendarDate(e,t).year},month(e){const t=OneObjectCache.getCacheForObject(e);return this.helper.temporalToCalendarDate(e,t).month},day(e){const t=OneObjectCache.getCacheForObject(e);return this.helper.temporalToCalendarDate(e,t).day},era(e){if(!this.helper.hasEra)return;const t=OneObjectCache.getCacheForObject(e);return this.helper.temporalToCalendarDate(e,t).era},eraYear(e){if(!this.helper.hasEra)return;const t=OneObjectCache.getCacheForObject(e);return this.helper.temporalToCalendarDate(e,t).eraYear},monthCode(e){const t=OneObjectCache.getCacheForObject(e);return this.helper.temporalToCalendarDate(e,t).monthCode},dayOfWeek:e=>ht.iso8601.dayOfWeek(e),dayOfYear(e){const t=OneObjectCache.getCacheForObject(e),r=this.helper.isoToCalendarDate(e,t),o=this.helper.startOfCalendarYear(r);return this.helper.calendarDaysUntil(o,r,t)+1},weekOfYear:e=>ht.iso8601.weekOfYear(e),daysInWeek:e=>ht.iso8601.daysInWeek(e),daysInMonth(e){const t=OneObjectCache.getCacheForObject(e),r=this.helper.temporalToCalendarDate(e,t),o=this.helper.maximumMonthLength(r);if(o===this.helper.minimumMonthLength(r))return o;const n=this.helper.startOfCalendarMonth(r),a=this.helper.addMonthsCalendar(n,1,"constrain",t);return this.helper.calendarDaysUntil(n,a,t)},daysInYear(e){let t=e;HasSlot(t,n)||(t=ToTemporalDate(t));const r=OneObjectCache.getCacheForObject(t),o=this.helper.temporalToCalendarDate(t,r),a=this.helper.startOfCalendarYear(o),i=this.helper.addCalendar(a,{years:1},"constrain",r);return this.helper.calendarDaysUntil(a,i,r)},monthsInYear(e){const t=OneObjectCache.getCacheForObject(e),r=this.helper.temporalToCalendarDate(e,t);return this.helper.monthsInYear(r,t)},inLeapYear(e){let t=e;HasSlot(t,n)||(t=ToTemporalDate(t));const r=OneObjectCache.getCacheForObject(t),o=this.helper.temporalToCalendarDate(t,r);return this.helper.inLeapYear(o,r)}};for(const e of[HebrewHelper,PersianHelper,EthiopicHelper,EthioaaHelper,CopticHelper,ChineseHelper,DangiHelper,RocHelper,IndianHelper,BuddhistHelper,GregoryHelper,JapaneseHelper,IslamicHelper,IslamicUmalquraHelper,IslamicTblaHelper,IslamicCivilHelper,IslamicRgsaHelper,IslamicCcHelper]){const t=new e;ht[t.id]={...Tt,helper:t}}class PlainDate{constructor(e,t,r,o=GetISO8601Calendar()){const n=ToIntegerThrowOnInfinity(e),a=ToIntegerThrowOnInfinity(t),i=ToIntegerThrowOnInfinity(r),s=ToTemporalCalendar(o);if(arguments.length<3)throw new RangeError("missing argument: isoYear, isoMonth and isoDay are required");CreateTemporalDateSlots(this,n,a,i,s)}get calendar(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return GetSlot(this,h)}get era(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarEra(GetSlot(this,h),this)}get eraYear(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarEraYear(GetSlot(this,h),this)}get year(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarYear(GetSlot(this,h),this)}get month(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarMonth(GetSlot(this,h),this)}get monthCode(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarMonthCode(GetSlot(this,h),this)}get day(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarDay(GetSlot(this,h),this)}get dayOfWeek(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarDayOfWeek(GetSlot(this,h),this)}get dayOfYear(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarDayOfYear(GetSlot(this,h),this)}get weekOfYear(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarWeekOfYear(GetSlot(this,h),this)}get daysInWeek(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarDaysInWeek(GetSlot(this,h),this)}get daysInMonth(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarDaysInMonth(GetSlot(this,h),this)}get daysInYear(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarDaysInYear(GetSlot(this,h),this)}get monthsInYear(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarMonthsInYear(GetSlot(this,h),this)}get inLeapYear(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return CalendarInLeapYear(GetSlot(this,h),this)}with(e,t){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");if(!IsObject(e))throw new TypeError("invalid argument");RejectObjectWithCalendarOrTimeZone(e);const r=GetSlot(this,h),o=CalendarFields(r,["day","month","monthCode","year"]),n=PrepareTemporalFields(e,o,"partial");if(!n)throw new TypeError("invalid date-like");let a=PrepareTemporalFields(this,o,[]);a=CalendarMergeFields(r,a,n),a=PrepareTemporalFields(a,o,[]);return CalendarDateFromFields(r,a,GetOptionsObject(t))}withCalendar(e){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");const t=ToTemporalCalendar(e);return new PlainDate(GetSlot(this,n),GetSlot(this,a),GetSlot(this,i),t)}add(e,t){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");const r=ToTemporalDuration(e),o=GetOptionsObject(t);return CalendarDateAdd(GetSlot(this,h),this,r,o)}subtract(e,t){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");const r=CreateNegatedTemporalDuration(ToTemporalDuration(e)),o=GetOptionsObject(t);return CalendarDateAdd(GetSlot(this,h),this,r,o)}until(e,t){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return DifferenceTemporalPlainDate("until",this,e,t)}since(e,t){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return DifferenceTemporalPlainDate("since",this,e,t)}equals(e){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");const t=ToTemporalDate(e);for(const e of[n,a,i]){if(GetSlot(this,e)!==GetSlot(t,e))return!1}return CalendarEquals(GetSlot(this,h),GetSlot(t,h))}toString(e){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return TemporalDateToString(this,ToShowCalendarOption(GetOptionsObject(e)))}toJSON(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return TemporalDateToString(this)}toLocaleString(e,t){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return new ot(e,t).format(this)}valueOf(){throw new TypeError("use compare() or equals() to compare Temporal.PlainDate")}toPlainDateTime(e){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");const t=GetSlot(this,n),r=GetSlot(this,a),o=GetSlot(this,i),T=GetSlot(this,h);if(void 0===e)return CreateTemporalDateTime(t,r,o,0,0,0,0,0,0,T);const p=ToTemporalTime(e);return CreateTemporalDateTime(t,r,o,GetSlot(p,s),GetSlot(p,l),GetSlot(p,d),GetSlot(p,m),GetSlot(p,c),GetSlot(p,u),T)}toZonedDateTime(e){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");let t,o;if(IsObject(e)){const r=e.timeZone;void 0===r?t=ToTemporalTimeZone(e):(t=ToTemporalTimeZone(r),o=e.plainTime)}else t=ToTemporalTimeZone(e);const T=GetSlot(this,n),p=GetSlot(this,a),f=GetSlot(this,i),y=GetSlot(this,h);let S=0,w=0,g=0,I=0,D=0,G=0;void 0!==o&&(o=ToTemporalTime(o),S=GetSlot(o,s),w=GetSlot(o,l),g=GetSlot(o,d),I=GetSlot(o,m),D=GetSlot(o,c),G=GetSlot(o,u));return CreateTemporalZonedDateTime(GetSlot(BuiltinTimeZoneGetInstantFor(t,CreateTemporalDateTime(T,p,f,S,w,g,I,D,G,y),"compatible"),r),t,y)}toPlainYearMonth(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");const e=GetSlot(this,h);return CalendarYearMonthFromFields(e,PrepareTemporalFields(this,CalendarFields(e,["monthCode","year"]),[]))}toPlainMonthDay(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");const e=GetSlot(this,h);return CalendarMonthDayFromFields(e,PrepareTemporalFields(this,CalendarFields(e,["day","monthCode"]),[]))}getISOFields(){if(!IsTemporalDate(this))throw new TypeError("invalid receiver");return{calendar:GetSlot(this,h),isoDay:GetSlot(this,i),isoMonth:GetSlot(this,a),isoYear:GetSlot(this,n)}}static from(e,t){const r=GetOptionsObject(t);return IsTemporalDate(e)?(ToTemporalOverflow(r),CreateTemporalDate(GetSlot(e,n),GetSlot(e,a),GetSlot(e,i),GetSlot(e,h))):ToTemporalDate(e,r)}static compare(e,t){const r=ToTemporalDate(e),o=ToTemporalDate(t);return CompareISODate(GetSlot(r,n),GetSlot(r,a),GetSlot(r,i),GetSlot(o,n),GetSlot(o,a),GetSlot(o,i))}}MakeIntrinsicClass(PlainDate,"Temporal.PlainDate");class PlainDateTime{constructor(e,t,r,o=0,n=0,a=0,i=0,s=0,l=0,d=GetISO8601Calendar()){const m=ToIntegerThrowOnInfinity(e),c=ToIntegerThrowOnInfinity(t),u=ToIntegerThrowOnInfinity(r),h=ToIntegerThrowOnInfinity(o),T=ToIntegerThrowOnInfinity(n),p=ToIntegerThrowOnInfinity(a),f=ToIntegerThrowOnInfinity(i),y=ToIntegerThrowOnInfinity(s),S=ToIntegerThrowOnInfinity(l),w=ToTemporalCalendar(d);if(arguments.length<3)throw new RangeError("missing argument: isoYear, isoMonth and isoDay are required");CreateTemporalDateTimeSlots(this,m,c,u,h,T,p,f,y,S,w)}get calendar(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return GetSlot(this,h)}get year(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarYear(GetSlot(this,h),this)}get month(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarMonth(GetSlot(this,h),this)}get monthCode(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarMonthCode(GetSlot(this,h),this)}get day(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarDay(GetSlot(this,h),this)}get hour(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return GetSlot(this,s)}get minute(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return GetSlot(this,l)}get second(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return GetSlot(this,d)}get millisecond(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return GetSlot(this,m)}get microsecond(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return GetSlot(this,c)}get nanosecond(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return GetSlot(this,u)}get era(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarEra(GetSlot(this,h),this)}get eraYear(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarEraYear(GetSlot(this,h),this)}get dayOfWeek(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarDayOfWeek(GetSlot(this,h),this)}get dayOfYear(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarDayOfYear(GetSlot(this,h),this)}get weekOfYear(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarWeekOfYear(GetSlot(this,h),this)}get daysInWeek(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarDaysInWeek(GetSlot(this,h),this)}get daysInYear(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarDaysInYear(GetSlot(this,h),this)}get daysInMonth(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarDaysInMonth(GetSlot(this,h),this)}get monthsInYear(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarMonthsInYear(GetSlot(this,h),this)}get inLeapYear(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return CalendarInLeapYear(GetSlot(this,h),this)}with(e,t){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");if(!IsObject(e))throw new TypeError("invalid argument");RejectObjectWithCalendarOrTimeZone(e);const r=GetOptionsObject(t),o=GetSlot(this,h),n=CalendarFields(o,["day","hour","microsecond","millisecond","minute","month","monthCode","nanosecond","second","year"]),a=PrepareTemporalFields(e,n,"partial");if(!a)throw new TypeError("invalid date-time-like");let i=PrepareTemporalFields(this,n,[]);i=CalendarMergeFields(o,i,a),i=PrepareTemporalFields(i,n,[]);const{year:s,month:l,day:d,hour:m,minute:c,second:u,millisecond:T,microsecond:p,nanosecond:f}=InterpretTemporalDateTimeFields(o,i,r);return CreateTemporalDateTime(s,l,d,m,c,u,T,p,f,o)}withPlainTime(e){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");const t=GetSlot(this,n),r=GetSlot(this,a),o=GetSlot(this,i),T=GetSlot(this,h);if(void 0===e)return CreateTemporalDateTime(t,r,o,0,0,0,0,0,0,T);const p=ToTemporalTime(e);return CreateTemporalDateTime(t,r,o,GetSlot(p,s),GetSlot(p,l),GetSlot(p,d),GetSlot(p,m),GetSlot(p,c),GetSlot(p,u),T)}withPlainDate(e){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");const t=ToTemporalDate(e),r=GetSlot(t,n),o=GetSlot(t,a),T=GetSlot(t,i);let p=GetSlot(t,h);const f=GetSlot(this,s),y=GetSlot(this,l),S=GetSlot(this,d),w=GetSlot(this,m),g=GetSlot(this,c),I=GetSlot(this,u);return p=ConsolidateCalendars(GetSlot(this,h),p),CreateTemporalDateTime(r,o,T,f,y,S,w,g,I,p)}withCalendar(e){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");const t=ToTemporalCalendar(e);return new PlainDateTime(GetSlot(this,n),GetSlot(this,a),GetSlot(this,i),GetSlot(this,s),GetSlot(this,l),GetSlot(this,d),GetSlot(this,m),GetSlot(this,c),GetSlot(this,u),t)}add(e,t){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return AddDurationToOrSubtractDurationFromPlainDateTime("add",this,e,t)}subtract(e,t){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return AddDurationToOrSubtractDurationFromPlainDateTime("subtract",this,e,t)}until(e,t){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return DifferenceTemporalPlainDateTime("until",this,e,t)}since(e,t){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return DifferenceTemporalPlainDateTime("since",this,e,t)}round(e){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");if(void 0===e)throw new TypeError("options parameter is required");const t="string"==typeof e?CreateOnePropObject("smallestUnit",e):GetOptionsObject(e),r=GetTemporalUnit(t,"smallestUnit","time",je,["day"]),o=ToTemporalRoundingMode(t,"halfExpand"),T=ToTemporalRoundingIncrement(t,{day:1,hour:24,minute:60,second:60,millisecond:1e3,microsecond:1e3,nanosecond:1e3}[r],!1);let p=GetSlot(this,n),f=GetSlot(this,a),y=GetSlot(this,i),S=GetSlot(this,s),w=GetSlot(this,l),g=GetSlot(this,d),I=GetSlot(this,m),D=GetSlot(this,c),G=GetSlot(this,u);return({year:p,month:f,day:y,hour:S,minute:w,second:g,millisecond:I,microsecond:D,nanosecond:G}=RoundISODateTime(p,f,y,S,w,g,I,D,G,T,r,o)),CreateTemporalDateTime(p,f,y,S,w,g,I,D,G,GetSlot(this,h))}equals(e){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");const t=ToTemporalDateTime(e);for(const e of[n,a,i,s,l,d,m,c,u]){if(GetSlot(this,e)!==GetSlot(t,e))return!1}return CalendarEquals(GetSlot(this,h),GetSlot(t,h))}toString(e){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");const t=GetOptionsObject(e),{precision:r,unit:o,increment:n}=ToSecondsStringPrecision(t);return TemporalDateTimeToString(this,r,ToShowCalendarOption(t),{unit:o,increment:n,roundingMode:ToTemporalRoundingMode(t,"trunc")})}toJSON(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return TemporalDateTimeToString(this,"auto")}toLocaleString(e,t){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return new ot(e,t).format(this)}valueOf(){throw new TypeError("use compare() or equals() to compare Temporal.PlainDateTime")}toZonedDateTime(e,t){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");const o=ToTemporalTimeZone(e);return CreateTemporalZonedDateTime(GetSlot(BuiltinTimeZoneGetInstantFor(o,this,ToTemporalDisambiguation(GetOptionsObject(t))),r),o,GetSlot(this,h))}toPlainDate(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return TemporalDateTimeToDate(this)}toPlainYearMonth(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");const e=GetSlot(this,h);return CalendarYearMonthFromFields(e,PrepareTemporalFields(this,CalendarFields(e,["monthCode","year"]),[]))}toPlainMonthDay(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");const e=GetSlot(this,h);return CalendarMonthDayFromFields(e,PrepareTemporalFields(this,CalendarFields(e,["day","monthCode"]),[]))}toPlainTime(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return TemporalDateTimeToTime(this)}getISOFields(){if(!IsTemporalDateTime(this))throw new TypeError("invalid receiver");return{calendar:GetSlot(this,h),isoDay:GetSlot(this,i),isoHour:GetSlot(this,s),isoMicrosecond:GetSlot(this,c),isoMillisecond:GetSlot(this,m),isoMinute:GetSlot(this,l),isoMonth:GetSlot(this,a),isoNanosecond:GetSlot(this,u),isoSecond:GetSlot(this,d),isoYear:GetSlot(this,n)}}static from(e,t){const r=GetOptionsObject(t);return IsTemporalDateTime(e)?(ToTemporalOverflow(r),CreateTemporalDateTime(GetSlot(e,n),GetSlot(e,a),GetSlot(e,i),GetSlot(e,s),GetSlot(e,l),GetSlot(e,d),GetSlot(e,m),GetSlot(e,c),GetSlot(e,u),GetSlot(e,h))):ToTemporalDateTime(e,r)}static compare(e,t){const r=ToTemporalDateTime(e),o=ToTemporalDateTime(t);for(const e of[n,a,i,s,l,d,m,c,u]){const t=GetSlot(r,e),n=GetSlot(o,e);if(t!==n)return ComparisonResult(t-n)}return 0}}MakeIntrinsicClass(PlainDateTime,"Temporal.PlainDateTime");class Duration{constructor(e=0,t=0,r=0,o=0,n=0,a=0,i=0,s=0,l=0,d=0){const m=ToIntegerWithoutRounding(e),c=ToIntegerWithoutRounding(t),u=ToIntegerWithoutRounding(r),h=ToIntegerWithoutRounding(o),T=ToIntegerWithoutRounding(n),p=ToIntegerWithoutRounding(a),C=ToIntegerWithoutRounding(i),E=ToIntegerWithoutRounding(s),b=ToIntegerWithoutRounding(l),M=ToIntegerWithoutRounding(d);RejectDuration(m,c,u,h,T,p,C,E,b,M),CreateSlots(this),SetSlot(this,f,m),SetSlot(this,y,c),SetSlot(this,S,u),SetSlot(this,w,h),SetSlot(this,g,T),SetSlot(this,I,p),SetSlot(this,D,C),SetSlot(this,G,E),SetSlot(this,v,b),SetSlot(this,O,M)}get years(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return GetSlot(this,f)}get months(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return GetSlot(this,y)}get weeks(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return GetSlot(this,S)}get days(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return GetSlot(this,w)}get hours(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return GetSlot(this,g)}get minutes(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return GetSlot(this,I)}get seconds(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return GetSlot(this,D)}get milliseconds(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return GetSlot(this,G)}get microseconds(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return GetSlot(this,v)}get nanoseconds(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return GetSlot(this,O)}get sign(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return DurationSign(GetSlot(this,f),GetSlot(this,y),GetSlot(this,S),GetSlot(this,w),GetSlot(this,g),GetSlot(this,I),GetSlot(this,D),GetSlot(this,G),GetSlot(this,v),GetSlot(this,O))}get blank(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return 0===DurationSign(GetSlot(this,f),GetSlot(this,y),GetSlot(this,S),GetSlot(this,w),GetSlot(this,g),GetSlot(this,I),GetSlot(this,D),GetSlot(this,G),GetSlot(this,v),GetSlot(this,O))}with(e){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");const t=PrepareTemporalFields(e,["days","hours","microseconds","milliseconds","minutes","months","nanoseconds","seconds","weeks","years"],"partial");if(!t)throw new TypeError("invalid duration-like");const{years:r=GetSlot(this,f),months:o=GetSlot(this,y),weeks:n=GetSlot(this,S),days:a=GetSlot(this,w),hours:i=GetSlot(this,g),minutes:s=GetSlot(this,I),seconds:l=GetSlot(this,D),milliseconds:d=GetSlot(this,G),microseconds:m=GetSlot(this,v),nanoseconds:c=GetSlot(this,O)}=t;return new Duration(r,o,n,a,i,s,l,d,m,c)}negated(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return CreateNegatedTemporalDuration(this)}abs(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return new Duration(Math.abs(GetSlot(this,f)),Math.abs(GetSlot(this,y)),Math.abs(GetSlot(this,S)),Math.abs(GetSlot(this,w)),Math.abs(GetSlot(this,g)),Math.abs(GetSlot(this,I)),Math.abs(GetSlot(this,D)),Math.abs(GetSlot(this,G)),Math.abs(GetSlot(this,v)),Math.abs(GetSlot(this,O)))}add(e,t){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return AddDurationToOrSubtractDurationFromDuration("add",this,e,t)}subtract(e,t){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return AddDurationToOrSubtractDurationFromDuration("subtract",this,e,t)}round(e){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");if(void 0===e)throw new TypeError("options parameter is required");let t=GetSlot(this,f),r=GetSlot(this,y),o=GetSlot(this,S),n=GetSlot(this,w),a=GetSlot(this,g),i=GetSlot(this,I),s=GetSlot(this,D),l=GetSlot(this,G),d=GetSlot(this,v),m=GetSlot(this,O),c=DefaultTemporalLargestUnit(t,r,o,n,a,i,s,l,d,m);const u="string"==typeof e?CreateOnePropObject("smallestUnit",e):GetOptionsObject(e);let T=GetTemporalUnit(u,"smallestUnit","datetime",void 0),p=!0;T||(p=!1,T="nanosecond"),c=LargerOfTwoTemporalUnits(c,T);let C=GetTemporalUnit(u,"largestUnit","datetime",void 0,["auto"]),E=!0;if(C||(E=!1,C=c),"auto"===C&&(C=c),!p&&!E)throw new RangeError("at least one of smallestUnit or largestUnit is required");if(LargerOfTwoTemporalUnits(C,T)!==C)throw new RangeError(`largestUnit ${C} cannot be smaller than smallestUnit ${T}`);const b=ToTemporalRoundingMode(u,"halfExpand"),M=ToTemporalDateTimeRoundingIncrement(u,T);let R=ToRelativeTemporalObject(u);return({years:t,months:r,weeks:o,days:n}=UnbalanceDurationRelative(t,r,o,n,C,R)),({years:t,months:r,weeks:o,days:n,hours:a,minutes:i,seconds:s,milliseconds:l,microseconds:d,nanoseconds:m}=RoundDuration(t,r,o,n,a,i,s,l,d,m,M,T,b,R)),({years:t,months:r,weeks:o,days:n,hours:a,minutes:i,seconds:s,milliseconds:l,microseconds:d,nanoseconds:m}=AdjustRoundedDurationDays(t,r,o,n,a,i,s,l,d,m,M,T,b,R)),({years:t,months:r,weeks:o,days:n}=function BalanceDurationRelative(e,t,r,o,n,a){let i=e,s=t,l=r,d=o;const m=GetIntrinsic("%Temporal.Duration%"),c=DurationSign(i,s,l,d,0,0,0,0,0,0);if(0===c)return{years:i,months:s,weeks:l,days:d};let u,T;a&&(T=ToTemporalDate(a),u=GetSlot(T,h));const p=new m(c),f=new m(0,c),S=new m(0,0,c);switch(n){case"year":{if(!u)throw new RangeError("a starting point is required for years balancing");let e,t,r;for(({relativeTo:e,days:t}=MoveRelativeDate(u,T,p));K(d)>=K(t);)d-=t,i+=c,T=e,({relativeTo:e,days:t}=MoveRelativeDate(u,T,p));for(({relativeTo:e,days:r}=MoveRelativeDate(u,T,f));K(d)>=K(r);)d-=r,s+=c,T=e,({relativeTo:e,days:r}=MoveRelativeDate(u,T,f));const o=u.dateAdd;e=CalendarDateAdd(u,T,p,void 0,o);const n=u.dateUntil,a=le(null);a.largestUnit="month";let l=CalendarDateUntil(u,T,e,a,n),m=GetSlot(l,y);for(;K(s)>=K(m);){s-=m,i+=c,T=e,e=CalendarDateAdd(u,T,p,void 0,o);const t=le(null);t.largestUnit="month",l=CalendarDateUntil(u,T,e,t,n),m=GetSlot(l,y)}break}case"month":{if(!u)throw new RangeError("a starting point is required for months balancing");let e,t;for(({relativeTo:e,days:t}=MoveRelativeDate(u,T,f));K(d)>=K(t);)d-=t,s+=c,T=e,({relativeTo:e,days:t}=MoveRelativeDate(u,T,f));break}case"week":{if(!u)throw new RangeError("a starting point is required for weeks balancing");let e,t;for(({relativeTo:e,days:t}=MoveRelativeDate(u,T,S));K(d)>=K(t);)d-=t,l+=c,T=e,({relativeTo:e,days:t}=MoveRelativeDate(u,T,S));break}}return{years:i,months:s,weeks:l,days:d}}(t,r,o,n,C,R)),IsTemporalZonedDateTime(R)&&(R=MoveRelativeZonedDateTime(R,t,r,o,0)),({days:n,hours:a,minutes:i,seconds:s,milliseconds:l,microseconds:d,nanoseconds:m}=BalanceDuration(n,a,i,s,l,d,m,C,R)),new Duration(t,r,o,n,a,i,s,l,d,m)}total(e){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");let t=GetSlot(this,f),r=GetSlot(this,y),o=GetSlot(this,S),n=GetSlot(this,w),a=GetSlot(this,g),i=GetSlot(this,I),s=GetSlot(this,D),l=GetSlot(this,G),d=GetSlot(this,v),m=GetSlot(this,O);if(void 0===e)throw new TypeError("options argument is required");const c="string"==typeof e?CreateOnePropObject("unit",e):GetOptionsObject(e),u=GetTemporalUnit(c,"unit","datetime",je),h=ToRelativeTemporalObject(c);let T;({years:t,months:r,weeks:o,days:n}=UnbalanceDurationRelative(t,r,o,n,u,h)),IsTemporalZonedDateTime(h)&&(T=MoveRelativeZonedDateTime(h,t,r,o,0)),({days:n,hours:a,minutes:i,seconds:s,milliseconds:l,microseconds:d,nanoseconds:m}=BalanceDuration(n,a,i,s,l,d,m,u,T));const{total:p}=RoundDuration(t,r,o,n,a,i,s,l,d,m,1,u,"trunc",h);return p}toString(e){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");const t=GetOptionsObject(e),{precision:r,unit:o,increment:n}=ToSecondsStringPrecision(t);if("minute"===r)throw new RangeError('smallestUnit must not be "minute"');return TemporalDurationToString(this,r,{unit:o,increment:n,roundingMode:ToTemporalRoundingMode(t,"trunc")})}toJSON(){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return TemporalDurationToString(this)}toLocaleString(e,t){if(!IsTemporalDuration(this))throw new TypeError("invalid receiver");return"undefined"!=typeof Intl&&void 0!==Intl.DurationFormat?new Intl.DurationFormat(e,t).format(this):(console.warn("Temporal.Duration.prototype.toLocaleString() requires Intl.DurationFormat."),TemporalDurationToString(this))}valueOf(){throw new TypeError("use compare() to compare Temporal.Duration")}static from(e){return IsTemporalDuration(e)?new Duration(GetSlot(e,f),GetSlot(e,y),GetSlot(e,S),GetSlot(e,w),GetSlot(e,g),GetSlot(e,I),GetSlot(e,D),GetSlot(e,G),GetSlot(e,v),GetSlot(e,O)):ToTemporalDuration(e)}static compare(t,r,o){const n=ToTemporalDuration(t),a=ToTemporalDuration(r),i=ToRelativeTemporalObject(GetOptionsObject(o)),s=GetSlot(n,f),l=GetSlot(n,y),d=GetSlot(n,S);let m=GetSlot(n,w);const c=GetSlot(n,g),u=GetSlot(n,I),h=GetSlot(n,D),T=GetSlot(n,G),p=GetSlot(n,v);let C=GetSlot(n,O);const E=GetSlot(a,f),b=GetSlot(a,y),M=GetSlot(a,S);let R=GetSlot(a,w);const Z=GetSlot(a,g),P=GetSlot(a,I),F=GetSlot(a,D),Y=GetSlot(a,G),j=GetSlot(a,v);let $=GetSlot(a,O);const B=CalculateOffsetShift(i,s,l,d,m),N=CalculateOffsetShift(i,E,b,M,R);0===s&&0===E&&0===l&&0===b&&0===d&&0===M||(({days:m}=UnbalanceDurationRelative(s,l,d,m,"day",i)),({days:R}=UnbalanceDurationRelative(E,b,M,R,"day",i)));const k=TotalDurationNanoseconds(m,c,u,h,T,p,C,B),A=TotalDurationNanoseconds(R,Z,P,F,Y,j,$,N);return ComparisonResult(e.default.toNumber(e.default.subtract(k,A)))}}MakeIntrinsicClass(Duration,"Temporal.Duration");const pt=Object.create;class PlainMonthDay{constructor(e,t,r=GetISO8601Calendar(),o=1972){const n=ToIntegerThrowOnInfinity(e),a=ToIntegerThrowOnInfinity(t),i=ToTemporalCalendar(r),s=ToIntegerThrowOnInfinity(o);if(arguments.length<2)throw new RangeError("missing argument: isoMonth and isoDay are required");CreateTemporalMonthDaySlots(this,n,a,i,s)}get monthCode(){if(!IsTemporalMonthDay(this))throw new TypeError("invalid receiver");return CalendarMonthCode(GetSlot(this,h),this)}get day(){if(!IsTemporalMonthDay(this))throw new TypeError("invalid receiver");return CalendarDay(GetSlot(this,h),this)}get calendar(){if(!IsTemporalMonthDay(this))throw new TypeError("invalid receiver");return GetSlot(this,h)}with(e,t){if(!IsTemporalMonthDay(this))throw new TypeError("invalid receiver");if(!IsObject(e))throw new TypeError("invalid argument");RejectObjectWithCalendarOrTimeZone(e);const r=GetSlot(this,h),o=CalendarFields(r,["day","month","monthCode","year"]),n=PrepareTemporalFields(e,o,"partial");if(!n)throw new TypeError("invalid month-day-like");let a=PrepareTemporalFields(this,o,[]);a=CalendarMergeFields(r,a,n),a=PrepareTemporalFields(a,o,[]);return CalendarMonthDayFromFields(r,a,GetOptionsObject(t))}equals(e){if(!IsTemporalMonthDay(this))throw new TypeError("invalid receiver");const t=ToTemporalMonthDay(e);for(const e of[a,i,n]){if(GetSlot(this,e)!==GetSlot(t,e))return!1}return CalendarEquals(GetSlot(this,h),GetSlot(t,h))}toString(e){if(!IsTemporalMonthDay(this))throw new TypeError("invalid receiver");return TemporalMonthDayToString(this,ToShowCalendarOption(GetOptionsObject(e)))}toJSON(){if(!IsTemporalMonthDay(this))throw new TypeError("invalid receiver");return TemporalMonthDayToString(this)}toLocaleString(e,t){if(!IsTemporalMonthDay(this))throw new TypeError("invalid receiver");return new ot(e,t).format(this)}valueOf(){throw new TypeError("use equals() to compare Temporal.PlainMonthDay")}toPlainDate(e){if(!IsTemporalMonthDay(this))throw new TypeError("invalid receiver");if(!IsObject(e))throw new TypeError("argument should be an object");const t=GetSlot(this,h),r=CalendarFields(t,["day","monthCode"]),o=PrepareTemporalFields(this,r,[]),n=CalendarFields(t,["year"]);let a=CalendarMergeFields(t,o,PrepareTemporalFields(e,n,[]));a=PrepareTemporalFields(a,[...new Set([...r,...n])],[]);const i=pt(null);return i.overflow="reject",CalendarDateFromFields(t,a,i)}getISOFields(){if(!IsTemporalMonthDay(this))throw new TypeError("invalid receiver");return{calendar:GetSlot(this,h),isoDay:GetSlot(this,i),isoMonth:GetSlot(this,a),isoYear:GetSlot(this,n)}}static from(e,t){const r=GetOptionsObject(t);return IsTemporalMonthDay(e)?(ToTemporalOverflow(r),CreateTemporalMonthDay(GetSlot(e,a),GetSlot(e,i),GetSlot(e,h),GetSlot(e,n))):ToTemporalMonthDay(e,r)}}MakeIntrinsicClass(PlainMonthDay,"Temporal.PlainMonthDay");const instant=()=>new(GetIntrinsic("%Temporal.Instant%"))($e()),plainDateTime=(e,t=timeZone())=>{const r=ToTemporalTimeZone(t),o=ToTemporalCalendar(e);return BuiltinTimeZoneGetPlainDateTimeFor(r,instant(),o)},plainDateTimeISO=(e=timeZone())=>{const t=ToTemporalTimeZone(e),r=GetISO8601Calendar();return BuiltinTimeZoneGetPlainDateTimeFor(t,instant(),r)},zonedDateTime=(e,t=timeZone())=>{const r=ToTemporalTimeZone(t),o=ToTemporalCalendar(e);return CreateTemporalZonedDateTime($e(),r,o)},timeZone=()=>function SystemTimeZone(){const e=new J("en-us");return new(GetIntrinsic("%Temporal.TimeZone%"))(ParseTemporalTimeZone(e.resolvedOptions().timeZone))}(),ft={instant,plainDateTime,plainDateTimeISO,plainDate:(e,t=timeZone())=>TemporalDateTimeToDate(plainDateTime(e,t)),plainDateISO:(e=timeZone())=>TemporalDateTimeToDate(plainDateTimeISO(e)),plainTimeISO:(e=timeZone())=>TemporalDateTimeToTime(plainDateTimeISO(e)),timeZone,zonedDateTime,zonedDateTimeISO:(e=timeZone())=>zonedDateTime(GetISO8601Calendar(),e),[Symbol.toStringTag]:"Temporal.Now"};Object.defineProperty(ft,Symbol.toStringTag,{value:"Temporal.Now",writable:!1,enumerable:!1,configurable:!0});const yt=Object.assign;function TemporalTimeToString(e,t,r){let o=GetSlot(e,s),n=GetSlot(e,l),a=GetSlot(e,d),i=GetSlot(e,m),h=GetSlot(e,c),T=GetSlot(e,u);if(r){const{unit:e,increment:t,roundingMode:s}=r;({hour:o,minute:n,second:a,millisecond:i,microsecond:h,nanosecond:T}=RoundTime(o,n,a,i,h,T,t,e,s))}return`${ISODateTimePartString(o)}:${ISODateTimePartString(n)}${FormatSecondsStringPart(a,i,h,T,t)}`}class PlainTime{constructor(e=0,t=0,r=0,o=0,n=0,a=0){const i=ToIntegerThrowOnInfinity(e),T=ToIntegerThrowOnInfinity(t),p=ToIntegerThrowOnInfinity(r),f=ToIntegerThrowOnInfinity(o),y=ToIntegerThrowOnInfinity(n),S=ToIntegerThrowOnInfinity(a);RejectTime(i,T,p,f,y,S),CreateSlots(this),SetSlot(this,s,i),SetSlot(this,l,T),SetSlot(this,d,p),SetSlot(this,m,f),SetSlot(this,c,y),SetSlot(this,u,S),SetSlot(this,h,GetISO8601Calendar())}get calendar(){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return GetSlot(this,h)}get hour(){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return GetSlot(this,s)}get minute(){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return GetSlot(this,l)}get second(){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return GetSlot(this,d)}get millisecond(){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return GetSlot(this,m)}get microsecond(){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return GetSlot(this,c)}get nanosecond(){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return GetSlot(this,u)}with(e,t){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");if(!IsObject(e))throw new TypeError("invalid argument");RejectObjectWithCalendarOrTimeZone(e);const r=ToTemporalTimeRecord(e,"partial"),o=ToTemporalOverflow(GetOptionsObject(t)),n=ToTemporalTimeRecord(this);let{hour:a,minute:i,second:s,millisecond:l,microsecond:d,nanosecond:m}=yt(n,r);return({hour:a,minute:i,second:s,millisecond:l,microsecond:d,nanosecond:m}=RegulateTime(a,i,s,l,d,m,o)),new PlainTime(a,i,s,l,d,m)}add(e){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return AddDurationToOrSubtractDurationFromPlainTime("add",this,e)}subtract(e){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return AddDurationToOrSubtractDurationFromPlainTime("subtract",this,e)}until(e,t){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return DifferenceTemporalPlainTime("until",this,e,t)}since(e,t){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return DifferenceTemporalPlainTime("since",this,e,t)}round(e){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");if(void 0===e)throw new TypeError("options parameter is required");const t="string"==typeof e?CreateOnePropObject("smallestUnit",e):GetOptionsObject(e),r=GetTemporalUnit(t,"smallestUnit","time",je),o=ToTemporalRoundingMode(t,"halfExpand"),n=ToTemporalRoundingIncrement(t,{hour:24,minute:60,second:60,millisecond:1e3,microsecond:1e3,nanosecond:1e3}[r],!1);let a=GetSlot(this,s),i=GetSlot(this,l),h=GetSlot(this,d),T=GetSlot(this,m),p=GetSlot(this,c),f=GetSlot(this,u);return({hour:a,minute:i,second:h,millisecond:T,microsecond:p,nanosecond:f}=RoundTime(a,i,h,T,p,f,n,r,o)),new PlainTime(a,i,h,T,p,f)}equals(e){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");const t=ToTemporalTime(e);for(const e of[s,l,d,m,c,u]){if(GetSlot(this,e)!==GetSlot(t,e))return!1}return!0}toString(e){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");const t=GetOptionsObject(e),{precision:r,unit:o,increment:n}=ToSecondsStringPrecision(t);return TemporalTimeToString(this,r,{unit:o,increment:n,roundingMode:ToTemporalRoundingMode(t,"trunc")})}toJSON(){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return TemporalTimeToString(this,"auto")}toLocaleString(e,t){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return new ot(e,t).format(this)}valueOf(){throw new TypeError("use compare() or equals() to compare Temporal.PlainTime")}toPlainDateTime(e){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");const t=ToTemporalDate(e),r=GetSlot(t,n),o=GetSlot(t,a),T=GetSlot(t,i),p=GetSlot(t,h);return CreateTemporalDateTime(r,o,T,GetSlot(this,s),GetSlot(this,l),GetSlot(this,d),GetSlot(this,m),GetSlot(this,c),GetSlot(this,u),p)}toZonedDateTime(e){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");if(!IsObject(e))throw new TypeError("invalid argument");const t=e.plainDate;if(void 0===t)throw new TypeError("missing date property");const o=ToTemporalDate(t),T=e.timeZone;if(void 0===T)throw new TypeError("missing timeZone property");const p=ToTemporalTimeZone(T),f=GetSlot(o,n),y=GetSlot(o,a),S=GetSlot(o,i),w=GetSlot(o,h),g=GetSlot(this,s),I=GetSlot(this,l),D=GetSlot(this,d),G=GetSlot(this,m),v=GetSlot(this,c),O=GetSlot(this,u);return CreateTemporalZonedDateTime(GetSlot(BuiltinTimeZoneGetInstantFor(p,new(GetIntrinsic("%Temporal.PlainDateTime%"))(f,y,S,g,I,D,G,v,O,w),"compatible"),r),p,w)}getISOFields(){if(!IsTemporalTime(this))throw new TypeError("invalid receiver");return{calendar:GetSlot(this,h),isoHour:GetSlot(this,s),isoMicrosecond:GetSlot(this,c),isoMillisecond:GetSlot(this,m),isoMinute:GetSlot(this,l),isoNanosecond:GetSlot(this,u),isoSecond:GetSlot(this,d)}}static from(e,t){const r=ToTemporalOverflow(GetOptionsObject(t));return IsTemporalTime(e)?new PlainTime(GetSlot(e,s),GetSlot(e,l),GetSlot(e,d),GetSlot(e,m),GetSlot(e,c),GetSlot(e,u)):ToTemporalTime(e,r)}static compare(e,t){const r=ToTemporalTime(e),o=ToTemporalTime(t);for(const e of[s,l,d,m,c,u]){const t=GetSlot(r,e),n=GetSlot(o,e);if(t!==n)return ComparisonResult(t-n)}return 0}}MakeIntrinsicClass(PlainTime,"Temporal.PlainTime");class TimeZone{constructor(e){if(arguments.length<1)throw new RangeError("missing argument: identifier is required");const t=GetCanonicalTimeZoneIdentifier(e);CreateSlots(this),SetSlot(this,o,t)}get id(){if(!IsTemporalTimeZone(this))throw new TypeError("invalid receiver");return ToString(this)}getOffsetNanosecondsFor(e){if(!IsTemporalTimeZone(this))throw new TypeError("invalid receiver");const t=ToTemporalInstant(e),n=GetSlot(this,o);return TestTimeZoneOffsetString(n)?ParseTimeZoneOffsetString(n):GetIANATimeZoneOffsetNanoseconds(GetSlot(t,r),n)}getOffsetStringFor(e){if(!IsTemporalTimeZone(this))throw new TypeError("invalid receiver");return BuiltinTimeZoneGetOffsetStringFor(this,ToTemporalInstant(e))}getPlainDateTimeFor(e,t=GetISO8601Calendar()){return BuiltinTimeZoneGetPlainDateTimeFor(this,ToTemporalInstant(e),ToTemporalCalendar(t))}getInstantFor(e,t){if(!IsTemporalTimeZone(this))throw new TypeError("invalid receiver");return BuiltinTimeZoneGetInstantFor(this,ToTemporalDateTime(e),ToTemporalDisambiguation(GetOptionsObject(t)))}getPossibleInstantsFor(t){if(!IsTemporalTimeZone(this))throw new TypeError("invalid receiver");const r=ToTemporalDateTime(t),h=GetIntrinsic("%Temporal.Instant%"),T=GetSlot(this,o);if(TestTimeZoneOffsetString(T)){const t=GetEpochFromISOParts(GetSlot(r,n),GetSlot(r,a),GetSlot(r,i),GetSlot(r,s),GetSlot(r,l),GetSlot(r,d),GetSlot(r,m),GetSlot(r,c),GetSlot(r,u));if(null===t)throw new RangeError("DateTime outside of supported range");const o=ParseTimeZoneOffsetString(T);return[new h(e.default.subtract(t,e.default.BigInt(o)))]}return function GetIANATimeZoneEpochValue(t,r,o,n,a,i,s,l,d,m){const c=GetEpochFromISOParts(r,o,n,a,i,s,l,d,m);if(null===c)throw new RangeError("DateTime outside of supported range");let u=e.default.subtract(c,we);e.default.lessThan(u,ge)&&(u=c);let h=e.default.add(c,we);e.default.greaterThan(h,Ie)&&(h=c);const T=GetIANATimeZoneOffsetNanoseconds(u,t),p=GetIANATimeZoneOffsetNanoseconds(h,t);return(T===p?[T]:[T,p]).map((u=>{const h=e.default.subtract(c,e.default.BigInt(u)),T=GetIANATimeZoneDateTimeParts(h,t);if(r===T.year&&o===T.month&&n===T.day&&a===T.hour&&i===T.minute&&s===T.second&&l===T.millisecond&&d===T.microsecond&&m===T.nanosecond)return h})).filter((e=>void 0!==e))}(T,GetSlot(r,n),GetSlot(r,a),GetSlot(r,i),GetSlot(r,s),GetSlot(r,l),GetSlot(r,d),GetSlot(r,m),GetSlot(r,c),GetSlot(r,u)).map((e=>new h(e)))}getNextTransition(t){if(!IsTemporalTimeZone(this))throw new TypeError("invalid receiver");const n=ToTemporalInstant(t),a=GetSlot(this,o);if(TestTimeZoneOffsetString(a)||"UTC"===a)return null;let i=GetSlot(n,r);const s=GetIntrinsic("%Temporal.Instant%");return i=function GetIANATimeZoneNextTransition(t,r){const o=e.default.add(t,ve),n=maxJSBI(afterLatestPossibleTzdbRuleChange(),o);let a=maxJSBI(De,t);const i=GetIANATimeZoneOffsetNanoseconds(a,r);let s=a,l=i;for(;i===l&&e.default.lessThan(e.default.BigInt(a),n);)s=e.default.add(a,Oe),l=GetIANATimeZoneOffsetNanoseconds(s,r),i===l&&(a=s);return i===l?null:bisect((e=>GetIANATimeZoneOffsetNanoseconds(e,r)),a,s,i,l)}(i,a),null===i?null:new s(i)}getPreviousTransition(e){if(!IsTemporalTimeZone(this))throw new TypeError("invalid receiver");const t=ToTemporalInstant(e),n=GetSlot(this,o);if(TestTimeZoneOffsetString(n)||"UTC"===n)return null;let a=GetSlot(t,r);const i=GetIntrinsic("%Temporal.Instant%");return a=GetIANATimeZonePreviousTransition(a,n),null===a?null:new i(a)}toString(){if(!IsTemporalTimeZone(this))throw new TypeError("invalid receiver");return ToString(GetSlot(this,o))}toJSON(){if(!IsTemporalTimeZone(this))throw new TypeError("invalid receiver");return ToString(this)}static from(e){return ToTemporalTimeZone(e)}}MakeIntrinsicClass(TimeZone,"Temporal.TimeZone");const St=Object.create;class PlainYearMonth{constructor(e,t,r=GetISO8601Calendar(),o=1){const n=ToIntegerThrowOnInfinity(e),a=ToIntegerThrowOnInfinity(t),i=ToTemporalCalendar(r),s=ToIntegerThrowOnInfinity(o);if(arguments.length<2)throw new RangeError("missing argument: isoYear and isoMonth are required");CreateTemporalYearMonthSlots(this,n,a,i,s)}get year(){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return CalendarYear(GetSlot(this,h),this)}get month(){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return CalendarMonth(GetSlot(this,h),this)}get monthCode(){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return CalendarMonthCode(GetSlot(this,h),this)}get calendar(){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return GetSlot(this,h)}get era(){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return CalendarEra(GetSlot(this,h),this)}get eraYear(){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return CalendarEraYear(GetSlot(this,h),this)}get daysInMonth(){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return CalendarDaysInMonth(GetSlot(this,h),this)}get daysInYear(){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return CalendarDaysInYear(GetSlot(this,h),this)}get monthsInYear(){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return CalendarMonthsInYear(GetSlot(this,h),this)}get inLeapYear(){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return CalendarInLeapYear(GetSlot(this,h),this)}with(e,t){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");if(!IsObject(e))throw new TypeError("invalid argument");RejectObjectWithCalendarOrTimeZone(e);const r=GetSlot(this,h),o=CalendarFields(r,["month","monthCode","year"]),n=PrepareTemporalFields(e,o,"partial");if(!n)throw new TypeError("invalid year-month-like");let a=PrepareTemporalFields(this,o,[]);a=CalendarMergeFields(r,a,n),a=PrepareTemporalFields(a,o,[]);return CalendarYearMonthFromFields(r,a,GetOptionsObject(t))}add(e,t){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return AddDurationToOrSubtractDurationFromPlainYearMonth("add",this,e,t)}subtract(e,t){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return AddDurationToOrSubtractDurationFromPlainYearMonth("subtract",this,e,t)}until(e,t){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return DifferenceTemporalPlainYearMonth("until",this,e,t)}since(e,t){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return DifferenceTemporalPlainYearMonth("since",this,e,t)}equals(e){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");const t=ToTemporalYearMonth(e);for(const e of[n,a,i]){if(GetSlot(this,e)!==GetSlot(t,e))return!1}return CalendarEquals(GetSlot(this,h),GetSlot(t,h))}toString(e){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return TemporalYearMonthToString(this,ToShowCalendarOption(GetOptionsObject(e)))}toJSON(){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return TemporalYearMonthToString(this)}toLocaleString(e,t){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return new ot(e,t).format(this)}valueOf(){throw new TypeError("use compare() or equals() to compare Temporal.PlainYearMonth")}toPlainDate(e){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");if(!IsObject(e))throw new TypeError("argument should be an object");const t=GetSlot(this,h),r=CalendarFields(t,["monthCode","year"]),o=PrepareTemporalFields(this,r,[]),n=CalendarFields(t,["day"]);let a=CalendarMergeFields(t,o,PrepareTemporalFields(e,n,[]));a=PrepareTemporalFields(a,[...new Set([...r,...n])],[]);const i=St(null);return i.overflow="reject",CalendarDateFromFields(t,a,i)}getISOFields(){if(!IsTemporalYearMonth(this))throw new TypeError("invalid receiver");return{calendar:GetSlot(this,h),isoDay:GetSlot(this,i),isoMonth:GetSlot(this,a),isoYear:GetSlot(this,n)}}static from(e,t){const r=GetOptionsObject(t);return IsTemporalYearMonth(e)?(ToTemporalOverflow(r),CreateTemporalYearMonth(GetSlot(e,n),GetSlot(e,a),GetSlot(e,h),GetSlot(e,i))):ToTemporalYearMonth(e,r)}static compare(e,t){const r=ToTemporalYearMonth(e),o=ToTemporalYearMonth(t);return CompareISODate(GetSlot(r,n),GetSlot(r,a),GetSlot(r,i),GetSlot(o,n),GetSlot(o,a),GetSlot(o,i))}}MakeIntrinsicClass(PlainYearMonth,"Temporal.PlainYearMonth");class ZonedDateTime{constructor(e,t,r=GetISO8601Calendar()){if(arguments.length<1)throw new TypeError("missing argument: epochNanoseconds is required");CreateTemporalZonedDateTimeSlots(this,ToBigInt(e),ToTemporalTimeZone(t),ToTemporalCalendar(r))}get calendar(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return GetSlot(this,h)}get timeZone(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return GetSlot(this,p)}get year(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarYear(GetSlot(this,h),dateTime(this))}get month(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarMonth(GetSlot(this,h),dateTime(this))}get monthCode(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarMonthCode(GetSlot(this,h),dateTime(this))}get day(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarDay(GetSlot(this,h),dateTime(this))}get hour(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return GetSlot(dateTime(this),s)}get minute(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return GetSlot(dateTime(this),l)}get second(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return GetSlot(dateTime(this),d)}get millisecond(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return GetSlot(dateTime(this),m)}get microsecond(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return GetSlot(dateTime(this),c)}get nanosecond(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return GetSlot(dateTime(this),u)}get era(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarEra(GetSlot(this,h),dateTime(this))}get eraYear(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarEraYear(GetSlot(this,h),dateTime(this))}get epochSeconds(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const t=GetSlot(this,r);return e.default.toNumber(e.default.divide(t,ye))}get epochMilliseconds(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const t=GetSlot(this,r);return e.default.toNumber(e.default.divide(t,fe))}get epochMicroseconds(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const t=GetSlot(this,r);return ToBigIntExternal(e.default.divide(t,pe))}get epochNanoseconds(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return ToBigIntExternal(GetSlot(this,r))}get dayOfWeek(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarDayOfWeek(GetSlot(this,h),dateTime(this))}get dayOfYear(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarDayOfYear(GetSlot(this,h),dateTime(this))}get weekOfYear(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarWeekOfYear(GetSlot(this,h),dateTime(this))}get hoursInDay(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const t=dateTime(this),o=GetIntrinsic("%Temporal.PlainDateTime%"),s=GetSlot(t,n),l=GetSlot(t,a),d=GetSlot(t,i),m=new o(s,l,d,0,0,0,0,0,0),c=AddISODate(s,l,d,0,0,0,1,"reject"),u=new o(c.year,c.month,c.day,0,0,0,0,0,0),h=GetSlot(this,p),T=GetSlot(BuiltinTimeZoneGetInstantFor(h,m,"compatible"),r),f=GetSlot(BuiltinTimeZoneGetInstantFor(h,u,"compatible"),r);return e.default.toNumber(e.default.subtract(f,T))/36e11}get daysInWeek(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarDaysInWeek(GetSlot(this,h),dateTime(this))}get daysInMonth(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarDaysInMonth(GetSlot(this,h),dateTime(this))}get daysInYear(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarDaysInYear(GetSlot(this,h),dateTime(this))}get monthsInYear(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarMonthsInYear(GetSlot(this,h),dateTime(this))}get inLeapYear(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return CalendarInLeapYear(GetSlot(this,h),dateTime(this))}get offset(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return BuiltinTimeZoneGetOffsetStringFor(GetSlot(this,p),GetSlot(this,T))}get offsetNanoseconds(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return GetOffsetNanosecondsFor(GetSlot(this,p),GetSlot(this,T))}with(e,t){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");if(!IsObject(e))throw new TypeError("invalid zoned-date-time-like");RejectObjectWithCalendarOrTimeZone(e);const r=GetOptionsObject(t),o=ToTemporalDisambiguation(r),n=ToTemporalOffset(r,"prefer"),a=GetSlot(this,p),i=GetSlot(this,h),s=ArrayPush(CalendarFields(i,["day","hour","microsecond","millisecond","minute","month","monthCode","nanosecond","second","year"]),"offset"),l=PrepareTemporalFields(e,s,"partial"),d=ArrayPush(s,"timeZone");let m=PrepareTemporalFields(this,d,["timeZone","offset"]);m=CalendarMergeFields(i,m,l),m=PrepareTemporalFields(m,d,["timeZone","offset"]);let{year:c,month:u,day:T,hour:f,minute:y,second:S,millisecond:w,microsecond:g,nanosecond:I}=InterpretTemporalDateTimeFields(i,m,r);return CreateTemporalZonedDateTime(InterpretISODateTimeOffset(c,u,T,f,y,S,w,g,I,"option",ParseTimeZoneOffsetString(m.offset),a,o,n,!1),GetSlot(this,p),i)}withPlainDate(e){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const t=ToTemporalDate(e),o=GetSlot(t,n),T=GetSlot(t,a),f=GetSlot(t,i);let y=GetSlot(t,h);const S=dateTime(this),w=GetSlot(S,s),g=GetSlot(S,l),I=GetSlot(S,d),D=GetSlot(S,m),G=GetSlot(S,c),v=GetSlot(S,u);y=ConsolidateCalendars(GetSlot(this,h),y);const O=GetSlot(this,p);return CreateTemporalZonedDateTime(GetSlot(BuiltinTimeZoneGetInstantFor(O,new(GetIntrinsic("%Temporal.PlainDateTime%"))(o,T,f,w,g,I,D,G,v,y),"compatible"),r),O,y)}withPlainTime(e){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const t=GetIntrinsic("%Temporal.PlainTime%"),o=void 0===e?new t:ToTemporalTime(e),T=dateTime(this),f=GetSlot(T,n),y=GetSlot(T,a),S=GetSlot(T,i),w=GetSlot(this,h),g=GetSlot(o,s),I=GetSlot(o,l),D=GetSlot(o,d),G=GetSlot(o,m),v=GetSlot(o,c),O=GetSlot(o,u),C=GetSlot(this,p);return CreateTemporalZonedDateTime(GetSlot(BuiltinTimeZoneGetInstantFor(C,new(GetIntrinsic("%Temporal.PlainDateTime%"))(f,y,S,g,I,D,G,v,O,w),"compatible"),r),C,w)}withTimeZone(e){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const t=ToTemporalTimeZone(e);return CreateTemporalZonedDateTime(GetSlot(this,r),t,GetSlot(this,h))}withCalendar(e){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const t=ToTemporalCalendar(e);return CreateTemporalZonedDateTime(GetSlot(this,r),GetSlot(this,p),t)}add(e,t){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return AddDurationToOrSubtractDurationFromZonedDateTime("add",this,e,t)}subtract(e,t){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return AddDurationToOrSubtractDurationFromZonedDateTime("subtract",this,e,t)}until(e,t){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return DifferenceTemporalZonedDateTime("until",this,e,t)}since(e,t){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return DifferenceTemporalZonedDateTime("since",this,e,t)}round(t){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");if(void 0===t)throw new TypeError("options parameter is required");const o="string"==typeof t?CreateOnePropObject("smallestUnit",t):GetOptionsObject(t),f=GetTemporalUnit(o,"smallestUnit","time",je,["day"]),y=ToTemporalRoundingMode(o,"halfExpand"),S=ToTemporalRoundingIncrement(o,{day:1,hour:24,minute:60,second:60,millisecond:1e3,microsecond:1e3,nanosecond:1e3}[f],!1),w=dateTime(this);let g=GetSlot(w,n),I=GetSlot(w,a),D=GetSlot(w,i),G=GetSlot(w,s),v=GetSlot(w,l),O=GetSlot(w,d),C=GetSlot(w,m),E=GetSlot(w,c),b=GetSlot(w,u);const M=GetIntrinsic("%Temporal.PlainDateTime%"),R=GetSlot(this,p),Z=GetSlot(this,h),P=BuiltinTimeZoneGetInstantFor(R,new M(GetSlot(w,n),GetSlot(w,a),GetSlot(w,i),0,0,0,0,0,0),"compatible"),F=AddZonedDateTime(P,R,Z,0,0,0,1,0,0,0,0,0,0),Y=e.default.subtract(F,e.default.BigInt(GetSlot(P,r)));if(e.default.equal(Y,ue))throw new RangeError("cannot round a ZonedDateTime in a calendar with zero-length days");({year:g,month:I,day:D,hour:G,minute:v,second:O,millisecond:C,microsecond:E,nanosecond:b}=RoundISODateTime(g,I,D,G,v,O,C,E,b,S,f,y,e.default.toNumber(Y)));return CreateTemporalZonedDateTime(InterpretISODateTimeOffset(g,I,D,G,v,O,C,E,b,"option",GetOffsetNanosecondsFor(R,GetSlot(this,T)),R,"compatible","prefer",!1),R,GetSlot(this,h))}equals(t){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const o=ToTemporalZonedDateTime(t),n=GetSlot(this,r),a=GetSlot(o,r);return!!e.default.equal(e.default.BigInt(n),e.default.BigInt(a))&&(!!TimeZoneEquals(GetSlot(this,p),GetSlot(o,p))&&CalendarEquals(GetSlot(this,h),GetSlot(o,h)))}toString(e){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const t=GetOptionsObject(e),{precision:r,unit:o,increment:n}=ToSecondsStringPrecision(t),a=ToTemporalRoundingMode(t,"trunc");return TemporalZonedDateTimeToString(this,r,ToShowCalendarOption(t),function ToShowTimeZoneNameOption(e){return GetOption(e,"timeZoneName",["auto","never"],"auto")}(t),function ToShowOffsetOption(e){return GetOption(e,"offset",["auto","never"],"auto")}(t),{unit:o,increment:n,roundingMode:a})}toLocaleString(e,t){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return new ot(e,t).format(this)}toJSON(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return TemporalZonedDateTimeToString(this,"auto")}valueOf(){throw new TypeError("use compare() or equals() to compare Temporal.ZonedDateTime")}startOfDay(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const e=dateTime(this),t=GetIntrinsic("%Temporal.PlainDateTime%"),o=GetSlot(this,h),s=new t(GetSlot(e,n),GetSlot(e,a),GetSlot(e,i),0,0,0,0,0,0,o),l=GetSlot(this,p);return CreateTemporalZonedDateTime(GetSlot(BuiltinTimeZoneGetInstantFor(l,s,"compatible"),r),l,o)}toInstant(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return new(GetIntrinsic("%Temporal.Instant%"))(GetSlot(this,r))}toPlainDate(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return TemporalDateTimeToDate(dateTime(this))}toPlainTime(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return TemporalDateTimeToTime(dateTime(this))}toPlainDateTime(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");return dateTime(this)}toPlainYearMonth(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const e=GetSlot(this,h);return CalendarYearMonthFromFields(e,PrepareTemporalFields(this,CalendarFields(e,["monthCode","year"]),[]))}toPlainMonthDay(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const e=GetSlot(this,h);return CalendarMonthDayFromFields(e,PrepareTemporalFields(this,CalendarFields(e,["day","monthCode"]),[]))}getISOFields(){if(!IsTemporalZonedDateTime(this))throw new TypeError("invalid receiver");const e=dateTime(this),t=GetSlot(this,p);return{calendar:GetSlot(this,h),isoDay:GetSlot(e,i),isoHour:GetSlot(e,s),isoMicrosecond:GetSlot(e,c),isoMillisecond:GetSlot(e,m),isoMinute:GetSlot(e,l),isoMonth:GetSlot(e,a),isoNanosecond:GetSlot(e,u),isoSecond:GetSlot(e,d),isoYear:GetSlot(e,n),offset:BuiltinTimeZoneGetOffsetStringFor(t,GetSlot(this,T)),timeZone:t}}static from(e,t){const o=GetOptionsObject(t);return IsTemporalZonedDateTime(e)?(ToTemporalOverflow(o),ToTemporalDisambiguation(o),ToTemporalOffset(o,"reject"),CreateTemporalZonedDateTime(GetSlot(e,r),GetSlot(e,p),GetSlot(e,h))):ToTemporalZonedDateTime(e,o)}static compare(t,o){const n=ToTemporalZonedDateTime(t),a=ToTemporalZonedDateTime(o),i=GetSlot(n,r),s=GetSlot(a,r);return e.default.lessThan(e.default.BigInt(i),e.default.BigInt(s))?-1:e.default.greaterThan(e.default.BigInt(i),e.default.BigInt(s))?1:0}}function dateTime(e){return BuiltinTimeZoneGetPlainDateTimeFor(GetSlot(e,p),GetSlot(e,T),GetSlot(e,h))}MakeIntrinsicClass(ZonedDateTime,"Temporal.ZonedDateTime");var wt=Object.freeze({__proto__:null,Instant,Calendar,PlainDate,PlainDateTime,Duration,PlainMonthDay,Now:ft,PlainTime,TimeZone,PlainYearMonth,ZonedDateTime});const gt=[Instant,Calendar,PlainDate,PlainDateTime,Duration,PlainMonthDay,PlainTime,TimeZone,PlainYearMonth,ZonedDateTime];for(const e of gt){const t=Object.getOwnPropertyDescriptor(e,"prototype");(t.configurable||t.enumerable||t.writable)&&(t.configurable=!1,t.enumerable=!1,t.writable=!1,Object.defineProperty(e,"prototype",t))}exports.Intl=nt,exports.Temporal=wt,exports.toTemporalInstant=function toTemporalInstant(){const t=e.default.multiply(e.default.BigInt(+this),fe);return new Instant(ToBigInt(t))};
//# sourceMappingURL=index.cjs.map


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./storage.js */ "./src/storage.js");
/* harmony import */ var _UI_page_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UI/page.js */ "./src/UI/page.js");
/* harmony import */ var _UI_header__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UI/header */ "./src/UI/header.js");
/* harmony import */ var _UI_header__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_UI_header__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _project_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./project.js */ "./src/project.js");
/* harmony import */ var _todo_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./todo.js */ "./src/todo.js");



const storage = new _storage_js__WEBPACK_IMPORTED_MODULE_0__["default"]();



storage.initializeStorage()

const project1 = new _project_js__WEBPACK_IMPORTED_MODULE_3__["default"]('work')
const project2 = new _project_js__WEBPACK_IMPORTED_MODULE_3__["default"]('gym')
const project3 = new _project_js__WEBPACK_IMPORTED_MODULE_3__["default"]('school')
const project4 = new _project_js__WEBPACK_IMPORTED_MODULE_3__["default"]('Todo app')
const project5 = new _project_js__WEBPACK_IMPORTED_MODULE_3__["default"]('accounting')
const project6 = new _project_js__WEBPACK_IMPORTED_MODULE_3__["default"]('hooping')

const todo1 = new _todo_js__WEBPACK_IMPORTED_MODULE_4__["default"]('stuff', 'very hard to do', '2023-5-6', 'high');
const todo2 = new _todo_js__WEBPACK_IMPORTED_MODULE_4__["default"]('some work', 'simplework', '1995-7-6', 'low');
const todo3 = new _todo_js__WEBPACK_IMPORTED_MODULE_4__["default"]('school', 'do homework', '2023-5-14', 'medium');
const todo4 = new _todo_js__WEBPACK_IMPORTED_MODULE_4__["default"]('code', 'do this project', '2020-5-6', 'high');
const todo5 = new _todo_js__WEBPACK_IMPORTED_MODULE_4__["default"]('walk', 'walk somewhere', '2012-5-6', 'high');
const todo6 = new _todo_js__WEBPACK_IMPORTED_MODULE_4__["default"]('run', 'run a little bit', '2028-5-11', 'low');
const todo7 = new _todo_js__WEBPACK_IMPORTED_MODULE_4__["default"]('eat', 'find some food coz im starving', '2020-11-6', 'medium');
const todo8 = new _todo_js__WEBPACK_IMPORTED_MODULE_4__["default"]('eatjdcnkwnovn;oJVOIAJVONWRIFJOIWRJFOIJWROIFJOIEWJFIWEJSDNVLKNDLVLSDMVLDFVLIDFLIVLIV', 'find some food coz im starving', '2020-11-6', 'medium');

project1.saveProject()
project2.saveProject()
project3.saveProject()
project4.saveProject()
project5.saveProject()
project6.saveProject()

todo1.saveTodo()
todo2.saveTodo()
todo3.saveTodo()
todo4.saveTodo()
todo5.saveTodo()
todo6.saveTodo()
todo7.saveTodo()
// todo8.saveTodo()

;(0,_UI_page_js__WEBPACK_IMPORTED_MODULE_1__["default"])()
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,